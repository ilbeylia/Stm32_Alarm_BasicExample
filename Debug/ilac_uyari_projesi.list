
ilac_uyari_projesi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a09c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a224  0800a224  0000b224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a240  0800a240  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a240  0800a240  0000b240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a248  0800a248  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a248  0800a248  0000b248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a24c  0800a24c  0000b24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a250  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000aa8  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b24  20000b24  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018593  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042e8  00000000  00000000  0002463f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  00028928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100a  00000000  00000000  00029e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025541  00000000  00000000  0002ae42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d58f  00000000  00000000  00050383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d257c  00000000  00000000  0006d912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fe8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aa8  00000000  00000000  0013fed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0014597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a20c 	.word	0x0800a20c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a20c 	.word	0x0800a20c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Flash_WR>:
 *      Author: ilbeyli
 */

#include "FLASH_PROCESS_lib.h"

void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80004c2:	f001 faa5 	bl	8001a10 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 80004c6:	2102      	movs	r1, #2
 80004c8:	200b      	movs	r0, #11
 80004ca:	f001 fc03 	bl	8001cd4 <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	2200      	movs	r2, #0
 80004d2:	461c      	mov	r4, r3
 80004d4:	4615      	mov	r5, r2
 80004d6:	4622      	mov	r2, r4
 80004d8:	462b      	mov	r3, r5
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	2002      	movs	r0, #2
 80004de:	f001 fa43 	bl	8001968 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80004e2:	f001 fab7 	bl	8001a54 <HAL_FLASH_Lock>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080004f0 <process_alarm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void process_alarm(bool AlarmState, int time){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	71fb      	strb	r3, [r7, #7]
	if(AlarmState == true){
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d076      	beq.n	80005f0 <process_alarm+0x100>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8000502:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000506:	484c      	ldr	r0, [pc, #304]	@ (8000638 <process_alarm+0x148>)
 8000508:	f001 fdf9 	bl	80020fe <HAL_GPIO_TogglePin>

//		06:00 - 11:59 → Sabah
//		12:00 - 17:59 → Öğle
//		18:00 - 23:59 → Akşam
//		00:00 - 05:59 → Gece
			if (6 <= time && time < 12) {
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	2b05      	cmp	r3, #5
 8000510:	dd1a      	ble.n	8000548 <process_alarm+0x58>
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	2b0b      	cmp	r3, #11
 8000516:	dc17      	bgt.n	8000548 <process_alarm+0x58>
			    // Sabah
				HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000518:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051c:	4846      	ldr	r0, [pc, #280]	@ (8000638 <process_alarm+0x148>)
 800051e:	f001 fdee 	bl	80020fe <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000528:	4843      	ldr	r0, [pc, #268]	@ (8000638 <process_alarm+0x148>)
 800052a:	f001 fdcf 	bl	80020cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000534:	4840      	ldr	r0, [pc, #256]	@ (8000638 <process_alarm+0x148>)
 8000536:	f001 fdc9 	bl	80020cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000540:	483d      	ldr	r0, [pc, #244]	@ (8000638 <process_alarm+0x148>)
 8000542:	f001 fdc3 	bl	80020cc <HAL_GPIO_WritePin>
 8000546:	e072      	b.n	800062e <process_alarm+0x13e>
			}
			else if (12 <= time && time < 18) {
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2b0b      	cmp	r3, #11
 800054c:	dd1a      	ble.n	8000584 <process_alarm+0x94>
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2b11      	cmp	r3, #17
 8000552:	dc17      	bgt.n	8000584 <process_alarm+0x94>
			    // Öğle
				HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8000554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000558:	4837      	ldr	r0, [pc, #220]	@ (8000638 <process_alarm+0x148>)
 800055a:	f001 fdd0 	bl	80020fe <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000564:	4834      	ldr	r0, [pc, #208]	@ (8000638 <process_alarm+0x148>)
 8000566:	f001 fdb1 	bl	80020cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000570:	4831      	ldr	r0, [pc, #196]	@ (8000638 <process_alarm+0x148>)
 8000572:	f001 fdab 	bl	80020cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057c:	482e      	ldr	r0, [pc, #184]	@ (8000638 <process_alarm+0x148>)
 800057e:	f001 fda5 	bl	80020cc <HAL_GPIO_WritePin>
 8000582:	e054      	b.n	800062e <process_alarm+0x13e>
			}
			else if (18 <= time && time < 24) {
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b11      	cmp	r3, #17
 8000588:	dd1a      	ble.n	80005c0 <process_alarm+0xd0>
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b17      	cmp	r3, #23
 800058e:	dc17      	bgt.n	80005c0 <process_alarm+0xd0>
			    // Akşam
				HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 8000590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000594:	4828      	ldr	r0, [pc, #160]	@ (8000638 <process_alarm+0x148>)
 8000596:	f001 fdb2 	bl	80020fe <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005a0:	4825      	ldr	r0, [pc, #148]	@ (8000638 <process_alarm+0x148>)
 80005a2:	f001 fd93 	bl	80020cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ac:	4822      	ldr	r0, [pc, #136]	@ (8000638 <process_alarm+0x148>)
 80005ae:	f001 fd8d 	bl	80020cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005b8:	481f      	ldr	r0, [pc, #124]	@ (8000638 <process_alarm+0x148>)
 80005ba:	f001 fd87 	bl	80020cc <HAL_GPIO_WritePin>
 80005be:	e036      	b.n	800062e <process_alarm+0x13e>
			}
			else {
			    // Gece
				HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 80005c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c4:	481c      	ldr	r0, [pc, #112]	@ (8000638 <process_alarm+0x148>)
 80005c6:	f001 fd9a 	bl	80020fe <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d0:	4819      	ldr	r0, [pc, #100]	@ (8000638 <process_alarm+0x148>)
 80005d2:	f001 fd7b 	bl	80020cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005dc:	4816      	ldr	r0, [pc, #88]	@ (8000638 <process_alarm+0x148>)
 80005de:	f001 fd75 	bl	80020cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e8:	4813      	ldr	r0, [pc, #76]	@ (8000638 <process_alarm+0x148>)
 80005ea:	f001 fd6f 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
	}
}
 80005ee:	e01e      	b.n	800062e <process_alarm+0x13e>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f6:	4810      	ldr	r0, [pc, #64]	@ (8000638 <process_alarm+0x148>)
 80005f8:	f001 fd68 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000602:	480d      	ldr	r0, [pc, #52]	@ (8000638 <process_alarm+0x148>)
 8000604:	f001 fd62 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <process_alarm+0x148>)
 8000610:	f001 fd5c 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061a:	4807      	ldr	r0, [pc, #28]	@ (8000638 <process_alarm+0x148>)
 800061c:	f001 fd56 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <process_alarm+0x148>)
 8000628:	f001 fd50 	bl	80020cc <HAL_GPIO_WritePin>
}
 800062c:	e7ff      	b.n	800062e <process_alarm+0x13e>
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020c00 	.word	0x40020c00

0800063c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d102      	bne.n	8000652 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	AlarmTriggered = true;
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x24>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
    }

}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200001d9 	.word	0x200001d9

08000664 <SevenSDisplay1>:

void SevenSDisplay1(int value) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000672:	48bd      	ldr	r0, [pc, #756]	@ (8000968 <SevenSDisplay1+0x304>)
 8000674:	f001 fd2a 	bl	80020cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800067e:	48ba      	ldr	r0, [pc, #744]	@ (8000968 <SevenSDisplay1+0x304>)
 8000680:	f001 fd24 	bl	80020cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800068a:	48b7      	ldr	r0, [pc, #732]	@ (8000968 <SevenSDisplay1+0x304>)
 800068c:	f001 fd1e 	bl	80020cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	48b4      	ldr	r0, [pc, #720]	@ (8000968 <SevenSDisplay1+0x304>)
 8000698:	f001 fd18 	bl	80020cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a2:	48b1      	ldr	r0, [pc, #708]	@ (8000968 <SevenSDisplay1+0x304>)
 80006a4:	f001 fd12 	bl	80020cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ae:	48ae      	ldr	r0, [pc, #696]	@ (8000968 <SevenSDisplay1+0x304>)
 80006b0:	f001 fd0c 	bl	80020cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2180      	movs	r1, #128	@ 0x80
 80006b8:	48ab      	ldr	r0, [pc, #684]	@ (8000968 <SevenSDisplay1+0x304>)
 80006ba:	f001 fd07 	bl	80020cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(dp1_GPIO_Port, dp1_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c4:	48a8      	ldr	r0, [pc, #672]	@ (8000968 <SevenSDisplay1+0x304>)
 80006c6:	f001 fd01 	bl	80020cc <HAL_GPIO_WritePin>
    switch (value) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b09      	cmp	r3, #9
 80006ce:	f200 8140 	bhi.w	8000952 <SevenSDisplay1+0x2ee>
 80006d2:	a201      	add	r2, pc, #4	@ (adr r2, 80006d8 <SevenSDisplay1+0x74>)
 80006d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d8:	08000701 	.word	0x08000701
 80006dc:	0800074b 	.word	0x0800074b
 80006e0:	08000765 	.word	0x08000765
 80006e4:	080007a1 	.word	0x080007a1
 80006e8:	080007dd 	.word	0x080007dd
 80006ec:	0800080d 	.word	0x0800080d
 80006f0:	08000849 	.word	0x08000849
 80006f4:	08000891 	.word	0x08000891
 80006f8:	080008b7 	.word	0x080008b7
 80006fc:	0800090b 	.word	0x0800090b
        case 0:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000706:	4898      	ldr	r0, [pc, #608]	@ (8000968 <SevenSDisplay1+0x304>)
 8000708:	f001 fce0 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000712:	4895      	ldr	r0, [pc, #596]	@ (8000968 <SevenSDisplay1+0x304>)
 8000714:	f001 fcda 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071e:	4892      	ldr	r0, [pc, #584]	@ (8000968 <SevenSDisplay1+0x304>)
 8000720:	f001 fcd4 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800072a:	488f      	ldr	r0, [pc, #572]	@ (8000968 <SevenSDisplay1+0x304>)
 800072c:	f001 fcce 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000736:	488c      	ldr	r0, [pc, #560]	@ (8000968 <SevenSDisplay1+0x304>)
 8000738:	f001 fcc8 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000742:	4889      	ldr	r0, [pc, #548]	@ (8000968 <SevenSDisplay1+0x304>)
 8000744:	f001 fcc2 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 8000748:	e10a      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 1:
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000750:	4885      	ldr	r0, [pc, #532]	@ (8000968 <SevenSDisplay1+0x304>)
 8000752:	f001 fcbb 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075c:	4882      	ldr	r0, [pc, #520]	@ (8000968 <SevenSDisplay1+0x304>)
 800075e:	f001 fcb5 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 8000762:	e0fd      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 2:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076a:	487f      	ldr	r0, [pc, #508]	@ (8000968 <SevenSDisplay1+0x304>)
 800076c:	f001 fcae 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000776:	487c      	ldr	r0, [pc, #496]	@ (8000968 <SevenSDisplay1+0x304>)
 8000778:	f001 fca8 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2180      	movs	r1, #128	@ 0x80
 8000780:	4879      	ldr	r0, [pc, #484]	@ (8000968 <SevenSDisplay1+0x304>)
 8000782:	f001 fca3 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800078c:	4876      	ldr	r0, [pc, #472]	@ (8000968 <SevenSDisplay1+0x304>)
 800078e:	f001 fc9d 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000798:	4873      	ldr	r0, [pc, #460]	@ (8000968 <SevenSDisplay1+0x304>)
 800079a:	f001 fc97 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 800079e:	e0df      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 3:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a6:	4870      	ldr	r0, [pc, #448]	@ (8000968 <SevenSDisplay1+0x304>)
 80007a8:	f001 fc90 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b2:	486d      	ldr	r0, [pc, #436]	@ (8000968 <SevenSDisplay1+0x304>)
 80007b4:	f001 fc8a 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2180      	movs	r1, #128	@ 0x80
 80007bc:	486a      	ldr	r0, [pc, #424]	@ (8000968 <SevenSDisplay1+0x304>)
 80007be:	f001 fc85 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c8:	4867      	ldr	r0, [pc, #412]	@ (8000968 <SevenSDisplay1+0x304>)
 80007ca:	f001 fc7f 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007d4:	4864      	ldr	r0, [pc, #400]	@ (8000968 <SevenSDisplay1+0x304>)
 80007d6:	f001 fc79 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 80007da:	e0c1      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 4:
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e2:	4861      	ldr	r0, [pc, #388]	@ (8000968 <SevenSDisplay1+0x304>)
 80007e4:	f001 fc72 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2180      	movs	r1, #128	@ 0x80
 80007ec:	485e      	ldr	r0, [pc, #376]	@ (8000968 <SevenSDisplay1+0x304>)
 80007ee:	f001 fc6d 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f8:	485b      	ldr	r0, [pc, #364]	@ (8000968 <SevenSDisplay1+0x304>)
 80007fa:	f001 fc67 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000804:	4858      	ldr	r0, [pc, #352]	@ (8000968 <SevenSDisplay1+0x304>)
 8000806:	f001 fc61 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 800080a:	e0a9      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 5:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000812:	4855      	ldr	r0, [pc, #340]	@ (8000968 <SevenSDisplay1+0x304>)
 8000814:	f001 fc5a 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800081e:	4852      	ldr	r0, [pc, #328]	@ (8000968 <SevenSDisplay1+0x304>)
 8000820:	f001 fc54 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2180      	movs	r1, #128	@ 0x80
 8000828:	484f      	ldr	r0, [pc, #316]	@ (8000968 <SevenSDisplay1+0x304>)
 800082a:	f001 fc4f 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000834:	484c      	ldr	r0, [pc, #304]	@ (8000968 <SevenSDisplay1+0x304>)
 8000836:	f001 fc49 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000840:	4849      	ldr	r0, [pc, #292]	@ (8000968 <SevenSDisplay1+0x304>)
 8000842:	f001 fc43 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 8000846:	e08b      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 6:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800084e:	4846      	ldr	r0, [pc, #280]	@ (8000968 <SevenSDisplay1+0x304>)
 8000850:	f001 fc3c 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800085a:	4843      	ldr	r0, [pc, #268]	@ (8000968 <SevenSDisplay1+0x304>)
 800085c:	f001 fc36 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000866:	4840      	ldr	r0, [pc, #256]	@ (8000968 <SevenSDisplay1+0x304>)
 8000868:	f001 fc30 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000872:	483d      	ldr	r0, [pc, #244]	@ (8000968 <SevenSDisplay1+0x304>)
 8000874:	f001 fc2a 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800087e:	483a      	ldr	r0, [pc, #232]	@ (8000968 <SevenSDisplay1+0x304>)
 8000880:	f001 fc24 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	4837      	ldr	r0, [pc, #220]	@ (8000968 <SevenSDisplay1+0x304>)
 800088a:	f001 fc1f 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 800088e:	e067      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 7:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <SevenSDisplay1+0x304>)
 8000898:	f001 fc18 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008a2:	4831      	ldr	r0, [pc, #196]	@ (8000968 <SevenSDisplay1+0x304>)
 80008a4:	f001 fc12 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ae:	482e      	ldr	r0, [pc, #184]	@ (8000968 <SevenSDisplay1+0x304>)
 80008b0:	f001 fc0c 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 80008b4:	e054      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 8:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008bc:	482a      	ldr	r0, [pc, #168]	@ (8000968 <SevenSDisplay1+0x304>)
 80008be:	f001 fc05 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c8:	4827      	ldr	r0, [pc, #156]	@ (8000968 <SevenSDisplay1+0x304>)
 80008ca:	f001 fbff 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d4:	4824      	ldr	r0, [pc, #144]	@ (8000968 <SevenSDisplay1+0x304>)
 80008d6:	f001 fbf9 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e0:	4821      	ldr	r0, [pc, #132]	@ (8000968 <SevenSDisplay1+0x304>)
 80008e2:	f001 fbf3 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ec:	481e      	ldr	r0, [pc, #120]	@ (8000968 <SevenSDisplay1+0x304>)
 80008ee:	f001 fbed 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f8:	481b      	ldr	r0, [pc, #108]	@ (8000968 <SevenSDisplay1+0x304>)
 80008fa:	f001 fbe7 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	4819      	ldr	r0, [pc, #100]	@ (8000968 <SevenSDisplay1+0x304>)
 8000904:	f001 fbe2 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 8000908:	e02a      	b.n	8000960 <SevenSDisplay1+0x2fc>
        case 9:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000910:	4815      	ldr	r0, [pc, #84]	@ (8000968 <SevenSDisplay1+0x304>)
 8000912:	f001 fbdb 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800091c:	4812      	ldr	r0, [pc, #72]	@ (8000968 <SevenSDisplay1+0x304>)
 800091e:	f001 fbd5 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000928:	480f      	ldr	r0, [pc, #60]	@ (8000968 <SevenSDisplay1+0x304>)
 800092a:	f001 fbcf 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <SevenSDisplay1+0x304>)
 8000936:	f001 fbc9 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <SevenSDisplay1+0x304>)
 8000942:	f001 fbc3 	bl	80020cc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	4807      	ldr	r0, [pc, #28]	@ (8000968 <SevenSDisplay1+0x304>)
 800094c:	f001 fbbe 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 8000950:	e006      	b.n	8000960 <SevenSDisplay1+0x2fc>
        default:
            HAL_GPIO_WritePin(dp1_GPIO_Port, dp1_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <SevenSDisplay1+0x304>)
 800095a:	f001 fbb7 	bl	80020cc <HAL_GPIO_WritePin>
            break;
 800095e:	bf00      	nop
    }
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000

0800096c <SevenSDisplay1_null>:

void SevenSDisplay1_null(){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2180      	movs	r1, #128	@ 0x80
 8000974:	4817      	ldr	r0, [pc, #92]	@ (80009d4 <SevenSDisplay1_null+0x68>)
 8000976:	f001 fba9 	bl	80020cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000980:	4814      	ldr	r0, [pc, #80]	@ (80009d4 <SevenSDisplay1_null+0x68>)
 8000982:	f001 fba3 	bl	80020cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098c:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <SevenSDisplay1_null+0x68>)
 800098e:	f001 fb9d 	bl	80020cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000998:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <SevenSDisplay1_null+0x68>)
 800099a:	f001 fb97 	bl	80020cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a4:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <SevenSDisplay1_null+0x68>)
 80009a6:	f001 fb91 	bl	80020cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009b0:	4808      	ldr	r0, [pc, #32]	@ (80009d4 <SevenSDisplay1_null+0x68>)
 80009b2:	f001 fb8b 	bl	80020cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <SevenSDisplay1_null+0x68>)
 80009be:	f001 fb85 	bl	80020cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(dp1_GPIO_Port, dp1_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <SevenSDisplay1_null+0x68>)
 80009ca:	f001 fb7f 	bl	80020cc <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <TimePicker>:

void TimePicker(int value){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	switch(value){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d851      	bhi.n	8000a8c <TimePicker+0xb4>
 80009e8:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <TimePicker+0x18>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a01 	.word	0x08000a01
 80009f4:	08000a19 	.word	0x08000a19
 80009f8:	08000a31 	.word	0x08000a31
 80009fc:	08000a5f 	.word	0x08000a5f
		case 1:
			if(HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == 1){
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	4828      	ldr	r0, [pc, #160]	@ (8000aa8 <TimePicker+0xd0>)
 8000a06:	f001 fb49 	bl	800209c <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d13f      	bne.n	8000a90 <TimePicker+0xb8>
				PickerHours1 =+1;
 8000a10:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <TimePicker+0xd4>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a16:	e03b      	b.n	8000a90 <TimePicker+0xb8>
		case 2:
			if(HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == 1){
 8000a18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a1c:	4822      	ldr	r0, [pc, #136]	@ (8000aa8 <TimePicker+0xd0>)
 8000a1e:	f001 fb3d 	bl	800209c <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d135      	bne.n	8000a94 <TimePicker+0xbc>
				PickerHours2 =+1;
 8000a28:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <TimePicker+0xd8>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a2e:	e031      	b.n	8000a94 <TimePicker+0xbc>
		case 3:
            HAL_GPIO_WritePin(dp1_GPIO_Port, dp1_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a36:	481f      	ldr	r0, [pc, #124]	@ (8000ab4 <TimePicker+0xdc>)
 8000a38:	f001 fb48 	bl	80020cc <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == 1){
 8000a3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a40:	4819      	ldr	r0, [pc, #100]	@ (8000aa8 <TimePicker+0xd0>)
 8000a42:	f001 fb2b 	bl	800209c <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d125      	bne.n	8000a98 <TimePicker+0xc0>
				PickerMinutes1 =+1;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <TimePicker+0xe0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
				SevenSDisplay1(PickerMinutes1);
 8000a52:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <TimePicker+0xe0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fe04 	bl	8000664 <SevenSDisplay1>
			}
			break;
 8000a5c:	e01c      	b.n	8000a98 <TimePicker+0xc0>
		case 4:
            HAL_GPIO_WritePin(dp1_GPIO_Port, dp1_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a64:	4813      	ldr	r0, [pc, #76]	@ (8000ab4 <TimePicker+0xdc>)
 8000a66:	f001 fb31 	bl	80020cc <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == 1){
 8000a6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6e:	480e      	ldr	r0, [pc, #56]	@ (8000aa8 <TimePicker+0xd0>)
 8000a70:	f001 fb14 	bl	800209c <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d110      	bne.n	8000a9c <TimePicker+0xc4>
				PickerMinutes2 =+1;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <TimePicker+0xe4>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
				SevenSDisplay1(PickerMinutes1);
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <TimePicker+0xe0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fded 	bl	8000664 <SevenSDisplay1>
			}
			break;
 8000a8a:	e007      	b.n	8000a9c <TimePicker+0xc4>
		default:
			break;
 8000a8c:	bf00      	nop
 8000a8e:	e006      	b.n	8000a9e <TimePicker+0xc6>
			break;
 8000a90:	bf00      	nop
 8000a92:	e004      	b.n	8000a9e <TimePicker+0xc6>
			break;
 8000a94:	bf00      	nop
 8000a96:	e002      	b.n	8000a9e <TimePicker+0xc6>
			break;
 8000a98:	bf00      	nop
 8000a9a:	e000      	b.n	8000a9e <TimePicker+0xc6>
			break;
 8000a9c:	bf00      	nop

	}
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	200001e0 	.word	0x200001e0
 8000ab0:	200001e4 	.word	0x200001e4
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	200001e8 	.word	0x200001e8
 8000abc:	200001ec 	.word	0x200001ec

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f000 fda7 	bl	8001618 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f8d9 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f000 fa63 	bl	8000f98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ad2:	f000 f941 	bl	8000d58 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ad6:	f000 f96d 	bl	8000db4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ada:	f000 fa27 	bl	8000f2c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ade:	f008 ff3f 	bl	8009960 <MX_USB_HOST_Init>
  MX_RTC_Init();
 8000ae2:	f000 f997 	bl	8000e14 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  RTC_Time.Hours = 21;
 8000ae6:	4b58      	ldr	r3, [pc, #352]	@ (8000c48 <main+0x188>)
 8000ae8:	2215      	movs	r2, #21
 8000aea:	701a      	strb	r2, [r3, #0]
  RTC_Time.Minutes = 15;
 8000aec:	4b56      	ldr	r3, [pc, #344]	@ (8000c48 <main+0x188>)
 8000aee:	220f      	movs	r2, #15
 8000af0:	705a      	strb	r2, [r3, #1]
  RTC_Time.Seconds = 0;
 8000af2:	4b55      	ldr	r3, [pc, #340]	@ (8000c48 <main+0x188>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8000af8:	2200      	movs	r2, #0
 8000afa:	4953      	ldr	r1, [pc, #332]	@ (8000c48 <main+0x188>)
 8000afc:	4853      	ldr	r0, [pc, #332]	@ (8000c4c <main+0x18c>)
 8000afe:	f005 f892 	bl	8005c26 <HAL_RTC_SetTime>

  RTC_Date.Year = 25;
 8000b02:	4b53      	ldr	r3, [pc, #332]	@ (8000c50 <main+0x190>)
 8000b04:	2219      	movs	r2, #25
 8000b06:	70da      	strb	r2, [r3, #3]
  RTC_Date.Month = RTC_MONTH_FEBRUARY;
 8000b08:	4b51      	ldr	r3, [pc, #324]	@ (8000c50 <main+0x190>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	705a      	strb	r2, [r3, #1]
  RTC_Date.Date = 1;
 8000b0e:	4b50      	ldr	r3, [pc, #320]	@ (8000c50 <main+0x190>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	709a      	strb	r2, [r3, #2]
  RTC_Date.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000b14:	4b4e      	ldr	r3, [pc, #312]	@ (8000c50 <main+0x190>)
 8000b16:	2207      	movs	r2, #7
 8000b18:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	494c      	ldr	r1, [pc, #304]	@ (8000c50 <main+0x190>)
 8000b1e:	484b      	ldr	r0, [pc, #300]	@ (8000c4c <main+0x18c>)
 8000b20:	f005 f979 	bl	8005e16 <HAL_RTC_SetDate>

  RTC_AlarmTime.Hours = 21;
 8000b24:	4b4b      	ldr	r3, [pc, #300]	@ (8000c54 <main+0x194>)
 8000b26:	2215      	movs	r2, #21
 8000b28:	701a      	strb	r2, [r3, #0]
  RTC_AlarmTime.Minutes = 16;
 8000b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c54 <main+0x194>)
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	705a      	strb	r2, [r3, #1]
  RTC_AlarmTime.Seconds = 0;
 8000b30:	4b48      	ldr	r3, [pc, #288]	@ (8000c54 <main+0x194>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	709a      	strb	r2, [r3, #2]

  SevenSDisplay1_null();
 8000b36:	f7ff ff19 	bl	800096c <SevenSDisplay1_null>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b3a:	f008 ff37 	bl	80099ac <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4941      	ldr	r1, [pc, #260]	@ (8000c48 <main+0x188>)
 8000b42:	4842      	ldr	r0, [pc, #264]	@ (8000c4c <main+0x18c>)
 8000b44:	f005 f909 	bl	8005d5a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4941      	ldr	r1, [pc, #260]	@ (8000c50 <main+0x190>)
 8000b4c:	483f      	ldr	r0, [pc, #252]	@ (8000c4c <main+0x18c>)
 8000b4e:	f005 f9e6 	bl	8005f1e <HAL_RTC_GetDate>


    if(HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == GPIO_PIN_SET){
 8000b52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b56:	4840      	ldr	r0, [pc, #256]	@ (8000c58 <main+0x198>)
 8000b58:	f001 faa0 	bl	800209c <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d138      	bne.n	8000bd4 <main+0x114>
    	button1_flag +=1;
 8000b62:	4b3e      	ldr	r3, [pc, #248]	@ (8000c5c <main+0x19c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a3c      	ldr	r2, [pc, #240]	@ (8000c5c <main+0x19c>)
 8000b6a:	6013      	str	r3, [r2, #0]
    	TimePicker(button1_flag);
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c5c <main+0x19c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff31 	bl	80009d8 <TimePicker>
        HAL_Delay(500);
 8000b76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b7a:	f000 fdbf 	bl	80016fc <HAL_Delay>
    	if (button1_flag >= 5){
 8000b7e:	4b37      	ldr	r3, [pc, #220]	@ (8000c5c <main+0x19c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	dd26      	ble.n	8000bd4 <main+0x114>
    		int setMinutes = (PickerMinutes1*10) + PickerMinutes2;
 8000b86:	4b36      	ldr	r3, [pc, #216]	@ (8000c60 <main+0x1a0>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b33      	ldr	r3, [pc, #204]	@ (8000c64 <main+0x1a4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]
    		int setHours = (PickerHours1*10) + PickerHours2;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <main+0x1a8>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <main+0x1ac>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	603b      	str	r3, [r7, #0]
    		Flash_WR(flash_hours, setHours);
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <main+0x1b0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc7c 	bl	80004b8 <Flash_WR>
    		Flash_WR(flash_minutes, setMinutes);
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <main+0x1b4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc75 	bl	80004b8 <Flash_WR>
    		button1_flag = 0;
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <main+0x19c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
    	}
    }
    if(button1_flag == 0){
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <main+0x19c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1ae      	bne.n	8000b3a <main+0x7a>
        if(!AlarmTriggered && RTC_AlarmTime.Hours==RTC_Time.Hours && RTC_AlarmTime.Minutes == RTC_Time.Minutes){
 8000bdc:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <main+0x1b8>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f083 0301 	eor.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00f      	beq.n	8000c0a <main+0x14a>
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <main+0x194>)
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <main+0x188>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d109      	bne.n	8000c0a <main+0x14a>
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <main+0x194>)
 8000bf8:	785a      	ldrb	r2, [r3, #1]
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <main+0x188>)
 8000bfc:	785b      	ldrb	r3, [r3, #1]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d103      	bne.n	8000c0a <main+0x14a>
        	AlarmState = true;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <main+0x1bc>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e002      	b.n	8000c10 <main+0x150>
        }
        else{
        	AlarmState = false;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <main+0x1bc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
        }
        if(RTC_AlarmTime.Hours==RTC_Time.Hours && (RTC_AlarmTime.Minutes + 1)  == RTC_Time.Minutes ){
 8000c10:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <main+0x194>)
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <main+0x188>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d109      	bne.n	8000c30 <main+0x170>
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <main+0x194>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <main+0x188>)
 8000c24:	7852      	ldrb	r2, [r2, #1]
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d102      	bne.n	8000c30 <main+0x170>
        	AlarmTriggered = false;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <main+0x1b8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
        }
        process_alarm(AlarmState, RTC_AlarmTime.Hours);
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <main+0x1bc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <main+0x194>)
 8000c36:	7812      	ldrb	r2, [r2, #0]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fc58 	bl	80004f0 <process_alarm>
        HAL_Delay(100);
 8000c40:	2064      	movs	r0, #100	@ 0x64
 8000c42:	f000 fd5b 	bl	80016fc <HAL_Delay>
    MX_USB_HOST_Process();
 8000c46:	e778      	b.n	8000b3a <main+0x7a>
 8000c48:	200001ac 	.word	0x200001ac
 8000c4c:	20000134 	.word	0x20000134
 8000c50:	200001d4 	.word	0x200001d4
 8000c54:	200001c0 	.word	0x200001c0
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	200001dc 	.word	0x200001dc
 8000c60:	200001e8 	.word	0x200001e8
 8000c64:	200001ec 	.word	0x200001ec
 8000c68:	200001e0 	.word	0x200001e0
 8000c6c:	200001e4 	.word	0x200001e4
 8000c70:	200001f0 	.word	0x200001f0
 8000c74:	200001f4 	.word	0x200001f4
 8000c78:	200001d9 	.word	0x200001d9
 8000c7c:	200001d8 	.word	0x200001d8

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	@ 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2230      	movs	r2, #48	@ 0x30
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f009 fa2e 	bl	800a0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <SystemClock_Config+0xd0>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a28      	ldr	r2, [pc, #160]	@ (8000d50 <SystemClock_Config+0xd0>)
 8000cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb4:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <SystemClock_Config+0xd0>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <SystemClock_Config+0xd4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a22      	ldr	r2, [pc, #136]	@ (8000d54 <SystemClock_Config+0xd4>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <SystemClock_Config+0xd4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000cdc:	2309      	movs	r3, #9
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cea:	2302      	movs	r3, #2
 8000cec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d02:	2307      	movs	r3, #7
 8000d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 f942 	bl	8004f94 <HAL_RCC_OscConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d16:	f000 fa53 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d26:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2105      	movs	r1, #5
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fba3 	bl	8005484 <HAL_RCC_ClockConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d44:	f000 fa3c 	bl	80011c0 <Error_Handler>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3750      	adds	r7, #80	@ 0x50
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40007000 	.word	0x40007000

08000d58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d5e:	4a13      	ldr	r2, [pc, #76]	@ (8000dac <MX_I2C1_Init+0x54>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d64:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <MX_I2C1_Init+0x58>)
 8000d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <MX_I2C1_Init+0x50>)
 8000d96:	f003 fb19 	bl	80043cc <HAL_I2C_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000da0:	f000 fa0e 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000098 	.word	0x20000098
 8000dac:	40005400 	.word	0x40005400
 8000db0:	000186a0 	.word	0x000186a0

08000db4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000dba:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <MX_I2S3_Init+0x58>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e10 <MX_I2S3_Init+0x5c>)
 8000dde:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_I2S3_Init+0x54>)
 8000df4:	f003 fc2e 	bl	8004654 <HAL_I2S_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000dfe:	f000 f9df 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000ec 	.word	0x200000ec
 8000e0c:	40003c00 	.word	0x40003c00
 8000e10:	00017700 	.word	0x00017700

08000e14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b090      	sub	sp, #64	@ 0x40
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2228      	movs	r2, #40	@ 0x28
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f009 f95b 	bl	800a0f0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f28 <MX_RTC_Init+0x114>)
 8000e3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e40:	4b38      	ldr	r3, [pc, #224]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e46:	4b37      	ldr	r3, [pc, #220]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e48:	227f      	movs	r2, #127	@ 0x7f
 8000e4a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e4c:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e4e:	22ff      	movs	r2, #255	@ 0xff
 8000e50:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e52:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e58:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e5e:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e64:	482f      	ldr	r0, [pc, #188]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e66:	f004 fe5b 	bl	8005b20 <HAL_RTC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000e70:	f000 f9a6 	bl	80011c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000e74:	2311      	movs	r3, #17
 8000e76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 5;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4823      	ldr	r0, [pc, #140]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000e98:	f004 fec5 	bl	8005c26 <HAL_RTC_SetTime>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000ea2:	f000 f98d 	bl	80011c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000eac:	2302      	movs	r3, #2
 8000eae:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4817      	ldr	r0, [pc, #92]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000ec8:	f004 ffa5 	bl	8005e16 <HAL_RTC_SetDate>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000ed2:	f000 f975 	bl	80011c0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_RTC_Init+0x110>)
 8000f0e:	f005 f855 	bl	8005fbc <HAL_RTC_SetAlarm_IT>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000f18:	f000 f952 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3740      	adds	r7, #64	@ 0x40
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000134 	.word	0x20000134
 8000f28:	40002800 	.word	0x40002800

08000f2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <MX_SPI1_Init+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f78:	220a      	movs	r2, #10
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <MX_SPI1_Init+0x64>)
 8000f7e:	f005 fa79 	bl	8006474 <HAL_SPI_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f88:	f000 f91a 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000154 	.word	0x20000154
 8000f94:	40013000 	.word	0x40013000

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	@ 0x30
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b76      	ldr	r3, [pc, #472]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a75      	ldr	r2, [pc, #468]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b73      	ldr	r3, [pc, #460]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b6f      	ldr	r3, [pc, #444]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a6e      	ldr	r2, [pc, #440]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b68      	ldr	r3, [pc, #416]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a67      	ldr	r2, [pc, #412]	@ (80011a8 <MX_GPIO_Init+0x210>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b65      	ldr	r3, [pc, #404]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b61      	ldr	r3, [pc, #388]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a60      	ldr	r2, [pc, #384]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b5e      	ldr	r3, [pc, #376]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b5a      	ldr	r3, [pc, #360]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a59      	ldr	r2, [pc, #356]	@ (80011a8 <MX_GPIO_Init+0x210>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b57      	ldr	r3, [pc, #348]	@ (80011a8 <MX_GPIO_Init+0x210>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|g1_Pin|f1_Pin|a1_Pin
 8001056:	2200      	movs	r2, #0
 8001058:	f647 7188 	movw	r1, #32648	@ 0x7f88
 800105c:	4853      	ldr	r0, [pc, #332]	@ (80011ac <MX_GPIO_Init+0x214>)
 800105e:	f001 f835 	bl	80020cc <HAL_GPIO_WritePin>
                          |b1_Pin|e1_Pin|d1_Pin|dp1_Pin
                          |c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2101      	movs	r1, #1
 8001066:	4852      	ldr	r0, [pc, #328]	@ (80011b0 <MX_GPIO_Init+0x218>)
 8001068:	f001 f830 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, buzzer_Pin|led4_Pin|led3_Pin|led2_Pin
 800106c:	2200      	movs	r2, #0
 800106e:	f64f 0110 	movw	r1, #63504	@ 0xf810
 8001072:	4850      	ldr	r0, [pc, #320]	@ (80011b4 <MX_GPIO_Init+0x21c>)
 8001074:	f001 f82a 	bl	80020cc <HAL_GPIO_WritePin>
                          |led1_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin g1_Pin f1_Pin a1_Pin
                           b1_Pin e1_Pin d1_Pin dp1_Pin
                           c1_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|g1_Pin|f1_Pin|a1_Pin
 8001078:	f647 7388 	movw	r3, #32648	@ 0x7f88
 800107c:	61fb      	str	r3, [r7, #28]
                          |b1_Pin|e1_Pin|d1_Pin|dp1_Pin
                          |c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4846      	ldr	r0, [pc, #280]	@ (80011ac <MX_GPIO_Init+0x214>)
 8001092:	f000 fe67 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001096:	2301      	movs	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4840      	ldr	r0, [pc, #256]	@ (80011b0 <MX_GPIO_Init+0x218>)
 80010ae:	f000 fe59 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010b2:	2308      	movs	r3, #8
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c2:	2305      	movs	r3, #5
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4838      	ldr	r0, [pc, #224]	@ (80011b0 <MX_GPIO_Init+0x218>)
 80010ce:	f000 fe49 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	4834      	ldr	r0, [pc, #208]	@ (80011b8 <MX_GPIO_Init+0x220>)
 80010e8:	f000 fe3c 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010ec:	2304      	movs	r3, #4
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	482f      	ldr	r0, [pc, #188]	@ (80011bc <MX_GPIO_Init+0x224>)
 8001100:	f000 fe30 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001116:	2305      	movs	r3, #5
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4826      	ldr	r0, [pc, #152]	@ (80011bc <MX_GPIO_Init+0x224>)
 8001122:	f000 fe1f 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : button2_Pin button1_Pin */
  GPIO_InitStruct.Pin = button2_Pin|button1_Pin;
 8001126:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001130:	2302      	movs	r3, #2
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	481e      	ldr	r0, [pc, #120]	@ (80011b4 <MX_GPIO_Init+0x21c>)
 800113c:	f000 fe12 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzer_Pin led4_Pin led3_Pin led2_Pin
                           led1_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin|led4_Pin|led3_Pin|led2_Pin
 8001140:	f64f 0310 	movw	r3, #63504	@ 0xf810
 8001144:	61fb      	str	r3, [r7, #28]
                          |led1_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4816      	ldr	r0, [pc, #88]	@ (80011b4 <MX_GPIO_Init+0x21c>)
 800115a:	f000 fe03 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800115e:	2320      	movs	r3, #32
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <MX_GPIO_Init+0x21c>)
 8001172:	f000 fdf7 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001176:	2302      	movs	r3, #2
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800117a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	4808      	ldr	r0, [pc, #32]	@ (80011ac <MX_GPIO_Init+0x214>)
 800118c:	f000 fdea 	bl	8001d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2006      	movs	r0, #6
 8001196:	f000 fbb0 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800119a:	2006      	movs	r0, #6
 800119c:	f000 fbc9 	bl	8001932 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a0:	bf00      	nop
 80011a2:	3730      	adds	r7, #48	@ 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <Error_Handler+0x8>

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120a:	2007      	movs	r0, #7
 800120c:	f000 fb6a 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <HAL_I2C_MspInit+0x84>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12c      	bne.n	8001298 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800125a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126c:	2304      	movs	r3, #4
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <HAL_I2C_MspInit+0x8c>)
 8001278:	f000 fd74 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 8001286:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800128a:	6413      	str	r3, [r2, #64]	@ 0x40
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_I2C_MspInit+0x88>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	@ 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40005400 	.word	0x40005400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400

080012ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a31      	ldr	r2, [pc, #196]	@ (800139c <HAL_I2S_MspInit+0xf0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d15a      	bne.n	8001392 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012e0:	23c0      	movs	r3, #192	@ 0xc0
 80012e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fad5 	bl	800589c <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80012f8:	f7ff ff62 	bl	80011c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	4a26      	ldr	r2, [pc, #152]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 8001306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800130a:	6413      	str	r3, [r2, #64]	@ 0x40
 800130c:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4a1f      	ldr	r2, [pc, #124]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6313      	str	r3, [r2, #48]	@ 0x30
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6313      	str	r3, [r2, #48]	@ 0x30
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_I2S_MspInit+0xf4>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001350:	2310      	movs	r3, #16
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001360:	2306      	movs	r3, #6
 8001362:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	480e      	ldr	r0, [pc, #56]	@ (80013a4 <HAL_I2S_MspInit+0xf8>)
 800136c:	f000 fcfa 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001370:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001382:	2306      	movs	r3, #6
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <HAL_I2S_MspInit+0xfc>)
 800138e:	f000 fce9 	bl	8001d64 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001392:	bf00      	nop
 8001394:	3738      	adds	r7, #56	@ 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40003c00 	.word	0x40003c00
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020800 	.word	0x40020800

080013ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <HAL_RTC_MspInit+0x5c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d119      	bne.n	8001400 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013cc:	2302      	movs	r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 fa5e 	bl	800589c <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80013e6:	f7ff feeb 	bl	80011c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_RTC_MspInit+0x60>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2029      	movs	r0, #41	@ 0x29
 80013f6:	f000 fa80 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013fa:	2029      	movs	r0, #41	@ 0x29
 80013fc:	f000 fa99 	bl	8001932 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40002800 	.word	0x40002800
 800140c:	42470e3c 	.word	0x42470e3c

08001410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <HAL_SPI_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_SPI_MspInit+0x88>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_SPI_MspInit+0x88>)
 800143c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001440:	6453      	str	r3, [r2, #68]	@ 0x44
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_SPI_MspInit+0x88>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_SPI_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <HAL_SPI_MspInit+0x88>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_SPI_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800146a:	23e0      	movs	r3, #224	@ 0xe0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147a:	2305      	movs	r3, #5
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <HAL_SPI_MspInit+0x8c>)
 8001486:	f000 fc6d 	bl	8001d64 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	@ 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40013000 	.word	0x40013000
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <NMI_Handler+0x4>

080014a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <MemManage_Handler+0x4>

080014b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f8e1 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}

080014fe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001502:	2001      	movs	r0, #1
 8001504:	f000 fe16 	bl	8002134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <RTC_Alarm_IRQHandler+0x10>)
 8001512:	f004 fe97 	bl	8006244 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000134 	.word	0x20000134

08001520 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <OTG_FS_IRQHandler+0x10>)
 8001526:	f001 f8fd 	bl	8002724 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200005fc 	.word	0x200005fc

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f008 fddc 	bl	800a120 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]

  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400
 8001598:	200001f8 	.word	0x200001f8
 800159c:	20000b28 	.word	0x20000b28

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015c8:	f7ff ffea 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	@ (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f008 fd9b 	bl	800a12c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff fa63 	bl	8000ac0 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001608:	0800a250 	.word	0x0800a250
  ldr r2, =_sbss
 800160c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001610:	20000b24 	.word	0x20000b24

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f94f 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fdbe 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f967 	bl	800194e <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f92f 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	200001fc 	.word	0x200001fc

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200001fc 	.word	0x200001fc

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	@ (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800197a:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <HAL_FLASH_Program+0xa0>)
 800197c:	7e1b      	ldrb	r3, [r3, #24]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_FLASH_Program+0x1e>
 8001982:	2302      	movs	r3, #2
 8001984:	e03b      	b.n	80019fe <HAL_FLASH_Program+0x96>
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_FLASH_Program+0xa0>)
 8001988:	2201      	movs	r2, #1
 800198a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800198c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001990:	f000 f870 	bl	8001a74 <FLASH_WaitForLastOperation>
 8001994:	4603      	mov	r3, r0
 8001996:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d12b      	bne.n	80019f6 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019a4:	783b      	ldrb	r3, [r7, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f000 f91b 	bl	8001be4 <FLASH_Program_Byte>
 80019ae:	e016      	b.n	80019de <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019b6:	883b      	ldrh	r3, [r7, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	68b8      	ldr	r0, [r7, #8]
 80019bc:	f000 f8ee 	bl	8001b9c <FLASH_Program_HalfWord>
 80019c0:	e00d      	b.n	80019de <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d105      	bne.n	80019d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f000 f8c3 	bl	8001b58 <FLASH_Program_Word>
 80019d2:	e004      	b.n	80019de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80019d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f000 f88b 	bl	8001af4 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019e2:	f000 f847 	bl	8001a74 <FLASH_WaitForLastOperation>
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <HAL_FLASH_Program+0xa4>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4a07      	ldr	r2, [pc, #28]	@ (8001a0c <HAL_FLASH_Program+0xa4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019f6:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <HAL_FLASH_Program+0xa0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	761a      	strb	r2, [r3, #24]

  return status;
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000200 	.word	0x20000200
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_FLASH_Unlock+0x38>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da0b      	bge.n	8001a3a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_FLASH_Unlock+0x38>)
 8001a24:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <HAL_FLASH_Unlock+0x3c>)
 8001a26:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_FLASH_Unlock+0x38>)
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_FLASH_Unlock+0x40>)
 8001a2c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_FLASH_Unlock+0x38>)
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da01      	bge.n	8001a3a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40023c00 	.word	0x40023c00
 8001a4c:	45670123 	.word	0x45670123
 8001a50:	cdef89ab 	.word	0xcdef89ab

08001a54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_FLASH_Lock+0x1c>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_FLASH_Lock+0x1c>)
 8001a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a62:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <FLASH_WaitForLastOperation+0x78>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a86:	f7ff fe2d 	bl	80016e4 <HAL_GetTick>
 8001a8a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001a8c:	e010      	b.n	8001ab0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d00c      	beq.n	8001ab0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <FLASH_WaitForLastOperation+0x38>
 8001a9c:	f7ff fe22 	bl	80016e4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d201      	bcs.n	8001ab0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e019      	b.n	8001ae4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <FLASH_WaitForLastOperation+0x7c>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e8      	bne.n	8001a8e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <FLASH_WaitForLastOperation+0x7c>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <FLASH_WaitForLastOperation+0x7c>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <FLASH_WaitForLastOperation+0x7c>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ada:	f000 f8a5 	bl	8001c28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0

}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000200 	.word	0x20000200
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <FLASH_Program_DoubleWord+0x60>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	4a13      	ldr	r2, [pc, #76]	@ (8001b54 <FLASH_Program_DoubleWord+0x60>)
 8001b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <FLASH_Program_DoubleWord+0x60>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <FLASH_Program_DoubleWord+0x60>)
 8001b12:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b18:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <FLASH_Program_DoubleWord+0x60>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <FLASH_Program_DoubleWord+0x60>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001b2a:	f3bf 8f6f 	isb	sy
}
 8001b2e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	2300      	movs	r3, #0
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	3104      	adds	r1, #4
 8001b44:	4613      	mov	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b62:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <FLASH_Program_Word+0x40>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	4a0c      	ldr	r2, [pc, #48]	@ (8001b98 <FLASH_Program_Word+0x40>)
 8001b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <FLASH_Program_Word+0x40>)
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <FLASH_Program_Word+0x40>)
 8001b74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <FLASH_Program_Word+0x40>)
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	4a06      	ldr	r2, [pc, #24]	@ (8001b98 <FLASH_Program_Word+0x40>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	601a      	str	r2, [r3, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <FLASH_Program_HalfWord+0x44>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <FLASH_Program_HalfWord+0x44>)
 8001bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <FLASH_Program_HalfWord+0x44>)
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <FLASH_Program_HalfWord+0x44>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <FLASH_Program_HalfWord+0x44>)
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	4a06      	ldr	r2, [pc, #24]	@ (8001be0 <FLASH_Program_HalfWord+0x44>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	801a      	strh	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <FLASH_Program_Byte+0x40>)
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <FLASH_Program_Byte+0x40>)
 8001bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <FLASH_Program_Byte+0x40>)
 8001bfe:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <FLASH_Program_Byte+0x40>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c04:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <FLASH_Program_Byte+0x40>)
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	4a06      	ldr	r2, [pc, #24]	@ (8001c24 <FLASH_Program_Byte+0x40>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	701a      	strb	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	4a23      	ldr	r2, [pc, #140]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001c42:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c44:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001c46:	2210      	movs	r2, #16
 8001c48:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001c60:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001c64:	2220      	movs	r2, #32
 8001c66:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001c7e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001c82:	2240      	movs	r2, #64	@ 0x40
 8001c84:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d008      	beq.n	8001ca4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001c9c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <FLASH_SetErrorCode+0xa8>)
 8001cba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <FLASH_SetErrorCode+0xa4>)
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	60da      	str	r2, [r3, #12]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40023c00 	.word	0x40023c00
 8001cd0:	20000200 	.word	0x20000200

08001cd4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e010      	b.n	8001d12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d103      	bne.n	8001cfe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e009      	b.n	8001d12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d103      	bne.n	8001d0c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001d04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e002      	b.n	8001d12 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001d0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	490f      	ldr	r1, [pc, #60]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d30:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001d34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <FLASH_Erase_Sector+0x8c>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d52:	6113      	str	r3, [r2, #16]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e16b      	b.n	8002058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 815a 	bne.w	8002052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d130      	bne.n	8001e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d017      	beq.n	8001e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d123      	bne.n	8001ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80b4 	beq.w	8002052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b60      	ldr	r3, [pc, #384]	@ (8002070 <HAL_GPIO_Init+0x30c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a5f      	ldr	r2, [pc, #380]	@ (8002070 <HAL_GPIO_Init+0x30c>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b5d      	ldr	r3, [pc, #372]	@ (8002070 <HAL_GPIO_Init+0x30c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f06:	4a5b      	ldr	r2, [pc, #364]	@ (8002074 <HAL_GPIO_Init+0x310>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	@ (8002078 <HAL_GPIO_Init+0x314>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02b      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a51      	ldr	r2, [pc, #324]	@ (800207c <HAL_GPIO_Init+0x318>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d025      	beq.n	8001f86 <HAL_GPIO_Init+0x222>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a50      	ldr	r2, [pc, #320]	@ (8002080 <HAL_GPIO_Init+0x31c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x21e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4f      	ldr	r2, [pc, #316]	@ (8002084 <HAL_GPIO_Init+0x320>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x21a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002088 <HAL_GPIO_Init+0x324>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x216>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4d      	ldr	r2, [pc, #308]	@ (800208c <HAL_GPIO_Init+0x328>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x212>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002090 <HAL_GPIO_Init+0x32c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x20e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4b      	ldr	r2, [pc, #300]	@ (8002094 <HAL_GPIO_Init+0x330>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x20a>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00e      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f6e:	2308      	movs	r3, #8
 8001f70:	e00c      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e00a      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e008      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e004      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x228>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	4093      	lsls	r3, r2
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9c:	4935      	ldr	r1, [pc, #212]	@ (8002074 <HAL_GPIO_Init+0x310>)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001faa:	4b3b      	ldr	r3, [pc, #236]	@ (8002098 <HAL_GPIO_Init+0x334>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fce:	4a32      	ldr	r2, [pc, #200]	@ (8002098 <HAL_GPIO_Init+0x334>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd4:	4b30      	ldr	r3, [pc, #192]	@ (8002098 <HAL_GPIO_Init+0x334>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff8:	4a27      	ldr	r2, [pc, #156]	@ (8002098 <HAL_GPIO_Init+0x334>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffe:	4b26      	ldr	r3, [pc, #152]	@ (8002098 <HAL_GPIO_Init+0x334>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002022:	4a1d      	ldr	r2, [pc, #116]	@ (8002098 <HAL_GPIO_Init+0x334>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_GPIO_Init+0x334>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204c:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <HAL_GPIO_Init+0x334>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	f67f ae90 	bls.w	8001d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40013800 	.word	0x40013800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021000 	.word	0x40021000
 800208c:	40021400 	.word	0x40021400
 8002090:	40021800 	.word	0x40021800
 8002094:	40021c00 	.word	0x40021c00
 8002098:	40013c00 	.word	0x40013c00

0800209c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e8:	e003      	b.n	80020f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	619a      	str	r2, [r3, #24]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002110:	887a      	ldrh	r2, [r7, #2]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4013      	ands	r3, r2
 8002116:	041a      	lsls	r2, r3, #16
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43d9      	mvns	r1, r3
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	400b      	ands	r3, r1
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800213e:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fa72 	bl	800063c <HAL_GPIO_EXTI_Callback>
  }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e059      	b.n	800222a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d106      	bne.n	8002196 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f007 fc43 	bl	8009a1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2203      	movs	r2, #3
 800219a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021a4:	d102      	bne.n	80021ac <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 fa5d 	bl	8006670 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7c1a      	ldrb	r2, [r3, #16]
 80021be:	f88d 2000 	strb.w	r2, [sp]
 80021c2:	3304      	adds	r3, #4
 80021c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c6:	f004 f9de 	bl	8006586 <USB_CoreInit>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e026      	b.n	800222a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fa55 	bl	8006692 <USB_SetCurrentMode>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e017      	b.n	800222a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7c1a      	ldrb	r2, [r3, #16]
 8002202:	f88d 2000 	strb.w	r2, [sp]
 8002206:	3304      	adds	r3, #4
 8002208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800220a:	f004 fbf7 	bl	80069fc <USB_HostInit>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e004      	b.n	800222a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002232:	b590      	push	{r4, r7, lr}
 8002234:	b08b      	sub	sp, #44	@ 0x2c
 8002236:	af04      	add	r7, sp, #16
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	4608      	mov	r0, r1
 800223c:	4611      	mov	r1, r2
 800223e:	461a      	mov	r2, r3
 8002240:	4603      	mov	r3, r0
 8002242:	70fb      	strb	r3, [r7, #3]
 8002244:	460b      	mov	r3, r1
 8002246:	70bb      	strb	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800224c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800224e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_HCD_HC_Init+0x2c>
 800225a:	2302      	movs	r3, #2
 800225c:	e09d      	b.n	800239a <HAL_HCD_HC_Init+0x168>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	3319      	adds	r3, #25
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3314      	adds	r3, #20
 800228a:	787a      	ldrb	r2, [r7, #1]
 800228c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	3315      	adds	r3, #21
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3326      	adds	r3, #38	@ 0x26
 80022b2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80022b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	78bb      	ldrb	r3, [r7, #2]
 80022bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022c0:	b2d8      	uxtb	r0, r3
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3316      	adds	r3, #22
 80022d0:	4602      	mov	r2, r0
 80022d2:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fbc7 	bl	8002a6c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80022de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da0a      	bge.n	80022fc <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3317      	adds	r3, #23
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e009      	b.n	8002310 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3317      	adds	r3, #23
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f004 fcd5 	bl	8006cc4 <USB_GetHostSpeed>
 800231a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800231c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10b      	bne.n	800233c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002324:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_HCD_HC_Init+0x10a>
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d104      	bne.n	800233c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2bbc      	cmp	r3, #188	@ 0xbc
 8002336:	d901      	bls.n	800233c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002338:	23bc      	movs	r3, #188	@ 0xbc
 800233a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3318      	adds	r3, #24
 800234c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002350:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	b298      	uxth	r0, r3
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	3328      	adds	r3, #40	@ 0x28
 8002366:	4602      	mov	r2, r0
 8002368:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	b29b      	uxth	r3, r3
 8002372:	787c      	ldrb	r4, [r7, #1]
 8002374:	78ba      	ldrb	r2, [r7, #2]
 8002376:	78f9      	ldrb	r1, [r7, #3]
 8002378:	9302      	str	r3, [sp, #8]
 800237a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4623      	mov	r3, r4
 8002388:	f004 fcc4 	bl	8006d14 <USB_HC_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}

080023a2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_HCD_HC_Halt+0x1e>
 80023bc:	2302      	movs	r3, #2
 80023be:	e00f      	b.n	80023e0 <HAL_HCD_HC_Halt+0x3e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f005 f856 	bl	8007482 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80023de:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	70fb      	strb	r3, [r7, #3]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70bb      	strb	r3, [r7, #2]
 80023fe:	4613      	mov	r3, r2
 8002400:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	3317      	adds	r3, #23
 8002412:	78ba      	ldrb	r2, [r7, #2]
 8002414:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	3326      	adds	r3, #38	@ 0x26
 8002426:	787a      	ldrb	r2, [r7, #1]
 8002428:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800242a:	7c3b      	ldrb	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d114      	bne.n	800245a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	332a      	adds	r3, #42	@ 0x2a
 8002440:	2203      	movs	r2, #3
 8002442:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3319      	adds	r3, #25
 8002454:	7f3a      	ldrb	r2, [r7, #28]
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e009      	b.n	800246e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	332a      	adds	r3, #42	@ 0x2a
 800246a:	2202      	movs	r2, #2
 800246c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800246e:	787b      	ldrb	r3, [r7, #1]
 8002470:	2b03      	cmp	r3, #3
 8002472:	f200 8102 	bhi.w	800267a <HAL_HCD_HC_SubmitRequest+0x292>
 8002476:	a201      	add	r2, pc, #4	@ (adr r2, 800247c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	0800248d 	.word	0x0800248d
 8002480:	08002665 	.word	0x08002665
 8002484:	08002551 	.word	0x08002551
 8002488:	080025db 	.word	0x080025db
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800248c:	7c3b      	ldrb	r3, [r7, #16]
 800248e:	2b01      	cmp	r3, #1
 8002490:	f040 80f5 	bne.w	800267e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002494:	78bb      	ldrb	r3, [r7, #2]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d12d      	bne.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800249a:	8b3b      	ldrh	r3, [r7, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	333d      	adds	r3, #61	@ 0x3d
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	333d      	adds	r3, #61	@ 0x3d
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	332a      	adds	r3, #42	@ 0x2a
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80024de:	e0ce      	b.n	800267e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	332a      	adds	r3, #42	@ 0x2a
 80024f0:	2202      	movs	r2, #2
 80024f2:	701a      	strb	r2, [r3, #0]
      break;
 80024f4:	e0c3      	b.n	800267e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	331a      	adds	r3, #26
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 80b8 	bne.w	800267e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	333c      	adds	r3, #60	@ 0x3c
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	332a      	adds	r3, #42	@ 0x2a
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
      break;
 8002538:	e0a1      	b.n	800267e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	332a      	adds	r3, #42	@ 0x2a
 800254a:	2202      	movs	r2, #2
 800254c:	701a      	strb	r2, [r3, #0]
      break;
 800254e:	e096      	b.n	800267e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002550:	78bb      	ldrb	r3, [r7, #2]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d120      	bne.n	8002598 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	333d      	adds	r3, #61	@ 0x3d
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	332a      	adds	r3, #42	@ 0x2a
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002580:	e07e      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	332a      	adds	r3, #42	@ 0x2a
 8002592:	2202      	movs	r2, #2
 8002594:	701a      	strb	r2, [r3, #0]
      break;
 8002596:	e073      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	333c      	adds	r3, #60	@ 0x3c
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	332a      	adds	r3, #42	@ 0x2a
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
      break;
 80025c2:	e05d      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	332a      	adds	r3, #42	@ 0x2a
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]
      break;
 80025d8:	e052      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025da:	78bb      	ldrb	r3, [r7, #2]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d120      	bne.n	8002622 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	333d      	adds	r3, #61	@ 0x3d
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	332a      	adds	r3, #42	@ 0x2a
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800260a:	e039      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	332a      	adds	r3, #42	@ 0x2a
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]
      break;
 8002620:	e02e      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	333c      	adds	r3, #60	@ 0x3c
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	332a      	adds	r3, #42	@ 0x2a
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
      break;
 800264c:	e018      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	332a      	adds	r3, #42	@ 0x2a
 800265e:	2202      	movs	r2, #2
 8002660:	701a      	strb	r2, [r3, #0]
      break;
 8002662:	e00d      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	332a      	adds	r3, #42	@ 0x2a
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
      break;
 8002678:	e002      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800267e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	332c      	adds	r3, #44	@ 0x2c
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	8b39      	ldrh	r1, [r7, #24]
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4403      	add	r3, r0
 80026a4:	3334      	adds	r3, #52	@ 0x34
 80026a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	334c      	adds	r3, #76	@ 0x4c
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3338      	adds	r3, #56	@ 0x38
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3315      	adds	r3, #21
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	@ 0x4d
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	3310      	adds	r3, #16
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	1d19      	adds	r1, r3, #4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	799b      	ldrb	r3, [r3, #6]
 8002712:	461a      	mov	r2, r3
 8002714:	f004 fc2a 	bl	8006f6c <USB_HC_StartXfer>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop

08002724 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f004 f91f 	bl	800697e <USB_GetMode>
 8002740:	4603      	mov	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	f040 80fb 	bne.w	800293e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f004 f8e2 	bl	8006916 <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80f1 	beq.w	800293c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 f8d9 	bl	8006916 <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800276e:	d104      	bne.n	800277a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002778:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f004 f8c9 	bl	8006916 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800278e:	d104      	bne.n	800279a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002798:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 f8b9 	bl	8006916 <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ae:	d104      	bne.n	80027ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 f8a9 	bl	8006916 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d103      	bne.n	80027d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2202      	movs	r2, #2
 80027d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f004 f89b 	bl	8006916 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027ea:	d120      	bne.n	800282e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80027f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d113      	bne.n	800282e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002806:	2110      	movs	r1, #16
 8002808:	6938      	ldr	r0, [r7, #16]
 800280a:	f003 ff8e 	bl	800672a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800280e:	6938      	ldr	r0, [r7, #16]
 8002810:	f003 ffbd 	bl	800678e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7a5b      	ldrb	r3, [r3, #9]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d105      	bne.n	8002828 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	4618      	mov	r0, r3
 8002824:	f004 f9ae 	bl	8006b84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f007 f975 	bl	8009b18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f004 f86f 	bl	8006916 <USB_ReadInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800283e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002842:	d102      	bne.n	800284a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f001 fd4d 	bl	80042e4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f004 f861 	bl	8006916 <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d106      	bne.n	800286c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f007 f93e 	bl	8009ae0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2208      	movs	r2, #8
 800286a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f004 f850 	bl	8006916 <USB_ReadInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002880:	d139      	bne.n	80028f6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f004 fdea 	bl	8007460 <USB_HC_ReadInterrupt>
 800288c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e025      	b.n	80028e0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d018      	beq.n	80028da <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028be:	d106      	bne.n	80028ce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f905 	bl	8002ad6 <HCD_HC_IN_IRQHandler>
 80028cc:	e005      	b.n	80028da <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 ff67 	bl	80037a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	795b      	ldrb	r3, [r3, #5]
 80028e4:	461a      	mov	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d3d3      	bcc.n	8002894 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 f80b 	bl	8006916 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b10      	cmp	r3, #16
 8002908:	d101      	bne.n	800290e <HAL_HCD_IRQHandler+0x1ea>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_HCD_IRQHandler+0x1ec>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d014      	beq.n	800293e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0210 	bic.w	r2, r2, #16
 8002922:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f001 fbfe 	bl	8004126 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0210 	orr.w	r2, r2, #16
 8002938:	619a      	str	r2, [r3, #24]
 800293a:	e000      	b.n	800293e <HAL_HCD_IRQHandler+0x21a>
      return;
 800293c:	bf00      	nop
    }
  }
}
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_HCD_Start+0x16>
 8002956:	2302      	movs	r3, #2
 8002958:	e013      	b.n	8002982 <HAL_HCD_Start+0x3e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2101      	movs	r1, #1
 8002968:	4618      	mov	r0, r3
 800296a:	f004 f972 	bl	8006c52 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fe6b 	bl	800664e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_HCD_Stop+0x16>
 800299c:	2302      	movs	r3, #2
 800299e:	e00d      	b.n	80029bc <HAL_HCD_Stop+0x32>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f004 fec5 	bl	800773c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 f914 	bl	8006bfe <USB_ResetPort>
 80029d6:	4603      	mov	r3, r0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	334c      	adds	r3, #76	@ 0x4c
 80029fc:	781b      	ldrb	r3, [r3, #0]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3338      	adds	r3, #56	@ 0x38
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 f956 	bl	8006cf2 <USB_GetCurrentFrame>
 8002a46:	4603      	mov	r3, r0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f004 f931 	bl	8006cc4 <USB_GetHostSpeed>
 8002a62:	4603      	mov	r3, r0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	331a      	adds	r3, #26
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	331b      	adds	r3, #27
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3325      	adds	r3, #37	@ 0x25
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3324      	adds	r3, #36	@ 0x24
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 ff21 	bl	800693c <USB_ReadChInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d11a      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b10:	461a      	mov	r2, r3
 8002b12:	2304      	movs	r3, #4
 8002b14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	334d      	adds	r3, #77	@ 0x4d
 8002b26:	2207      	movs	r2, #7
 8002b28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fca5 	bl	8007482 <USB_HC_Halt>
 8002b38:	e09e      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fefa 	bl	800693c <USB_ReadChInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b52:	d11b      	bne.n	8002b8c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b60:	461a      	mov	r2, r3
 8002b62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334d      	adds	r3, #77	@ 0x4d
 8002b78:	2208      	movs	r2, #8
 8002b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fc7c 	bl	8007482 <USB_HC_Halt>
 8002b8a:	e075      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fed1 	bl	800693c <USB_ReadChInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d11a      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	334d      	adds	r3, #77	@ 0x4d
 8002bc6:	2206      	movs	r2, #6
 8002bc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 fc55 	bl	8007482 <USB_HC_Halt>
 8002bd8:	e04e      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 feaa 	bl	800693c <USB_ReadChInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf2:	d11b      	bne.n	8002c2c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334d      	adds	r3, #77	@ 0x4d
 8002c18:	2209      	movs	r2, #9
 8002c1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fc2c 	bl	8007482 <USB_HC_Halt>
 8002c2a:	e025      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fe81 	bl	800693c <USB_ReadChInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c40:	2b80      	cmp	r3, #128	@ 0x80
 8002c42:	d119      	bne.n	8002c78 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2380      	movs	r3, #128	@ 0x80
 8002c54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334d      	adds	r3, #77	@ 0x4d
 8002c66:	2207      	movs	r2, #7
 8002c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f004 fc05 	bl	8007482 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fe5b 	bl	800693c <USB_ReadChInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c90:	d112      	bne.n	8002cb8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 fbf1 	bl	8007482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cac:	461a      	mov	r2, r3
 8002cae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cb2:	6093      	str	r3, [r2, #8]
 8002cb4:	f000 bd75 	b.w	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 fe3b 	bl	800693c <USB_ReadChInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	f040 8128 	bne.w	8002f22 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	331b      	adds	r3, #27
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d119      	bne.n	8002d2e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	331b      	adds	r3, #27
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	0151      	lsls	r1, r2, #5
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	440a      	add	r2, r1
 8002d24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	799b      	ldrb	r3, [r3, #6]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01b      	beq.n	8002d6e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3330      	adds	r3, #48	@ 0x30
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	1ac9      	subs	r1, r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4403      	add	r3, r0
 8002d6a:	3338      	adds	r3, #56	@ 0x38
 8002d6c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	334d      	adds	r3, #77	@ 0x4d
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3344      	adds	r3, #68	@ 0x44
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2301      	movs	r3, #1
 8002da6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3326      	adds	r3, #38	@ 0x26
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3326      	adds	r3, #38	@ 0x26
 8002dce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d110      	bne.n	8002df6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f004 fb50 	bl	8007482 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dee:	461a      	mov	r2, r3
 8002df0:	2310      	movs	r3, #16
 8002df2:	6093      	str	r3, [r2, #8]
 8002df4:	e03d      	b.n	8002e72 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3326      	adds	r3, #38	@ 0x26
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d00a      	beq.n	8002e22 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3326      	adds	r3, #38	@ 0x26
 8002e1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d127      	bne.n	8002e72 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	0151      	lsls	r1, r2, #5
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	440a      	add	r2, r1
 8002e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e40:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	334c      	adds	r3, #76	@ 0x4c
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	334c      	adds	r3, #76	@ 0x4c
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f006 fe61 	bl	8009b34 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	799b      	ldrb	r3, [r3, #6]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d13b      	bne.n	8002ef2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3338      	adds	r3, #56	@ 0x38
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	3328      	adds	r3, #40	@ 0x28
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	440b      	add	r3, r1
 8002ea0:	1e59      	subs	r1, r3, #1
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4403      	add	r3, r0
 8002eb0:	3328      	adds	r3, #40	@ 0x28
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8470 	beq.w	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	333c      	adds	r3, #60	@ 0x3c
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	f083 0301 	eor.w	r3, r3, #1
 8002eda:	b2d8      	uxtb	r0, r3
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	333c      	adds	r3, #60	@ 0x3c
 8002eea:	4602      	mov	r2, r0
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	f000 bc58 	b.w	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	333c      	adds	r3, #60	@ 0x3c
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	f083 0301 	eor.w	r3, r3, #1
 8002f0a:	b2d8      	uxtb	r0, r3
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	333c      	adds	r3, #60	@ 0x3c
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	f000 bc40 	b.w	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fd06 	bl	800693c <USB_ReadChInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d131      	bne.n	8002f9e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f46:	461a      	mov	r2, r3
 8002f48:	2320      	movs	r3, #32
 8002f4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	331a      	adds	r3, #26
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	f040 841f 	bne.w	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	331b      	adds	r3, #27
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	@ 0x4d
 8002f88:	2203      	movs	r2, #3
 8002f8a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f004 fa74 	bl	8007482 <USB_HC_Halt>
 8002f9a:	f000 bc02 	b.w	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fcc8 	bl	800693c <USB_ReadChInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	f040 8305 	bne.w	80035c2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334d      	adds	r3, #77	@ 0x4d
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d114      	bne.n	800300a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	334c      	adds	r3, #76	@ 0x4c
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e2cc      	b.n	80035a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	334d      	adds	r3, #77	@ 0x4d
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b06      	cmp	r3, #6
 800301e:	d114      	bne.n	800304a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334d      	adds	r3, #77	@ 0x4d
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	334c      	adds	r3, #76	@ 0x4c
 8003044:	2205      	movs	r2, #5
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e2ac      	b.n	80035a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	334d      	adds	r3, #77	@ 0x4d
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b07      	cmp	r3, #7
 800305e:	d00b      	beq.n	8003078 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	334d      	adds	r3, #77	@ 0x4d
 8003070:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003072:	2b09      	cmp	r3, #9
 8003074:	f040 80a6 	bne.w	80031c4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	334d      	adds	r3, #77	@ 0x4d
 8003088:	2202      	movs	r2, #2
 800308a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3344      	adds	r3, #68	@ 0x44
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	1c59      	adds	r1, r3, #1
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4403      	add	r3, r0
 80030ac:	3344      	adds	r3, #68	@ 0x44
 80030ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	3344      	adds	r3, #68	@ 0x44
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d943      	bls.n	800314e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	3344      	adds	r3, #68	@ 0x44
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	331a      	adds	r3, #26
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d123      	bne.n	8003138 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	331b      	adds	r3, #27
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	331c      	adds	r3, #28
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	0151      	lsls	r1, r2, #5
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	440a      	add	r2, r1
 800312e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003136:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334c      	adds	r3, #76	@ 0x4c
 8003148:	2204      	movs	r2, #4
 800314a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800314c:	e229      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	334c      	adds	r3, #76	@ 0x4c
 800315e:	2202      	movs	r2, #2
 8003160:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3326      	adds	r3, #38	@ 0x26
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3326      	adds	r3, #38	@ 0x26
 8003188:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800318a:	2b02      	cmp	r3, #2
 800318c:	f040 8209 	bne.w	80035a2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031c2:	e1ee      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	334d      	adds	r3, #77	@ 0x4d
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	f040 80c8 	bne.w	800336c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	334d      	adds	r3, #77	@ 0x4d
 80031ec:	2202      	movs	r2, #2
 80031ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	331b      	adds	r3, #27
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	f040 81ce 	bne.w	80035a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3326      	adds	r3, #38	@ 0x26
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d16b      	bne.n	80032f6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3348      	adds	r3, #72	@ 0x48
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	1c59      	adds	r1, r3, #1
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4403      	add	r3, r0
 800323e:	3348      	adds	r3, #72	@ 0x48
 8003240:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3348      	adds	r3, #72	@ 0x48
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d943      	bls.n	80032e0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3348      	adds	r3, #72	@ 0x48
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	331b      	adds	r3, #27
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3344      	adds	r3, #68	@ 0x44
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d809      	bhi.n	80032aa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	331c      	adds	r3, #28
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	0151      	lsls	r1, r2, #5
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	440a      	add	r2, r1
 80032c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032c8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	334c      	adds	r3, #76	@ 0x4c
 80032da:	2204      	movs	r2, #4
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e014      	b.n	800330a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	334c      	adds	r3, #76	@ 0x4c
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e009      	b.n	800330a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	334c      	adds	r3, #76	@ 0x4c
 8003306:	2202      	movs	r2, #2
 8003308:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3326      	adds	r3, #38	@ 0x26
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3326      	adds	r3, #38	@ 0x26
 8003330:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003332:	2b02      	cmp	r3, #2
 8003334:	f040 8136 	bne.w	80035a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800334e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003356:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003364:	461a      	mov	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e11b      	b.n	80035a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334d      	adds	r3, #77	@ 0x4d
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b03      	cmp	r3, #3
 8003380:	f040 8081 	bne.w	8003486 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334d      	adds	r3, #77	@ 0x4d
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	331b      	adds	r3, #27
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	f040 80fa 	bne.w	80035a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	334c      	adds	r3, #76	@ 0x4c
 80033c0:	2202      	movs	r2, #2
 80033c2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	0151      	lsls	r1, r2, #5
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	440a      	add	r2, r1
 80033da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	0151      	lsls	r1, r2, #5
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	440a      	add	r2, r1
 80033fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003402:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	0151      	lsls	r1, r2, #5
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	440a      	add	r2, r1
 800341a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800341e:	f023 0320 	bic.w	r3, r3, #32
 8003422:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3326      	adds	r3, #38	@ 0x26
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3326      	adds	r3, #38	@ 0x26
 800344a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800344c:	2b02      	cmp	r3, #2
 800344e:	f040 80a9 	bne.w	80035a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003468:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003470:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	e08e      	b.n	80035a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	334d      	adds	r3, #77	@ 0x4d
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d143      	bne.n	8003524 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	334d      	adds	r3, #77	@ 0x4d
 80034ac:	2202      	movs	r2, #2
 80034ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334c      	adds	r3, #76	@ 0x4c
 80034c0:	2202      	movs	r2, #2
 80034c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3326      	adds	r3, #38	@ 0x26
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3326      	adds	r3, #38	@ 0x26
 80034ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d159      	bne.n	80035a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003506:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800350e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351c:	461a      	mov	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e03f      	b.n	80035a4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334d      	adds	r3, #77	@ 0x4d
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b08      	cmp	r3, #8
 8003538:	d126      	bne.n	8003588 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	334d      	adds	r3, #77	@ 0x4d
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3344      	adds	r3, #68	@ 0x44
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	1c59      	adds	r1, r3, #1
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4403      	add	r3, r0
 800356e:	3344      	adds	r3, #68	@ 0x44
 8003570:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	334c      	adds	r3, #76	@ 0x4c
 8003582:	2204      	movs	r2, #4
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e00d      	b.n	80035a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	334d      	adds	r3, #77	@ 0x4d
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	f000 8100 	beq.w	80037a0 <HCD_HC_IN_IRQHandler+0xcca>
 80035a0:	e000      	b.n	80035a4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334c      	adds	r3, #76	@ 0x4c
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f006 faba 	bl	8009b34 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035c0:	e0ef      	b.n	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 f9b6 	bl	800693c <USB_ReadChInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d12f      	bne.n	800363a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e6:	461a      	mov	r2, r3
 80035e8:	2340      	movs	r3, #64	@ 0x40
 80035ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	@ 0x4d
 80035fc:	2205      	movs	r2, #5
 80035fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	331a      	adds	r3, #26
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	3344      	adds	r3, #68	@ 0x44
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f003 ff25 	bl	8007482 <USB_HC_Halt>
 8003638:	e0b3      	b.n	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f003 f97a 	bl	800693c <USB_ReadChInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b10      	cmp	r3, #16
 8003650:	f040 80a7 	bne.w	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3326      	adds	r3, #38	@ 0x26
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d11b      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3344      	adds	r3, #68	@ 0x44
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	334d      	adds	r3, #77	@ 0x4d
 800368e:	2204      	movs	r2, #4
 8003690:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f003 fef1 	bl	8007482 <USB_HC_Halt>
 80036a0:	e03f      	b.n	8003722 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3326      	adds	r3, #38	@ 0x26
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3326      	adds	r3, #38	@ 0x26
 80036c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d129      	bne.n	8003722 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3344      	adds	r3, #68	@ 0x44
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	799b      	ldrb	r3, [r3, #6]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HCD_HC_IN_IRQHandler+0xc2a>
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	331b      	adds	r3, #27
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d110      	bne.n	8003722 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	334d      	adds	r3, #77	@ 0x4d
 8003710:	2204      	movs	r2, #4
 8003712:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f003 feb0 	bl	8007482 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	331b      	adds	r3, #27
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d129      	bne.n	800378c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	331b      	adds	r3, #27
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	0151      	lsls	r1, r2, #5
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	440a      	add	r2, r1
 8003762:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	440a      	add	r2, r1
 8003782:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003786:	f043 0320 	orr.w	r3, r3, #32
 800378a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003798:	461a      	mov	r2, r3
 800379a:	2310      	movs	r3, #16
 800379c:	6093      	str	r3, [r2, #8]
 800379e:	e000      	b.n	80037a2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80037a0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 f8b8 	bl	800693c <USB_ReadChInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d11b      	bne.n	800380e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e2:	461a      	mov	r2, r3
 80037e4:	2304      	movs	r3, #4
 80037e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	334d      	adds	r3, #77	@ 0x4d
 80037f8:	2207      	movs	r2, #7
 80037fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f003 fe3c 	bl	8007482 <USB_HC_Halt>
 800380a:	f000 bc89 	b.w	8004120 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f003 f890 	bl	800693c <USB_ReadChInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 8082 	bne.w	800392c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003834:	461a      	mov	r2, r3
 8003836:	2320      	movs	r3, #32
 8003838:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3319      	adds	r3, #25
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d124      	bne.n	800389a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3319      	adds	r3, #25
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	334c      	adds	r3, #76	@ 0x4c
 8003874:	2202      	movs	r2, #2
 8003876:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	334d      	adds	r3, #77	@ 0x4d
 8003888:	2203      	movs	r2, #3
 800388a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f003 fdf4 	bl	8007482 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	331a      	adds	r3, #26
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	f040 8437 	bne.w	8004120 <HCD_HC_OUT_IRQHandler+0x978>
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	331b      	adds	r3, #27
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f040 842b 	bne.w	8004120 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	3326      	adds	r3, #38	@ 0x26
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d009      	beq.n	80038f4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	331b      	adds	r3, #27
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	334d      	adds	r3, #77	@ 0x4d
 8003904:	2203      	movs	r2, #3
 8003906:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f003 fdb6 	bl	8007482 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	3344      	adds	r3, #68	@ 0x44
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e3f9      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f003 f801 	bl	800693c <USB_ReadChInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003944:	d111      	bne.n	800396a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003952:	461a      	mov	r2, r3
 8003954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003958:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f003 fd8d 	bl	8007482 <USB_HC_Halt>
 8003968:	e3da      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f002 ffe2 	bl	800693c <USB_ReadChInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d168      	bne.n	8003a54 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3344      	adds	r3, #68	@ 0x44
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 ffcc 	bl	800693c <USB_ReadChInterrupts>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	d112      	bne.n	80039d4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	3319      	adds	r3, #25
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ce:	461a      	mov	r2, r3
 80039d0:	2340      	movs	r3, #64	@ 0x40
 80039d2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	331b      	adds	r3, #27
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d019      	beq.n	8003a1e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	331b      	adds	r3, #27
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334d      	adds	r3, #77	@ 0x4d
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f003 fd18 	bl	8007482 <USB_HC_Halt>
 8003a52:	e365      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f002 ff6d 	bl	800693c <USB_ReadChInterrupts>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a68:	2b40      	cmp	r3, #64	@ 0x40
 8003a6a:	d139      	bne.n	8003ae0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	334d      	adds	r3, #77	@ 0x4d
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	331a      	adds	r3, #26
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3319      	adds	r3, #25
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3344      	adds	r3, #68	@ 0x44
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fcdb 	bl	8007482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2340      	movs	r3, #64	@ 0x40
 8003adc:	6093      	str	r3, [r2, #8]
 8003ade:	e31f      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f002 ff27 	bl	800693c <USB_ReadChInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d11a      	bne.n	8003b2e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b04:	461a      	mov	r2, r3
 8003b06:	2308      	movs	r3, #8
 8003b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	334d      	adds	r3, #77	@ 0x4d
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 fcab 	bl	8007482 <USB_HC_Halt>
 8003b2c:	e2f8      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f002 ff00 	bl	800693c <USB_ReadChInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d144      	bne.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3344      	adds	r3, #68	@ 0x44
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	334d      	adds	r3, #77	@ 0x4d
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3319      	adds	r3, #25
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d114      	bne.n	8003bae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3318      	adds	r3, #24
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3319      	adds	r3, #25
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 fc63 	bl	8007482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2310      	movs	r3, #16
 8003bcc:	6093      	str	r3, [r2, #8]
 8003bce:	e2a7      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f002 feaf 	bl	800693c <USB_ReadChInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	f040 8083 	bne.w	8003cf0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	799b      	ldrb	r3, [r3, #6]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d111      	bne.n	8003c16 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	334d      	adds	r3, #77	@ 0x4d
 8003c02:	2207      	movs	r2, #7
 8003c04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f003 fc37 	bl	8007482 <USB_HC_Halt>
 8003c14:	e062      	b.n	8003cdc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	3344      	adds	r3, #68	@ 0x44
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c59      	adds	r1, r3, #1
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4403      	add	r3, r0
 8003c36:	3344      	adds	r3, #68	@ 0x44
 8003c38:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3344      	adds	r3, #68	@ 0x44
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d922      	bls.n	8003c96 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3344      	adds	r3, #68	@ 0x44
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334c      	adds	r3, #76	@ 0x4c
 8003c74:	2204      	movs	r2, #4
 8003c76:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	334c      	adds	r3, #76	@ 0x4c
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f005 ff50 	bl	8009b34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c94:	e022      	b.n	8003cdc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	334c      	adds	r3, #76	@ 0x4c
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cc0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cc8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	6093      	str	r3, [r2, #8]
 8003cee:	e217      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f002 fe1f 	bl	800693c <USB_ReadChInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d08:	d11b      	bne.n	8003d42 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	334d      	adds	r3, #77	@ 0x4d
 8003d1a:	2209      	movs	r2, #9
 8003d1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f003 fbab 	bl	8007482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d3e:	6093      	str	r3, [r2, #8]
 8003d40:	e1ee      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f002 fdf6 	bl	800693c <USB_ReadChInterrupts>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	f040 81df 	bne.w	800411a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	334d      	adds	r3, #77	@ 0x4d
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	f040 8093 	bne.w	8003eac <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	334d      	adds	r3, #77	@ 0x4d
 8003d96:	2202      	movs	r2, #2
 8003d98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	334c      	adds	r3, #76	@ 0x4c
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	3326      	adds	r3, #38	@ 0x26
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d00b      	beq.n	8003ddc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3326      	adds	r3, #38	@ 0x26
 8003dd4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	f040 8190 	bne.w	80040fc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	799b      	ldrb	r3, [r3, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d115      	bne.n	8003e10 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	333d      	adds	r3, #61	@ 0x3d
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	f083 0301 	eor.w	r3, r3, #1
 8003dfc:	b2d8      	uxtb	r0, r3
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	333d      	adds	r3, #61	@ 0x3d
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	799b      	ldrb	r3, [r3, #6]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	f040 8171 	bne.w	80040fc <HCD_HC_OUT_IRQHandler+0x954>
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	3334      	adds	r3, #52	@ 0x34
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8165 	beq.w	80040fc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	3334      	adds	r3, #52	@ 0x34
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4403      	add	r3, r0
 8003e52:	3328      	adds	r3, #40	@ 0x28
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	440b      	add	r3, r1
 8003e58:	1e59      	subs	r1, r3, #1
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4403      	add	r3, r0
 8003e68:	3328      	adds	r3, #40	@ 0x28
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e70:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 813f 	beq.w	80040fc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	333d      	adds	r3, #61	@ 0x3d
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	f083 0301 	eor.w	r3, r3, #1
 8003e96:	b2d8      	uxtb	r0, r3
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	333d      	adds	r3, #61	@ 0x3d
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	e127      	b.n	80040fc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	334d      	adds	r3, #77	@ 0x4d
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d120      	bne.n	8003f04 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	334d      	adds	r3, #77	@ 0x4d
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	331b      	adds	r3, #27
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	f040 8107 	bne.w	80040fc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334c      	adds	r3, #76	@ 0x4c
 8003efe:	2202      	movs	r2, #2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e0fb      	b.n	80040fc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	334d      	adds	r3, #77	@ 0x4d
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d13a      	bne.n	8003f90 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334d      	adds	r3, #77	@ 0x4d
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	334c      	adds	r3, #76	@ 0x4c
 8003f3e:	2202      	movs	r2, #2
 8003f40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	331b      	adds	r3, #27
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f040 80d1 	bne.w	80040fc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	331b      	adds	r3, #27
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	e0b5      	b.n	80040fc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	334d      	adds	r3, #77	@ 0x4d
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d114      	bne.n	8003fd0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	334d      	adds	r3, #77	@ 0x4d
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	334c      	adds	r3, #76	@ 0x4c
 8003fca:	2202      	movs	r2, #2
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	e095      	b.n	80040fc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	334d      	adds	r3, #77	@ 0x4d
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d114      	bne.n	8004010 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	334d      	adds	r3, #77	@ 0x4d
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334c      	adds	r3, #76	@ 0x4c
 800400a:	2205      	movs	r2, #5
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e075      	b.n	80040fc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	334d      	adds	r3, #77	@ 0x4d
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b07      	cmp	r3, #7
 8004024:	d00a      	beq.n	800403c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	334d      	adds	r3, #77	@ 0x4d
 8004036:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004038:	2b09      	cmp	r3, #9
 800403a:	d170      	bne.n	800411e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	334d      	adds	r3, #77	@ 0x4d
 800404c:	2202      	movs	r2, #2
 800404e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3344      	adds	r3, #68	@ 0x44
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4403      	add	r3, r0
 8004070:	3344      	adds	r3, #68	@ 0x44
 8004072:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3344      	adds	r3, #68	@ 0x44
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d914      	bls.n	80040b4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3344      	adds	r3, #68	@ 0x44
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	334c      	adds	r3, #76	@ 0x4c
 80040ae:	2204      	movs	r2, #4
 80040b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040b2:	e022      	b.n	80040fa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	334c      	adds	r3, #76	@ 0x4c
 80040c4:	2202      	movs	r2, #2
 80040c6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f4:	461a      	mov	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040fa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	334c      	adds	r3, #76	@ 0x4c
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	4619      	mov	r1, r3
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f005 fd0e 	bl	8009b34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004118:	e002      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800411e:	bf00      	nop
  }
}
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b08a      	sub	sp, #40	@ 0x28
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004136:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	0c5b      	lsrs	r3, r3, #17
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800415a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d004      	beq.n	800416c <HCD_RXQLVL_IRQHandler+0x46>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b05      	cmp	r3, #5
 8004166:	f000 80b6 	beq.w	80042d6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800416a:	e0b7      	b.n	80042dc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80b3 	beq.w	80042da <HCD_RXQLVL_IRQHandler+0x1b4>
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	332c      	adds	r3, #44	@ 0x2c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80a7 	beq.w	80042da <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	3338      	adds	r3, #56	@ 0x38
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	18d1      	adds	r1, r2, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4403      	add	r3, r0
 80041b0:	3334      	adds	r3, #52	@ 0x34
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4299      	cmp	r1, r3
 80041b6:	f200 8083 	bhi.w	80042c0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	332c      	adds	r3, #44	@ 0x2c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	b292      	uxth	r2, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	f002 fb46 	bl	8006866 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	332c      	adds	r3, #44	@ 0x2c
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	18d1      	adds	r1, r2, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4403      	add	r3, r0
 80041fe:	332c      	adds	r3, #44	@ 0x2c
 8004200:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4613      	mov	r3, r2
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	3338      	adds	r3, #56	@ 0x38
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	18d1      	adds	r1, r2, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4403      	add	r3, r0
 8004226:	3338      	adds	r3, #56	@ 0x38
 8004228:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	4413      	add	r3, r2
 8004232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	0cdb      	lsrs	r3, r3, #19
 800423a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	3328      	adds	r3, #40	@ 0x28
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4293      	cmp	r3, r2
 8004258:	d13f      	bne.n	80042da <HCD_RXQLVL_IRQHandler+0x1b4>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d03c      	beq.n	80042da <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	4413      	add	r3, r2
 8004268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004276:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800427e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800428c:	461a      	mov	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	333c      	adds	r3, #60	@ 0x3c
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2d8      	uxtb	r0, r3
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	333c      	adds	r3, #60	@ 0x3c
 80042ba:	4602      	mov	r2, r0
 80042bc:	701a      	strb	r2, [r3, #0]
      break;
 80042be:	e00c      	b.n	80042da <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	334c      	adds	r3, #76	@ 0x4c
 80042d0:	2204      	movs	r2, #4
 80042d2:	701a      	strb	r2, [r3, #0]
      break;
 80042d4:	e001      	b.n	80042da <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80042da:	bf00      	nop
  }
}
 80042dc:	bf00      	nop
 80042de:	3728      	adds	r7, #40	@ 0x28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004310:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b02      	cmp	r3, #2
 800431a:	d10b      	bne.n	8004334 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d102      	bne.n	800432c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f005 fbe8 	bl	8009afc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	d132      	bne.n	80043a4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f043 0308 	orr.w	r3, r3, #8
 8004344:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d126      	bne.n	800439e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7a5b      	ldrb	r3, [r3, #9]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d113      	bne.n	8004380 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800435e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004362:	d106      	bne.n	8004372 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f002 fc0a 	bl	8006b84 <USB_InitFSLSPClkSel>
 8004370:	e011      	b.n	8004396 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2101      	movs	r1, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f002 fc03 	bl	8006b84 <USB_InitFSLSPClkSel>
 800437e:	e00a      	b.n	8004396 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	79db      	ldrb	r3, [r3, #7]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800438e:	461a      	mov	r2, r3
 8004390:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004394:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f005 fbda 	bl	8009b50 <HAL_HCD_PortEnabled_Callback>
 800439c:	e002      	b.n	80043a4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f005 fbe4 	bl	8009b6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d103      	bne.n	80043b6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f043 0320 	orr.w	r3, r3, #32
 80043b4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043bc:	461a      	mov	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	6013      	str	r3, [r2, #0]
}
 80043c2:	bf00      	nop
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e12b      	b.n	8004636 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc ff12 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	@ 0x24
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800441e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800442e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004430:	f001 fa20 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 8004434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4a81      	ldr	r2, [pc, #516]	@ (8004640 <HAL_I2C_Init+0x274>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d807      	bhi.n	8004450 <HAL_I2C_Init+0x84>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a80      	ldr	r2, [pc, #512]	@ (8004644 <HAL_I2C_Init+0x278>)
 8004444:	4293      	cmp	r3, r2
 8004446:	bf94      	ite	ls
 8004448:	2301      	movls	r3, #1
 800444a:	2300      	movhi	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e006      	b.n	800445e <HAL_I2C_Init+0x92>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a7d      	ldr	r2, [pc, #500]	@ (8004648 <HAL_I2C_Init+0x27c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	bf94      	ite	ls
 8004458:	2301      	movls	r3, #1
 800445a:	2300      	movhi	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0e7      	b.n	8004636 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a78      	ldr	r2, [pc, #480]	@ (800464c <HAL_I2C_Init+0x280>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0c9b      	lsrs	r3, r3, #18
 8004470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4a6a      	ldr	r2, [pc, #424]	@ (8004640 <HAL_I2C_Init+0x274>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d802      	bhi.n	80044a0 <HAL_I2C_Init+0xd4>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3301      	adds	r3, #1
 800449e:	e009      	b.n	80044b4 <HAL_I2C_Init+0xe8>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	4a69      	ldr	r2, [pc, #420]	@ (8004650 <HAL_I2C_Init+0x284>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	3301      	adds	r3, #1
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80044c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	495c      	ldr	r1, [pc, #368]	@ (8004640 <HAL_I2C_Init+0x274>)
 80044d0:	428b      	cmp	r3, r1
 80044d2:	d819      	bhi.n	8004508 <HAL_I2C_Init+0x13c>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1e59      	subs	r1, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	fbb1 f3f3 	udiv	r3, r1, r3
 80044e2:	1c59      	adds	r1, r3, #1
 80044e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80044e8:	400b      	ands	r3, r1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_I2C_Init+0x138>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1e59      	subs	r1, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004502:	e051      	b.n	80045a8 <HAL_I2C_Init+0x1dc>
 8004504:	2304      	movs	r3, #4
 8004506:	e04f      	b.n	80045a8 <HAL_I2C_Init+0x1dc>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d111      	bne.n	8004534 <HAL_I2C_Init+0x168>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1e58      	subs	r0, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	440b      	add	r3, r1
 800451e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004522:	3301      	adds	r3, #1
 8004524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	e012      	b.n	800455a <HAL_I2C_Init+0x18e>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1e58      	subs	r0, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	0099      	lsls	r1, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	fbb0 f3f3 	udiv	r3, r0, r3
 800454a:	3301      	adds	r3, #1
 800454c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004550:	2b00      	cmp	r3, #0
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_I2C_Init+0x196>
 800455e:	2301      	movs	r3, #1
 8004560:	e022      	b.n	80045a8 <HAL_I2C_Init+0x1dc>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10e      	bne.n	8004588 <HAL_I2C_Init+0x1bc>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1e58      	subs	r0, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	440b      	add	r3, r1
 8004578:	fbb0 f3f3 	udiv	r3, r0, r3
 800457c:	3301      	adds	r3, #1
 800457e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004586:	e00f      	b.n	80045a8 <HAL_I2C_Init+0x1dc>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1e58      	subs	r0, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	0099      	lsls	r1, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	fbb0 f3f3 	udiv	r3, r0, r3
 800459e:	3301      	adds	r3, #1
 80045a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	6809      	ldr	r1, [r1, #0]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80045d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6911      	ldr	r1, [r2, #16]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68d2      	ldr	r2, [r2, #12]
 80045e2:	4311      	orrs	r1, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	000186a0 	.word	0x000186a0
 8004644:	001e847f 	.word	0x001e847f
 8004648:	003d08ff 	.word	0x003d08ff
 800464c:	431bde83 	.word	0x431bde83
 8004650:	10624dd3 	.word	0x10624dd3

08004654 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e128      	b.n	80048b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a90      	ldr	r2, [pc, #576]	@ (80048c0 <HAL_I2S_Init+0x26c>)
 800467e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc fe13 	bl	80012ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2202      	movs	r2, #2
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800469c:	f023 030f 	bic.w	r3, r3, #15
 80046a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2202      	movs	r2, #2
 80046a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d060      	beq.n	8004774 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80046ba:	2310      	movs	r3, #16
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e001      	b.n	80046c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80046c0:	2320      	movs	r3, #32
 80046c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d802      	bhi.n	80046d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80046d2:	2001      	movs	r0, #1
 80046d4:	f001 f9c4 	bl	8005a60 <HAL_RCCEx_GetPeriphCLKFreq>
 80046d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e2:	d125      	bne.n	8004730 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d010      	beq.n	800470e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	3305      	adds	r3, #5
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e01f      	b.n	800474e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	fbb2 f2f3 	udiv	r2, r2, r3
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	461a      	mov	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	3305      	adds	r3, #5
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e00e      	b.n	800474e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fbb2 f2f3 	udiv	r2, r2, r3
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	3305      	adds	r3, #5
 800474c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4a5c      	ldr	r2, [pc, #368]	@ (80048c4 <HAL_I2S_Init+0x270>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	08db      	lsrs	r3, r3, #3
 8004758:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e003      	b.n	800477c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004774:	2302      	movs	r3, #2
 8004776:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d902      	bls.n	8004788 <HAL_I2S_Init+0x134>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	2bff      	cmp	r3, #255	@ 0xff
 8004786:	d907      	bls.n	8004798 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478c:	f043 0210 	orr.w	r2, r3, #16
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e08f      	b.n	80048b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	ea42 0103 	orr.w	r1, r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80047b6:	f023 030f 	bic.w	r3, r3, #15
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6851      	ldr	r1, [r2, #4]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6892      	ldr	r2, [r2, #8]
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68d2      	ldr	r2, [r2, #12]
 80047c8:	4311      	orrs	r1, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6992      	ldr	r2, [r2, #24]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d161      	bne.n	80048a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a38      	ldr	r2, [pc, #224]	@ (80048c8 <HAL_I2S_Init+0x274>)
 80047e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a37      	ldr	r2, [pc, #220]	@ (80048cc <HAL_I2S_Init+0x278>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_I2S_Init+0x1a4>
 80047f4:	4b36      	ldr	r3, [pc, #216]	@ (80048d0 <HAL_I2S_Init+0x27c>)
 80047f6:	e001      	b.n	80047fc <HAL_I2S_Init+0x1a8>
 80047f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	4932      	ldr	r1, [pc, #200]	@ (80048cc <HAL_I2S_Init+0x278>)
 8004804:	428a      	cmp	r2, r1
 8004806:	d101      	bne.n	800480c <HAL_I2S_Init+0x1b8>
 8004808:	4a31      	ldr	r2, [pc, #196]	@ (80048d0 <HAL_I2S_Init+0x27c>)
 800480a:	e001      	b.n	8004810 <HAL_I2S_Init+0x1bc>
 800480c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004810:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004814:	f023 030f 	bic.w	r3, r3, #15
 8004818:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2b      	ldr	r2, [pc, #172]	@ (80048cc <HAL_I2S_Init+0x278>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_I2S_Init+0x1d4>
 8004824:	4b2a      	ldr	r3, [pc, #168]	@ (80048d0 <HAL_I2S_Init+0x27c>)
 8004826:	e001      	b.n	800482c <HAL_I2S_Init+0x1d8>
 8004828:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800482c:	2202      	movs	r2, #2
 800482e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a25      	ldr	r2, [pc, #148]	@ (80048cc <HAL_I2S_Init+0x278>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_I2S_Init+0x1ea>
 800483a:	4b25      	ldr	r3, [pc, #148]	@ (80048d0 <HAL_I2S_Init+0x27c>)
 800483c:	e001      	b.n	8004842 <HAL_I2S_Init+0x1ee>
 800483e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800484e:	d003      	beq.n	8004858 <HAL_I2S_Init+0x204>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	e001      	b.n	8004864 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800486e:	4313      	orrs	r3, r2
 8004870:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004878:	4313      	orrs	r3, r2
 800487a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004882:	4313      	orrs	r3, r2
 8004884:	b29a      	uxth	r2, r3
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	4313      	orrs	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004890:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a0d      	ldr	r2, [pc, #52]	@ (80048cc <HAL_I2S_Init+0x278>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_I2S_Init+0x24c>
 800489c:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <HAL_I2S_Init+0x27c>)
 800489e:	e001      	b.n	80048a4 <HAL_I2S_Init+0x250>
 80048a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048a4:	897a      	ldrh	r2, [r7, #10]
 80048a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	080049cb 	.word	0x080049cb
 80048c4:	cccccccd 	.word	0xcccccccd
 80048c8:	08004ae1 	.word	0x08004ae1
 80048cc:	40003800 	.word	0x40003800
 80048d0:	40003400 	.word	0x40003400

080048d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	1c9a      	adds	r2, r3, #2
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10e      	bne.n	8004964 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004954:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ffb8 	bl	80048d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	b292      	uxth	r2, r2
 8004980:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	1c9a      	adds	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10e      	bne.n	80049c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ff93 	bl	80048e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d13a      	bne.n	8004a5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d109      	bne.n	8004a04 <I2S_IRQHandler+0x3a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fa:	2b40      	cmp	r3, #64	@ 0x40
 80049fc:	d102      	bne.n	8004a04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ffb4 	bl	800496c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0a:	2b40      	cmp	r3, #64	@ 0x40
 8004a0c:	d126      	bne.n	8004a5c <I2S_IRQHandler+0x92>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d11f      	bne.n	8004a5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	f043 0202 	orr.w	r2, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ff50 	bl	80048fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d136      	bne.n	8004ad6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d109      	bne.n	8004a86 <I2S_IRQHandler+0xbc>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7c:	2b80      	cmp	r3, #128	@ 0x80
 8004a7e:	d102      	bne.n	8004a86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff45 	bl	8004910 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d122      	bne.n	8004ad6 <I2S_IRQHandler+0x10c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d11b      	bne.n	8004ad6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004aac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac8:	f043 0204 	orr.w	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff13 	bl	80048fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a92      	ldr	r2, [pc, #584]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d101      	bne.n	8004afe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004afa:	4b92      	ldr	r3, [pc, #584]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004afc:	e001      	b.n	8004b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004afe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a8b      	ldr	r2, [pc, #556]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004b18:	4b8a      	ldr	r3, [pc, #552]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b1a:	e001      	b.n	8004b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004b1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b2c:	d004      	beq.n	8004b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f040 8099 	bne.w	8004c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d107      	bne.n	8004b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f925 	bl	8004d9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d107      	bne.n	8004b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f9c8 	bl	8004efc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b72:	2b40      	cmp	r3, #64	@ 0x40
 8004b74:	d13a      	bne.n	8004bec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d035      	beq.n	8004bec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6e      	ldr	r2, [pc, #440]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b8c:	e001      	b.n	8004b92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4969      	ldr	r1, [pc, #420]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b9a:	428b      	cmp	r3, r1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b9e:	4b69      	ldr	r3, [pc, #420]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ba0:	e001      	b.n	8004ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004ba2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ba6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004baa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	f043 0202 	orr.w	r2, r3, #2
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fe88 	bl	80048fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	f040 80c3 	bne.w	8004d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 80bd 	beq.w	8004d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a49      	ldr	r2, [pc, #292]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004c1e:	4b49      	ldr	r3, [pc, #292]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c20:	e001      	b.n	8004c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004c22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4944      	ldr	r1, [pc, #272]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c2e:	428b      	cmp	r3, r1
 8004c30:	d101      	bne.n	8004c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004c32:	4b44      	ldr	r3, [pc, #272]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c34:	e001      	b.n	8004c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004c36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c3e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	f043 0204 	orr.w	r2, r3, #4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fe4a 	bl	80048fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c68:	e089      	b.n	8004d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d107      	bne.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8be 	bl	8004e00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d107      	bne.n	8004c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f8fd 	bl	8004e98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca4:	2b40      	cmp	r3, #64	@ 0x40
 8004ca6:	d12f      	bne.n	8004d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d02a      	beq.n	8004d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cc0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cce:	e001      	b.n	8004cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004cd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4919      	ldr	r1, [pc, #100]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	d101      	bne.n	8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ce0:	4b18      	ldr	r3, [pc, #96]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ce2:	e001      	b.n	8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ce4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ce8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	f043 0202 	orr.w	r2, r3, #2
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fdfa 	bl	80048fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d136      	bne.n	8004d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d031      	beq.n	8004d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a07      	ldr	r2, [pc, #28]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d101      	bne.n	8004d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004d26:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d28:	e001      	b.n	8004d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4902      	ldr	r1, [pc, #8]	@ (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d36:	428b      	cmp	r3, r1
 8004d38:	d106      	bne.n	8004d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004d3a:	4b02      	ldr	r3, [pc, #8]	@ (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d3c:	e006      	b.n	8004d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004d3e:	bf00      	nop
 8004d40:	40003800 	.word	0x40003800
 8004d44:	40003400 	.word	0x40003400
 8004d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d50:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	f043 0204 	orr.w	r2, r3, #4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fdc0 	bl	80048fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d7c:	e000      	b.n	8004d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d7e:	bf00      	nop
}
 8004d80:	bf00      	nop
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	1c99      	adds	r1, r3, #2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6251      	str	r1, [r2, #36]	@ 0x24
 8004dae:	881a      	ldrh	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d113      	bne.n	8004df6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ddc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ffc9 	bl	8004d88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	1c99      	adds	r1, r3, #2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6251      	str	r1, [r2, #36]	@ 0x24
 8004e12:	8819      	ldrh	r1, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1d      	ldr	r2, [pc, #116]	@ (8004e90 <I2SEx_TxISR_I2SExt+0x90>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d101      	bne.n	8004e22 <I2SEx_TxISR_I2SExt+0x22>
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e94 <I2SEx_TxISR_I2SExt+0x94>)
 8004e20:	e001      	b.n	8004e26 <I2SEx_TxISR_I2SExt+0x26>
 8004e22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e26:	460a      	mov	r2, r1
 8004e28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d121      	bne.n	8004e86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a12      	ldr	r2, [pc, #72]	@ (8004e90 <I2SEx_TxISR_I2SExt+0x90>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d101      	bne.n	8004e50 <I2SEx_TxISR_I2SExt+0x50>
 8004e4c:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <I2SEx_TxISR_I2SExt+0x94>)
 8004e4e:	e001      	b.n	8004e54 <I2SEx_TxISR_I2SExt+0x54>
 8004e50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	490d      	ldr	r1, [pc, #52]	@ (8004e90 <I2SEx_TxISR_I2SExt+0x90>)
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	d101      	bne.n	8004e64 <I2SEx_TxISR_I2SExt+0x64>
 8004e60:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <I2SEx_TxISR_I2SExt+0x94>)
 8004e62:	e001      	b.n	8004e68 <I2SEx_TxISR_I2SExt+0x68>
 8004e64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff81 	bl	8004d88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40003800 	.word	0x40003800
 8004e94:	40003400 	.word	0x40003400

08004e98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68d8      	ldr	r0, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	1c99      	adds	r1, r3, #2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004eb0:	b282      	uxth	r2, r0
 8004eb2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d113      	bne.n	8004ef4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004eda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ff4a 	bl	8004d88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a20      	ldr	r2, [pc, #128]	@ (8004f8c <I2SEx_RxISR_I2SExt+0x90>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d101      	bne.n	8004f12 <I2SEx_RxISR_I2SExt+0x16>
 8004f0e:	4b20      	ldr	r3, [pc, #128]	@ (8004f90 <I2SEx_RxISR_I2SExt+0x94>)
 8004f10:	e001      	b.n	8004f16 <I2SEx_RxISR_I2SExt+0x1a>
 8004f12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f16:	68d8      	ldr	r0, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	1c99      	adds	r1, r3, #2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004f22:	b282      	uxth	r2, r0
 8004f24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d121      	bne.n	8004f82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a12      	ldr	r2, [pc, #72]	@ (8004f8c <I2SEx_RxISR_I2SExt+0x90>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d101      	bne.n	8004f4c <I2SEx_RxISR_I2SExt+0x50>
 8004f48:	4b11      	ldr	r3, [pc, #68]	@ (8004f90 <I2SEx_RxISR_I2SExt+0x94>)
 8004f4a:	e001      	b.n	8004f50 <I2SEx_RxISR_I2SExt+0x54>
 8004f4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	490d      	ldr	r1, [pc, #52]	@ (8004f8c <I2SEx_RxISR_I2SExt+0x90>)
 8004f58:	428b      	cmp	r3, r1
 8004f5a:	d101      	bne.n	8004f60 <I2SEx_RxISR_I2SExt+0x64>
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f90 <I2SEx_RxISR_I2SExt+0x94>)
 8004f5e:	e001      	b.n	8004f64 <I2SEx_RxISR_I2SExt+0x68>
 8004f60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ff03 	bl	8004d88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40003800 	.word	0x40003800
 8004f90:	40003400 	.word	0x40003400

08004f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e267      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d075      	beq.n	800509e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fb2:	4b88      	ldr	r3, [pc, #544]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fbe:	4b85      	ldr	r3, [pc, #532]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d112      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fca:	4b82      	ldr	r3, [pc, #520]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d05b      	beq.n	800509c <HAL_RCC_OscConfig+0x108>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d157      	bne.n	800509c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e242      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff8:	d106      	bne.n	8005008 <HAL_RCC_OscConfig+0x74>
 8004ffa:	4b76      	ldr	r3, [pc, #472]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a75      	ldr	r2, [pc, #468]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e01d      	b.n	8005044 <HAL_RCC_OscConfig+0xb0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x98>
 8005012:	4b70      	ldr	r3, [pc, #448]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6f      	ldr	r2, [pc, #444]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b6d      	ldr	r3, [pc, #436]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a6c      	ldr	r2, [pc, #432]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e00b      	b.n	8005044 <HAL_RCC_OscConfig+0xb0>
 800502c:	4b69      	ldr	r3, [pc, #420]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a68      	ldr	r2, [pc, #416]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	4b66      	ldr	r3, [pc, #408]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a65      	ldr	r2, [pc, #404]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 800503e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d013      	beq.n	8005074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fc fb4a 	bl	80016e4 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005054:	f7fc fb46 	bl	80016e4 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	@ 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e207      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005066:	4b5b      	ldr	r3, [pc, #364]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0xc0>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fc fb36 	bl	80016e4 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800507c:	f7fc fb32 	bl	80016e4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	@ 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e1f3      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508e:	4b51      	ldr	r3, [pc, #324]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0xe8>
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d063      	beq.n	8005172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050aa:	4b4a      	ldr	r3, [pc, #296]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b6:	4b47      	ldr	r3, [pc, #284]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d11c      	bne.n	80050fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c2:	4b44      	ldr	r3, [pc, #272]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d116      	bne.n	80050fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	4b41      	ldr	r3, [pc, #260]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_RCC_OscConfig+0x152>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e1c7      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e6:	4b3b      	ldr	r3, [pc, #236]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4937      	ldr	r1, [pc, #220]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fa:	e03a      	b.n	8005172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005104:	4b34      	ldr	r3, [pc, #208]	@ (80051d8 <HAL_RCC_OscConfig+0x244>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fc faeb 	bl	80016e4 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005112:	f7fc fae7 	bl	80016e4 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e1a8      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005124:	4b2b      	ldr	r3, [pc, #172]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	4b28      	ldr	r3, [pc, #160]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4925      	ldr	r1, [pc, #148]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]
 8005144:	e015      	b.n	8005172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005146:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <HAL_RCC_OscConfig+0x244>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fc faca 	bl	80016e4 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005154:	f7fc fac6 	bl	80016e4 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e187      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005166:	4b1b      	ldr	r3, [pc, #108]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d036      	beq.n	80051ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005186:	4b15      	ldr	r3, [pc, #84]	@ (80051dc <HAL_RCC_OscConfig+0x248>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fc faaa 	bl	80016e4 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005194:	f7fc faa6 	bl	80016e4 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e167      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80051a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x200>
 80051b2:	e01b      	b.n	80051ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b4:	4b09      	ldr	r3, [pc, #36]	@ (80051dc <HAL_RCC_OscConfig+0x248>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7fc fa93 	bl	80016e4 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c0:	e00e      	b.n	80051e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c2:	f7fc fa8f 	bl	80016e4 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d907      	bls.n	80051e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e150      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
 80051d4:	40023800 	.word	0x40023800
 80051d8:	42470000 	.word	0x42470000
 80051dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e0:	4b88      	ldr	r3, [pc, #544]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80051e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ea      	bne.n	80051c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8097 	beq.w	8005328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fe:	4b81      	ldr	r3, [pc, #516]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10f      	bne.n	800522a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	4b7d      	ldr	r3, [pc, #500]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	4a7c      	ldr	r2, [pc, #496]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005218:	6413      	str	r3, [r2, #64]	@ 0x40
 800521a:	4b7a      	ldr	r3, [pc, #488]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	4b77      	ldr	r3, [pc, #476]	@ (8005408 <HAL_RCC_OscConfig+0x474>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d118      	bne.n	8005268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005236:	4b74      	ldr	r3, [pc, #464]	@ (8005408 <HAL_RCC_OscConfig+0x474>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a73      	ldr	r2, [pc, #460]	@ (8005408 <HAL_RCC_OscConfig+0x474>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fc fa4f 	bl	80016e4 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fc fa4b 	bl	80016e4 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e10c      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525c:	4b6a      	ldr	r3, [pc, #424]	@ (8005408 <HAL_RCC_OscConfig+0x474>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x2ea>
 8005270:	4b64      	ldr	r3, [pc, #400]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005274:	4a63      	ldr	r2, [pc, #396]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	6713      	str	r3, [r2, #112]	@ 0x70
 800527c:	e01c      	b.n	80052b8 <HAL_RCC_OscConfig+0x324>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b05      	cmp	r3, #5
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x30c>
 8005286:	4b5f      	ldr	r3, [pc, #380]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	4a5e      	ldr	r2, [pc, #376]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	6713      	str	r3, [r2, #112]	@ 0x70
 8005292:	4b5c      	ldr	r3, [pc, #368]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005296:	4a5b      	ldr	r2, [pc, #364]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6713      	str	r3, [r2, #112]	@ 0x70
 800529e:	e00b      	b.n	80052b8 <HAL_RCC_OscConfig+0x324>
 80052a0:	4b58      	ldr	r3, [pc, #352]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a4:	4a57      	ldr	r2, [pc, #348]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ac:	4b55      	ldr	r3, [pc, #340]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	4a54      	ldr	r2, [pc, #336]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052b2:	f023 0304 	bic.w	r3, r3, #4
 80052b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fc fa10 	bl	80016e4 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	e00a      	b.n	80052de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fc fa0c 	bl	80016e4 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0cb      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052de:	4b49      	ldr	r3, [pc, #292]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0ee      	beq.n	80052c8 <HAL_RCC_OscConfig+0x334>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ec:	f7fc f9fa 	bl	80016e4 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f2:	e00a      	b.n	800530a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f4:	f7fc f9f6 	bl	80016e4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0b5      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530a:	4b3e      	ldr	r3, [pc, #248]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ee      	bne.n	80052f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531c:	4b39      	ldr	r3, [pc, #228]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	4a38      	ldr	r2, [pc, #224]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005326:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80a1 	beq.w	8005474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005332:	4b34      	ldr	r3, [pc, #208]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b08      	cmp	r3, #8
 800533c:	d05c      	beq.n	80053f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d141      	bne.n	80053ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b31      	ldr	r3, [pc, #196]	@ (800540c <HAL_RCC_OscConfig+0x478>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fc f9ca 	bl	80016e4 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005354:	f7fc f9c6 	bl	80016e4 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e087      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	4b27      	ldr	r3, [pc, #156]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	3b01      	subs	r3, #1
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	061b      	lsls	r3, r3, #24
 8005396:	491b      	ldr	r1, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539c:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <HAL_RCC_OscConfig+0x478>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a2:	f7fc f99f 	bl	80016e4 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fc f99b 	bl	80016e4 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e05c      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053bc:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x416>
 80053c8:	e054      	b.n	8005474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b10      	ldr	r3, [pc, #64]	@ (800540c <HAL_RCC_OscConfig+0x478>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fc f988 	bl	80016e4 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fc f984 	bl	80016e4 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e045      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x444>
 80053f6:	e03d      	b.n	8005474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e038      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
 8005404:	40023800 	.word	0x40023800
 8005408:	40007000 	.word	0x40007000
 800540c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005410:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <HAL_RCC_OscConfig+0x4ec>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d028      	beq.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d121      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	429a      	cmp	r2, r3
 8005438:	d11a      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005440:	4013      	ands	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005448:	4293      	cmp	r3, r2
 800544a:	d111      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	3b01      	subs	r3, #1
 800545a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d107      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800

08005484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0cc      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005498:	4b68      	ldr	r3, [pc, #416]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d90c      	bls.n	80054c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b65      	ldr	r3, [pc, #404]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b63      	ldr	r3, [pc, #396]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0b8      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d8:	4b59      	ldr	r3, [pc, #356]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4a58      	ldr	r2, [pc, #352]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f0:	4b53      	ldr	r3, [pc, #332]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a52      	ldr	r2, [pc, #328]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fc:	4b50      	ldr	r3, [pc, #320]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	494d      	ldr	r1, [pc, #308]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d044      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d107      	bne.n	8005532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005522:	4b47      	ldr	r3, [pc, #284]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d119      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d003      	beq.n	8005542 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800553e:	2b03      	cmp	r3, #3
 8005540:	d107      	bne.n	8005552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005542:	4b3f      	ldr	r3, [pc, #252]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e06f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005552:	4b3b      	ldr	r3, [pc, #236]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e067      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005562:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f023 0203 	bic.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4934      	ldr	r1, [pc, #208]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005574:	f7fc f8b6 	bl	80016e4 <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	e00a      	b.n	8005592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557c:	f7fc f8b2 	bl	80016e4 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e04f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	4b2b      	ldr	r3, [pc, #172]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 020c 	and.w	r2, r3, #12
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1eb      	bne.n	800557c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055a4:	4b25      	ldr	r3, [pc, #148]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d20c      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b22      	ldr	r3, [pc, #136]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b20      	ldr	r3, [pc, #128]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e032      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d8:	4b19      	ldr	r3, [pc, #100]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4916      	ldr	r1, [pc, #88]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	490e      	ldr	r1, [pc, #56]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800560a:	f000 f821 	bl	8005650 <HAL_RCC_GetSysClockFreq>
 800560e:	4602      	mov	r2, r0
 8005610:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	490a      	ldr	r1, [pc, #40]	@ (8005644 <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	5ccb      	ldrb	r3, [r1, r3]
 800561e:	fa22 f303 	lsr.w	r3, r2, r3
 8005622:	4a09      	ldr	r2, [pc, #36]	@ (8005648 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005626:	4b09      	ldr	r3, [pc, #36]	@ (800564c <HAL_RCC_ClockConfig+0x1c8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fc f816 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023c00 	.word	0x40023c00
 8005640:	40023800 	.word	0x40023800
 8005644:	0800a228 	.word	0x0800a228
 8005648:	20000000 	.word	0x20000000
 800564c:	20000004 	.word	0x20000004

08005650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005654:	b094      	sub	sp, #80	@ 0x50
 8005656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005668:	4b79      	ldr	r3, [pc, #484]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x200>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	2b08      	cmp	r3, #8
 8005672:	d00d      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0x40>
 8005674:	2b08      	cmp	r3, #8
 8005676:	f200 80e1 	bhi.w	800583c <HAL_RCC_GetSysClockFreq+0x1ec>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x34>
 800567e:	2b04      	cmp	r3, #4
 8005680:	d003      	beq.n	800568a <HAL_RCC_GetSysClockFreq+0x3a>
 8005682:	e0db      	b.n	800583c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005684:	4b73      	ldr	r3, [pc, #460]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x204>)
 8005686:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005688:	e0db      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800568a:	4b73      	ldr	r3, [pc, #460]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x208>)
 800568c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800568e:	e0d8      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005690:	4b6f      	ldr	r3, [pc, #444]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x200>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005698:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800569a:	4b6d      	ldr	r3, [pc, #436]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x200>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d063      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x200>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	099b      	lsrs	r3, r3, #6
 80056ac:	2200      	movs	r2, #0
 80056ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ba:	2300      	movs	r3, #0
 80056bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80056be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056c2:	4622      	mov	r2, r4
 80056c4:	462b      	mov	r3, r5
 80056c6:	f04f 0000 	mov.w	r0, #0
 80056ca:	f04f 0100 	mov.w	r1, #0
 80056ce:	0159      	lsls	r1, r3, #5
 80056d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d4:	0150      	lsls	r0, r2, #5
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4621      	mov	r1, r4
 80056dc:	1a51      	subs	r1, r2, r1
 80056de:	6139      	str	r1, [r7, #16]
 80056e0:	4629      	mov	r1, r5
 80056e2:	eb63 0301 	sbc.w	r3, r3, r1
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056f4:	4659      	mov	r1, fp
 80056f6:	018b      	lsls	r3, r1, #6
 80056f8:	4651      	mov	r1, sl
 80056fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056fe:	4651      	mov	r1, sl
 8005700:	018a      	lsls	r2, r1, #6
 8005702:	4651      	mov	r1, sl
 8005704:	ebb2 0801 	subs.w	r8, r2, r1
 8005708:	4659      	mov	r1, fp
 800570a:	eb63 0901 	sbc.w	r9, r3, r1
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800571a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800571e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005722:	4690      	mov	r8, r2
 8005724:	4699      	mov	r9, r3
 8005726:	4623      	mov	r3, r4
 8005728:	eb18 0303 	adds.w	r3, r8, r3
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	462b      	mov	r3, r5
 8005730:	eb49 0303 	adc.w	r3, r9, r3
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005742:	4629      	mov	r1, r5
 8005744:	024b      	lsls	r3, r1, #9
 8005746:	4621      	mov	r1, r4
 8005748:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800574c:	4621      	mov	r1, r4
 800574e:	024a      	lsls	r2, r1, #9
 8005750:	4610      	mov	r0, r2
 8005752:	4619      	mov	r1, r3
 8005754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005756:	2200      	movs	r2, #0
 8005758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800575a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800575c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005760:	f7fa fd32 	bl	80001c8 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4613      	mov	r3, r2
 800576a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800576c:	e058      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800576e:	4b38      	ldr	r3, [pc, #224]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x200>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	2200      	movs	r2, #0
 8005776:	4618      	mov	r0, r3
 8005778:	4611      	mov	r1, r2
 800577a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800577e:	623b      	str	r3, [r7, #32]
 8005780:	2300      	movs	r3, #0
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
 8005784:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005788:	4642      	mov	r2, r8
 800578a:	464b      	mov	r3, r9
 800578c:	f04f 0000 	mov.w	r0, #0
 8005790:	f04f 0100 	mov.w	r1, #0
 8005794:	0159      	lsls	r1, r3, #5
 8005796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800579a:	0150      	lsls	r0, r2, #5
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4641      	mov	r1, r8
 80057a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057a6:	4649      	mov	r1, r9
 80057a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057c0:	ebb2 040a 	subs.w	r4, r2, sl
 80057c4:	eb63 050b 	sbc.w	r5, r3, fp
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	00eb      	lsls	r3, r5, #3
 80057d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d6:	00e2      	lsls	r2, r4, #3
 80057d8:	4614      	mov	r4, r2
 80057da:	461d      	mov	r5, r3
 80057dc:	4643      	mov	r3, r8
 80057de:	18e3      	adds	r3, r4, r3
 80057e0:	603b      	str	r3, [r7, #0]
 80057e2:	464b      	mov	r3, r9
 80057e4:	eb45 0303 	adc.w	r3, r5, r3
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057f6:	4629      	mov	r1, r5
 80057f8:	028b      	lsls	r3, r1, #10
 80057fa:	4621      	mov	r1, r4
 80057fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005800:	4621      	mov	r1, r4
 8005802:	028a      	lsls	r2, r1, #10
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580a:	2200      	movs	r2, #0
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	61fa      	str	r2, [r7, #28]
 8005810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005814:	f7fa fcd8 	bl	80001c8 <__aeabi_uldivmod>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4613      	mov	r3, r2
 800581e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005820:	4b0b      	ldr	r3, [pc, #44]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x200>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	3301      	adds	r3, #1
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005830:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800583a:	e002      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800583c:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x204>)
 800583e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005844:	4618      	mov	r0, r3
 8005846:	3750      	adds	r7, #80	@ 0x50
 8005848:	46bd      	mov	sp, r7
 800584a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800584e:	bf00      	nop
 8005850:	40023800 	.word	0x40023800
 8005854:	00f42400 	.word	0x00f42400
 8005858:	007a1200 	.word	0x007a1200

0800585c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005860:	4b03      	ldr	r3, [pc, #12]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x14>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	4618      	mov	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20000000 	.word	0x20000000

08005874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005878:	f7ff fff0 	bl	800585c <HAL_RCC_GetHCLKFreq>
 800587c:	4602      	mov	r2, r0
 800587e:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	0a9b      	lsrs	r3, r3, #10
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	4903      	ldr	r1, [pc, #12]	@ (8005898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800588a:	5ccb      	ldrb	r3, [r1, r3]
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40023800 	.word	0x40023800
 8005898:	0800a238 	.word	0x0800a238

0800589c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d105      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d035      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058c4:	4b62      	ldr	r3, [pc, #392]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058ca:	f7fb ff0b 	bl	80016e4 <HAL_GetTick>
 80058ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058d0:	e008      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058d2:	f7fb ff07 	bl	80016e4 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0b0      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f0      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	019a      	lsls	r2, r3, #6
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	071b      	lsls	r3, r3, #28
 80058fc:	4955      	ldr	r1, [pc, #340]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005904:	4b52      	ldr	r3, [pc, #328]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800590a:	f7fb feeb 	bl	80016e4 <HAL_GetTick>
 800590e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005910:	e008      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005912:	f7fb fee7 	bl	80016e4 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e090      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005924:	4b4b      	ldr	r3, [pc, #300]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f0      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8083 	beq.w	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	4b44      	ldr	r3, [pc, #272]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	4a43      	ldr	r2, [pc, #268]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800594c:	6413      	str	r3, [r2, #64]	@ 0x40
 800594e:	4b41      	ldr	r3, [pc, #260]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800595a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005964:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005966:	f7fb febd 	bl	80016e4 <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fb feb9 	bl	80016e4 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e062      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005980:	4b35      	ldr	r3, [pc, #212]	@ (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800598c:	4b31      	ldr	r3, [pc, #196]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005994:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02f      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d028      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059b4:	4b29      	ldr	r3, [pc, #164]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ba:	4b28      	ldr	r3, [pc, #160]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059c0:	4a24      	ldr	r2, [pc, #144]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059c6:	4b23      	ldr	r3, [pc, #140]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d114      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059d2:	f7fb fe87 	bl	80016e4 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d8:	e00a      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fb fe83 	bl	80016e4 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e02a      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f0:	4b18      	ldr	r3, [pc, #96]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ee      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a08:	d10d      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1e:	490d      	ldr	r1, [pc, #52]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]
 8005a24:	e005      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a26:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a2c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a30:	6093      	str	r3, [r2, #8]
 8005a32:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3e:	4905      	ldr	r1, [pc, #20]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	42470068 	.word	0x42470068
 8005a54:	40023800 	.word	0x40023800
 8005a58:	40007000 	.word	0x40007000
 8005a5c:	42470e40 	.word	0x42470e40

08005a60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d13f      	bne.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005a7e:	4b24      	ldr	r3, [pc, #144]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d006      	beq.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a94:	d12f      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a96:	4b1f      	ldr	r3, [pc, #124]	@ (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a98:	617b      	str	r3, [r7, #20]
          break;
 8005a9a:	e02f      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aa8:	d108      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005aaa:	4b19      	ldr	r3, [pc, #100]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ab2:	4a19      	ldr	r2, [pc, #100]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	613b      	str	r3, [r7, #16]
 8005aba:	e007      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005abc:	4b14      	ldr	r3, [pc, #80]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ac4:	4a15      	ldr	r2, [pc, #84]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005acc:	4b10      	ldr	r3, [pc, #64]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae6:	0f1b      	lsrs	r3, r3, #28
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	617b      	str	r3, [r7, #20]
          break;
 8005af4:	e002      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
          break;
 8005afa:	bf00      	nop
        }
      }
      break;
 8005afc:	e000      	b.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005afe:	bf00      	nop
    }
  }
  return frequency;
 8005b00:	697b      	ldr	r3, [r7, #20]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
 8005b14:	00bb8000 	.word	0x00bb8000
 8005b18:	007a1200 	.word	0x007a1200
 8005b1c:	00f42400 	.word	0x00f42400

08005b20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e073      	b.n	8005c1e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	7f5b      	ldrb	r3, [r3, #29]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fb fc30 	bl	80013ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d055      	beq.n	8005c0c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	22ca      	movs	r2, #202	@ 0xca
 8005b66:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2253      	movs	r2, #83	@ 0x53
 8005b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fbdd 	bl	8006330 <RTC_EnterInitMode>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d12c      	bne.n	8005bda <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b92:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6899      	ldr	r1, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68d2      	ldr	r2, [r2, #12]
 8005bba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6919      	ldr	r1, [r3, #16]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	041a      	lsls	r2, r3, #16
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fbe4 	bl	800639e <RTC_ExitInitMode>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d110      	bne.n	8005c02 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005bee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ff      	movs	r2, #255	@ 0xff
 8005c08:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c0a:	e001      	b.n	8005c10 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c26:	b590      	push	{r4, r7, lr}
 8005c28:	b087      	sub	sp, #28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	7f1b      	ldrb	r3, [r3, #28]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_RTC_SetTime+0x1c>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e087      	b.n	8005d52 <HAL_RTC_SetTime+0x12c>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d126      	bne.n	8005ca2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d102      	bne.n	8005c68 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2200      	movs	r2, #0
 8005c66:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fbbb 	bl	80063e8 <RTC_ByteToBcd2>
 8005c72:	4603      	mov	r3, r0
 8005c74:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fbb4 	bl	80063e8 <RTC_ByteToBcd2>
 8005c80:	4603      	mov	r3, r0
 8005c82:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c84:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	789b      	ldrb	r3, [r3, #2]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fbac 	bl	80063e8 <RTC_ByteToBcd2>
 8005c90:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c92:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	78db      	ldrb	r3, [r3, #3]
 8005c9a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	e018      	b.n	8005cd4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d102      	bne.n	8005cb6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cc2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005cc8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	78db      	ldrb	r3, [r3, #3]
 8005cce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	22ca      	movs	r2, #202	@ 0xca
 8005cda:	625a      	str	r2, [r3, #36]	@ 0x24
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2253      	movs	r2, #83	@ 0x53
 8005ce2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fb23 	bl	8006330 <RTC_EnterInitMode>
 8005cea:	4603      	mov	r3, r0
 8005cec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d120      	bne.n	8005d36 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005cfe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005d02:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005d12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6899      	ldr	r1, [r3, #8]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fb36 	bl	800639e <RTC_ExitInitMode>
 8005d32:	4603      	mov	r3, r0
 8005d34:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	22ff      	movs	r2, #255	@ 0xff
 8005d48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]

  return status;
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}

08005d5a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005d8c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005d90:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	0d9b      	lsrs	r3, r3, #22
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d11a      	bne.n	8005e0c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fb22 	bl	8006424 <RTC_Bcd2ToByte>
 8005de0:	4603      	mov	r3, r0
 8005de2:	461a      	mov	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fb19 	bl	8006424 <RTC_Bcd2ToByte>
 8005df2:	4603      	mov	r3, r0
 8005df4:	461a      	mov	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	789b      	ldrb	r3, [r3, #2]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fb10 	bl	8006424 <RTC_Bcd2ToByte>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e16:	b590      	push	{r4, r7, lr}
 8005e18:	b087      	sub	sp, #28
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	7f1b      	ldrb	r3, [r3, #28]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_RTC_SetDate+0x1c>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e071      	b.n	8005f16 <HAL_RTC_SetDate+0x100>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10e      	bne.n	8005e62 <HAL_RTC_SetDate+0x4c>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	f023 0310 	bic.w	r3, r3, #16
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	330a      	adds	r3, #10
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d11c      	bne.n	8005ea2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fabb 	bl	80063e8 <RTC_ByteToBcd2>
 8005e72:	4603      	mov	r3, r0
 8005e74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fab4 	bl	80063e8 <RTC_ByteToBcd2>
 8005e80:	4603      	mov	r3, r0
 8005e82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	789b      	ldrb	r3, [r3, #2]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 faac 	bl	80063e8 <RTC_ByteToBcd2>
 8005e90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e00e      	b.n	8005ec0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	78db      	ldrb	r3, [r3, #3]
 8005ea6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005eae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005eb4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	22ca      	movs	r2, #202	@ 0xca
 8005ec6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2253      	movs	r2, #83	@ 0x53
 8005ece:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 fa2d 	bl	8006330 <RTC_EnterInitMode>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005eda:	7cfb      	ldrb	r3, [r7, #19]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10c      	bne.n	8005efa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005eea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005eee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 fa54 	bl	800639e <RTC_ExitInitMode>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005efa:	7cfb      	ldrb	r3, [r7, #19]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	22ff      	movs	r2, #255	@ 0xff
 8005f0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]

  return status;
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}

08005f1e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005f38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	0b5b      	lsrs	r3, r3, #13
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11a      	bne.n	8005fb2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	78db      	ldrb	r3, [r3, #3]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fa4f 	bl	8006424 <RTC_Bcd2ToByte>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fa46 	bl	8006424 <RTC_Bcd2ToByte>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	789b      	ldrb	r3, [r3, #2]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fa3d 	bl	8006424 <RTC_Bcd2ToByte>
 8005faa:	4603      	mov	r3, r0
 8005fac:	461a      	mov	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b089      	sub	sp, #36	@ 0x24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005fc8:	4b9b      	ldr	r3, [pc, #620]	@ (8006238 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a9b      	ldr	r2, [pc, #620]	@ (800623c <HAL_RTC_SetAlarm_IT+0x280>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	0adb      	lsrs	r3, r3, #11
 8005fd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005fd8:	fb02 f303 	mul.w	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	7f1b      	ldrb	r3, [r3, #28]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_RTC_SetAlarm_IT+0x36>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e11e      	b.n	8006230 <HAL_RTC_SetAlarm_IT+0x274>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d137      	bne.n	8006074 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f000 f9e3 	bl	80063e8 <RTC_ByteToBcd2>
 8006022:	4603      	mov	r3, r0
 8006024:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 f9dc 	bl	80063e8 <RTC_ByteToBcd2>
 8006030:	4603      	mov	r3, r0
 8006032:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006034:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	789b      	ldrb	r3, [r3, #2]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f9d4 	bl	80063e8 <RTC_ByteToBcd2>
 8006040:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006042:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	78db      	ldrb	r3, [r3, #3]
 800604a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800604c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f9c6 	bl	80063e8 <RTC_ByteToBcd2>
 800605c:	4603      	mov	r3, r0
 800605e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006060:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006068:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800606e:	4313      	orrs	r3, r2
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	e023      	b.n	80060bc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2200      	movs	r2, #0
 8006086:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006094:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800609a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80060a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80060ac:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80060b2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80060b8:	4313      	orrs	r3, r2
 80060ba:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	22ca      	movs	r2, #202	@ 0xca
 80060ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2253      	movs	r2, #83	@ 0x53
 80060d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e0:	d142      	bne.n	8006168 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060f0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006102:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	3b01      	subs	r3, #1
 8006108:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	22ff      	movs	r2, #255	@ 0xff
 8006116:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2203      	movs	r2, #3
 800611c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e083      	b.n	8006230 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0e6      	beq.n	8006104 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006154:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006164:	609a      	str	r2, [r3, #8]
 8006166:	e04c      	b.n	8006202 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006176:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006188:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800618a:	4b2b      	ldr	r3, [pc, #172]	@ (8006238 <HAL_RTC_SetAlarm_IT+0x27c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2b      	ldr	r2, [pc, #172]	@ (800623c <HAL_RTC_SetAlarm_IT+0x280>)
 8006190:	fba2 2303 	umull	r2, r3, r2, r3
 8006194:	0adb      	lsrs	r3, r3, #11
 8006196:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	22ff      	movs	r2, #255	@ 0xff
 80061b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2203      	movs	r2, #3
 80061b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e035      	b.n	8006230 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0e6      	beq.n	80061a0 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061f0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006202:	4b0f      	ldr	r3, [pc, #60]	@ (8006240 <HAL_RTC_SetAlarm_IT+0x284>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a0e      	ldr	r2, [pc, #56]	@ (8006240 <HAL_RTC_SetAlarm_IT+0x284>)
 8006208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800620c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800620e:	4b0c      	ldr	r3, [pc, #48]	@ (8006240 <HAL_RTC_SetAlarm_IT+0x284>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	4a0b      	ldr	r2, [pc, #44]	@ (8006240 <HAL_RTC_SetAlarm_IT+0x284>)
 8006214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006218:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	22ff      	movs	r2, #255	@ 0xff
 8006220:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3724      	adds	r7, #36	@ 0x24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd90      	pop	{r4, r7, pc}
 8006238:	20000000 	.word	0x20000000
 800623c:	10624dd3 	.word	0x10624dd3
 8006240:	40013c00 	.word	0x40013c00

08006244 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800624c:	4b1f      	ldr	r3, [pc, #124]	@ (80062cc <HAL_RTC_AlarmIRQHandler+0x88>)
 800624e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006252:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d012      	beq.n	8006288 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00b      	beq.n	8006288 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	b2da      	uxtb	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006280:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f824 	bl	80062d0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d012      	beq.n	80062bc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80062b4:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8d2 	bl	8006460 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	775a      	strb	r2, [r3, #29]
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40013c00 	.word	0x40013c00

080062d0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a0d      	ldr	r2, [pc, #52]	@ (800632c <HAL_RTC_WaitForSynchro+0x48>)
 80062f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062f8:	f7fb f9f4 	bl	80016e4 <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062fe:	e009      	b.n	8006314 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006300:	f7fb f9f0 	bl	80016e4 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800630e:	d901      	bls.n	8006314 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e007      	b.n	8006324 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0ee      	beq.n	8006300 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	00017f5f 	.word	0x00017f5f

08006330 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d122      	bne.n	8006394 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800635c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800635e:	f7fb f9c1 	bl	80016e4 <HAL_GetTick>
 8006362:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006364:	e00c      	b.n	8006380 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006366:	f7fb f9bd 	bl	80016e4 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006374:	d904      	bls.n	8006380 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2204      	movs	r2, #4
 800637a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d102      	bne.n	8006394 <RTC_EnterInitMode+0x64>
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d1e8      	bne.n	8006366 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff8b 	bl	80062e4 <HAL_RTC_WaitForSynchro>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2204      	movs	r2, #4
 80063d8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80063f6:	e005      	b.n	8006404 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	3b0a      	subs	r3, #10
 8006402:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	2b09      	cmp	r3, #9
 8006408:	d8f6      	bhi.n	80063f8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	b2da      	uxtb	r2, r3
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	4313      	orrs	r3, r2
 8006416:	b2db      	uxtb	r3, r3
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	b2db      	uxtb	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	b2db      	uxtb	r3, r3
 8006450:	4413      	add	r3, r2
 8006452:	b2db      	uxtb	r3, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e07b      	b.n	800657e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d108      	bne.n	80064a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006496:	d009      	beq.n	80064ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	61da      	str	r2, [r3, #28]
 800649e:	e005      	b.n	80064ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fa ffa2 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006530:	ea42 0103 	orr.w	r1, r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006538:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	0c1b      	lsrs	r3, r3, #16
 800654a:	f003 0104 	and.w	r1, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	f003 0210 	and.w	r2, r3, #16
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800656c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006586:	b084      	sub	sp, #16
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	f107 001c 	add.w	r0, r7, #28
 8006594:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006598:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800659c:	2b01      	cmp	r3, #1
 800659e:	d123      	bne.n	80065e8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80065b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d105      	bne.n	80065dc <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f9dc 	bl	800699a <USB_CoreReset>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	e01b      	b.n	8006620 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f9d0 	bl	800699a <USB_CoreReset>
 80065fa:	4603      	mov	r3, r0
 80065fc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	639a      	str	r2, [r3, #56]	@ 0x38
 8006612:	e005      	b.n	8006620 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006618:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006620:	7fbb      	ldrb	r3, [r7, #30]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d10b      	bne.n	800663e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f043 0206 	orr.w	r2, r3, #6
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800664a:	b004      	add	sp, #16
 800664c:	4770      	bx	lr

0800664e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f043 0201 	orr.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f023 0201 	bic.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d115      	bne.n	80066e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066c0:	200a      	movs	r0, #10
 80066c2:	f7fb f81b 	bl	80016fc <HAL_Delay>
      ms += 10U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	330a      	adds	r3, #10
 80066ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f956 	bl	800697e <USB_GetMode>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d01e      	beq.n	8006716 <USB_SetCurrentMode+0x84>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2bc7      	cmp	r3, #199	@ 0xc7
 80066dc:	d9f0      	bls.n	80066c0 <USB_SetCurrentMode+0x2e>
 80066de:	e01a      	b.n	8006716 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d115      	bne.n	8006712 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066f2:	200a      	movs	r0, #10
 80066f4:	f7fb f802 	bl	80016fc <HAL_Delay>
      ms += 10U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	330a      	adds	r3, #10
 80066fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f93d 	bl	800697e <USB_GetMode>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <USB_SetCurrentMode+0x84>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2bc7      	cmp	r3, #199	@ 0xc7
 800670e:	d9f0      	bls.n	80066f2 <USB_SetCurrentMode+0x60>
 8006710:	e001      	b.n	8006716 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e005      	b.n	8006722 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2bc8      	cmp	r3, #200	@ 0xc8
 800671a:	d101      	bne.n	8006720 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006744:	d901      	bls.n	800674a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e01b      	b.n	8006782 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	daf2      	bge.n	8006738 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	019b      	lsls	r3, r3, #6
 800675a:	f043 0220 	orr.w	r2, r3, #32
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800676e:	d901      	bls.n	8006774 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e006      	b.n	8006782 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b20      	cmp	r3, #32
 800677e:	d0f0      	beq.n	8006762 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067a6:	d901      	bls.n	80067ac <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e018      	b.n	80067de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	daf2      	bge.n	800679a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2210      	movs	r2, #16
 80067bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067ca:	d901      	bls.n	80067d0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e006      	b.n	80067de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d0f0      	beq.n	80067be <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b089      	sub	sp, #36	@ 0x24
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	4611      	mov	r1, r2
 80067f6:	461a      	mov	r2, r3
 80067f8:	460b      	mov	r3, r1
 80067fa:	71fb      	strb	r3, [r7, #7]
 80067fc:	4613      	mov	r3, r2
 80067fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006808:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800680c:	2b00      	cmp	r3, #0
 800680e:	d123      	bne.n	8006858 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006810:	88bb      	ldrh	r3, [r7, #4]
 8006812:	3303      	adds	r3, #3
 8006814:	089b      	lsrs	r3, r3, #2
 8006816:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	e018      	b.n	8006850 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	031a      	lsls	r2, r3, #12
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800682a:	461a      	mov	r2, r3
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	3301      	adds	r3, #1
 8006836:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3301      	adds	r3, #1
 800683c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	3301      	adds	r3, #1
 8006842:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	3301      	adds	r3, #1
 8006848:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	3301      	adds	r3, #1
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	429a      	cmp	r2, r3
 8006856:	d3e2      	bcc.n	800681e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3724      	adds	r7, #36	@ 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006866:	b480      	push	{r7}
 8006868:	b08b      	sub	sp, #44	@ 0x2c
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	4613      	mov	r3, r2
 8006872:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	089b      	lsrs	r3, r3, #2
 8006880:	b29b      	uxth	r3, r3
 8006882:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	623b      	str	r3, [r7, #32]
 8006890:	e014      	b.n	80068bc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	601a      	str	r2, [r3, #0]
    pDest++;
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	3301      	adds	r3, #1
 80068a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	3301      	adds	r3, #1
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	3301      	adds	r3, #1
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	3301      	adds	r3, #1
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	3301      	adds	r3, #1
 80068ba:	623b      	str	r3, [r7, #32]
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d3e6      	bcc.n	8006892 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068c4:	8bfb      	ldrh	r3, [r7, #30]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01e      	beq.n	8006908 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d4:	461a      	mov	r2, r3
 80068d6:	f107 0310 	add.w	r3, r7, #16
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	701a      	strb	r2, [r3, #0]
      i++;
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	3301      	adds	r3, #1
 80068f4:	623b      	str	r3, [r7, #32]
      pDest++;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	3301      	adds	r3, #1
 80068fa:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80068fc:	8bfb      	ldrh	r3, [r7, #30]
 80068fe:	3b01      	subs	r3, #1
 8006900:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006902:	8bfb      	ldrh	r3, [r7, #30]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1ea      	bne.n	80068de <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800690a:	4618      	mov	r0, r3
 800690c:	372c      	adds	r7, #44	@ 0x2c
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4013      	ands	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800692e:	68fb      	ldr	r3, [r7, #12]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4013      	ands	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006970:	68bb      	ldr	r3, [r7, #8]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f003 0301 	and.w	r3, r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069b2:	d901      	bls.n	80069b8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e01b      	b.n	80069f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	daf2      	bge.n	80069a6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f043 0201 	orr.w	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069dc:	d901      	bls.n	80069e2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e006      	b.n	80069f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d0f0      	beq.n	80069d0 <USB_CoreReset+0x36>

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069fc:	b084      	sub	sp, #16
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2300      	movs	r3, #0
 8006a20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a32:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d119      	bne.n	8006a86 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006a52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d10a      	bne.n	8006a70 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a68:	f043 0304 	orr.w	r3, r3, #4
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	e014      	b.n	8006a9a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a7e:	f023 0304 	bic.w	r3, r3, #4
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	e009      	b.n	8006a9a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a94:	f023 0304 	bic.w	r3, r3, #4
 8006a98:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a9a:	2110      	movs	r1, #16
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff fe44 	bl	800672a <USB_FlushTxFifo>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fe6e 	bl	800678e <USB_FlushRxFifo>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	e015      	b.n	8006aee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	3301      	adds	r3, #1
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006af2:	461a      	mov	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d3e3      	bcc.n	8006ac2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <USB_HostInit+0x170>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10b      	bne.n	8006b28 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b16:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a15      	ldr	r2, [pc, #84]	@ (8006b70 <USB_HostInit+0x174>)
 8006b1c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a14      	ldr	r2, [pc, #80]	@ (8006b74 <USB_HostInit+0x178>)
 8006b22:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006b26:	e009      	b.n	8006b3c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2280      	movs	r2, #128	@ 0x80
 8006b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a11      	ldr	r2, [pc, #68]	@ (8006b78 <USB_HostInit+0x17c>)
 8006b32:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a11      	ldr	r2, [pc, #68]	@ (8006b7c <USB_HostInit+0x180>)
 8006b38:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f043 0210 	orr.w	r2, r3, #16
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	4b0a      	ldr	r3, [pc, #40]	@ (8006b80 <USB_HostInit+0x184>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b68:	b004      	add	sp, #16
 8006b6a:	4770      	bx	lr
 8006b6c:	40040000 	.word	0x40040000
 8006b70:	01000200 	.word	0x01000200
 8006b74:	00e00300 	.word	0x00e00300
 8006b78:	00600080 	.word	0x00600080
 8006b7c:	004000e0 	.word	0x004000e0
 8006b80:	a3200008 	.word	0xa3200008

08006b84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d107      	bne.n	8006bd6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006bd2:	6053      	str	r3, [r2, #4]
 8006bd4:	e00c      	b.n	8006bf0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d107      	bne.n	8006bec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006be2:	461a      	mov	r2, r3
 8006be4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006be8:	6053      	str	r3, [r2, #4]
 8006bea:	e001      	b.n	8006bf0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c1e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c2c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c2e:	2064      	movs	r0, #100	@ 0x64
 8006c30:	f7fa fd64 	bl	80016fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c40:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c42:	200a      	movs	r0, #10
 8006c44:	f7fa fd5a 	bl	80016fc <HAL_Delay>

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c76:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <USB_DriveVbus+0x44>
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d106      	bne.n	8006c96 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c94:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca0:	d109      	bne.n	8006cb6 <USB_DriveVbus+0x64>
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cb4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	0c5b      	lsrs	r3, r3, #17
 8006ce2:	f003 0303 	and.w	r3, r3, #3
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	b29b      	uxth	r3, r3
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	70fb      	strb	r3, [r7, #3]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70bb      	strb	r3, [r7, #2]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d42:	461a      	mov	r2, r3
 8006d44:	f04f 33ff 	mov.w	r3, #4294967295
 8006d48:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d87c      	bhi.n	8006e4c <USB_HC_Init+0x138>
 8006d52:	a201      	add	r2, pc, #4	@ (adr r2, 8006d58 <USB_HC_Init+0x44>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d69 	.word	0x08006d69
 8006d5c:	08006e0f 	.word	0x08006e0f
 8006d60:	08006d69 	.word	0x08006d69
 8006d64:	08006dd1 	.word	0x08006dd1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d74:	461a      	mov	r2, r3
 8006d76:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006d7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	da10      	bge.n	8006da6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	78fa      	ldrb	r2, [r7, #3]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006da2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006da4:	e055      	b.n	8006e52 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a6f      	ldr	r2, [pc, #444]	@ (8006f68 <USB_HC_Init+0x254>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d151      	bne.n	8006e52 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006dae:	78fb      	ldrb	r3, [r7, #3]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dc8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006dcc:	60d3      	str	r3, [r2, #12]
      break;
 8006dce:	e040      	b.n	8006e52 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ddc:	461a      	mov	r2, r3
 8006dde:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006de2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006de4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	da34      	bge.n	8006e56 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	78fa      	ldrb	r2, [r7, #3]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e0a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e0c:	e023      	b.n	8006e56 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f240 2325 	movw	r3, #549	@ 0x225
 8006e20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	da17      	bge.n	8006e5a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e44:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006e48:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e4a:	e006      	b.n	8006e5a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	77fb      	strb	r3, [r7, #31]
      break;
 8006e50:	e004      	b.n	8006e5c <USB_HC_Init+0x148>
      break;
 8006e52:	bf00      	nop
 8006e54:	e002      	b.n	8006e5c <USB_HC_Init+0x148>
      break;
 8006e56:	bf00      	nop
 8006e58:	e000      	b.n	8006e5c <USB_HC_Init+0x148>
      break;
 8006e5a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea2:	6939      	ldr	r1, [r7, #16]
 8006ea4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006eb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da03      	bge.n	8006ec8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	e001      	b.n	8006ecc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff fef9 	bl	8006cc4 <USB_GetHostSpeed>
 8006ed2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ed4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d106      	bne.n	8006eea <USB_HC_Init+0x1d6>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d003      	beq.n	8006eea <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006ee2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	e001      	b.n	8006eee <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006eee:	787b      	ldrb	r3, [r7, #1]
 8006ef0:	059b      	lsls	r3, r3, #22
 8006ef2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ef6:	78bb      	ldrb	r3, [r7, #2]
 8006ef8:	02db      	lsls	r3, r3, #11
 8006efa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006efe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f04:	049b      	lsls	r3, r3, #18
 8006f06:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006f0c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f12:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006f28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f2c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d003      	beq.n	8006f3e <USB_HC_Init+0x22a>
 8006f36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10f      	bne.n	8006f5e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	78fa      	ldrb	r2, [r7, #3]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40040000 	.word	0x40040000

08006f6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	@ 0x30
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006f84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f88:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8007104 <USB_HC_StartXfer+0x198>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d12f      	bne.n	8006ff2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d11c      	bne.n	8006fd2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	7c9b      	ldrb	r3, [r3, #18]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <USB_HC_StartXfer+0x3c>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	7c9b      	ldrb	r3, [r3, #18]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d124      	bne.n	8006ff2 <USB_HC_StartXfer+0x86>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	799b      	ldrb	r3, [r3, #6]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d120      	bne.n	8006ff2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fce:	60d3      	str	r3, [r2, #12]
 8006fd0:	e00f      	b.n	8006ff2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10b      	bne.n	8006ff2 <USB_HC_StartXfer+0x86>
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	795b      	ldrb	r3, [r3, #5]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d107      	bne.n	8006ff2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fb6b 	bl	80076c4 <USB_DoPing>
        return HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e232      	b.n	8007458 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	799b      	ldrb	r3, [r3, #6]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d158      	bne.n	80070ac <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	78db      	ldrb	r3, [r3, #3]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007006:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	8a92      	ldrh	r2, [r2, #20]
 800700c:	fb03 f202 	mul.w	r2, r3, r2
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	61da      	str	r2, [r3, #28]
 8007014:	e07c      	b.n	8007110 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	7c9b      	ldrb	r3, [r3, #18]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d130      	bne.n	8007080 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	2bbc      	cmp	r3, #188	@ 0xbc
 8007024:	d918      	bls.n	8007058 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	8a9b      	ldrh	r3, [r3, #20]
 800702a:	461a      	mov	r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d003      	beq.n	8007048 <USB_HC_StartXfer+0xdc>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d103      	bne.n	8007050 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2202      	movs	r2, #2
 800704c:	60da      	str	r2, [r3, #12]
 800704e:	e05f      	b.n	8007110 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2201      	movs	r2, #1
 8007054:	60da      	str	r2, [r3, #12]
 8007056:	e05b      	b.n	8007110 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6a1a      	ldr	r2, [r3, #32]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d007      	beq.n	8007078 <USB_HC_StartXfer+0x10c>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d003      	beq.n	8007078 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2204      	movs	r2, #4
 8007074:	60da      	str	r2, [r3, #12]
 8007076:	e04b      	b.n	8007110 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2203      	movs	r2, #3
 800707c:	60da      	str	r2, [r3, #12]
 800707e:	e047      	b.n	8007110 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d10d      	bne.n	80070a2 <USB_HC_StartXfer+0x136>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	8a92      	ldrh	r2, [r2, #20]
 800708e:	4293      	cmp	r3, r2
 8007090:	d907      	bls.n	80070a2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	8a92      	ldrh	r2, [r2, #20]
 8007098:	fb03 f202 	mul.w	r2, r3, r2
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	61da      	str	r2, [r3, #28]
 80070a0:	e036      	b.n	8007110 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	61da      	str	r2, [r3, #28]
 80070aa:	e031      	b.n	8007110 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d018      	beq.n	80070e6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	8a92      	ldrh	r2, [r2, #20]
 80070bc:	4413      	add	r3, r2
 80070be:	3b01      	subs	r3, #1
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	8a92      	ldrh	r2, [r2, #20]
 80070c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80070ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80070cc:	8b7b      	ldrh	r3, [r7, #26]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d90b      	bls.n	80070ea <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80070d2:	8b7b      	ldrh	r3, [r7, #26]
 80070d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	8a92      	ldrh	r2, [r2, #20]
 80070dc:	fb03 f202 	mul.w	r2, r3, r2
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	61da      	str	r2, [r3, #28]
 80070e4:	e001      	b.n	80070ea <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80070e6:	2301      	movs	r3, #1
 80070e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	78db      	ldrb	r3, [r3, #3]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	8a92      	ldrh	r2, [r2, #20]
 80070f8:	fb03 f202 	mul.w	r2, r3, r2
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	61da      	str	r2, [r3, #28]
 8007100:	e006      	b.n	8007110 <USB_HC_StartXfer+0x1a4>
 8007102:	bf00      	nop
 8007104:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6a1a      	ldr	r2, [r3, #32]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007118:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800711a:	04d9      	lsls	r1, r3, #19
 800711c:	4ba3      	ldr	r3, [pc, #652]	@ (80073ac <USB_HC_StartXfer+0x440>)
 800711e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007120:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	7d9b      	ldrb	r3, [r3, #22]
 8007126:	075b      	lsls	r3, r3, #29
 8007128:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800712c:	69f9      	ldr	r1, [r7, #28]
 800712e:	0148      	lsls	r0, r1, #5
 8007130:	6a39      	ldr	r1, [r7, #32]
 8007132:	4401      	add	r1, r0
 8007134:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007138:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800713a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	6999      	ldr	r1, [r3, #24]
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007152:	460a      	mov	r2, r1
 8007154:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	bf0c      	ite	eq
 8007166:	2301      	moveq	r3, #1
 8007168:	2300      	movne	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	0151      	lsls	r1, r2, #5
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	440a      	add	r2, r1
 8007184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007188:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800718c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	4413      	add	r3, r2
 8007196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	7e7b      	ldrb	r3, [r7, #25]
 800719e:	075b      	lsls	r3, r3, #29
 80071a0:	69f9      	ldr	r1, [r7, #28]
 80071a2:	0148      	lsls	r0, r1, #5
 80071a4:	6a39      	ldr	r1, [r7, #32]
 80071a6:	4401      	add	r1, r0
 80071a8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80071ac:	4313      	orrs	r3, r2
 80071ae:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	799b      	ldrb	r3, [r3, #6]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	f040 80c3 	bne.w	8007340 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	7c5b      	ldrb	r3, [r3, #17]
 80071be:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80071c4:	4313      	orrs	r3, r2
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	6a3a      	ldr	r2, [r7, #32]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80071d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80071d6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80071f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	79db      	ldrb	r3, [r3, #7]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d123      	bne.n	8007248 <USB_HC_StartXfer+0x2dc>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	78db      	ldrb	r3, [r3, #3]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11f      	bne.n	8007248 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	4413      	add	r3, r2
 8007210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	0151      	lsls	r1, r2, #5
 800721a:	6a3a      	ldr	r2, [r7, #32]
 800721c:	440a      	add	r2, r1
 800721e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007226:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	6a3a      	ldr	r2, [r7, #32]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007246:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	7c9b      	ldrb	r3, [r3, #18]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d003      	beq.n	8007258 <USB_HC_StartXfer+0x2ec>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	7c9b      	ldrb	r3, [r3, #18]
 8007254:	2b03      	cmp	r3, #3
 8007256:	d117      	bne.n	8007288 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800725c:	2b01      	cmp	r3, #1
 800725e:	d113      	bne.n	8007288 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	78db      	ldrb	r3, [r3, #3]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10f      	bne.n	8007288 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	4413      	add	r3, r2
 8007270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	6a3a      	ldr	r2, [r7, #32]
 800727c:	440a      	add	r2, r1
 800727e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007286:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	7c9b      	ldrb	r3, [r3, #18]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d162      	bne.n	8007356 <USB_HC_StartXfer+0x3ea>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	78db      	ldrb	r3, [r3, #3]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d15e      	bne.n	8007356 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	3b01      	subs	r3, #1
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d858      	bhi.n	8007354 <USB_HC_StartXfer+0x3e8>
 80072a2:	a201      	add	r2, pc, #4	@ (adr r2, 80072a8 <USB_HC_StartXfer+0x33c>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	080072db 	.word	0x080072db
 80072b0:	080072fd 	.word	0x080072fd
 80072b4:	0800731f 	.word	0x0800731f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	6a3a      	ldr	r2, [r7, #32]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072d6:	6053      	str	r3, [r2, #4]
          break;
 80072d8:	e03d      	b.n	8007356 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	69fa      	ldr	r2, [r7, #28]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072f4:	f043 030e 	orr.w	r3, r3, #14
 80072f8:	6053      	str	r3, [r2, #4]
          break;
 80072fa:	e02c      	b.n	8007356 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	6a3a      	ldr	r2, [r7, #32]
 8007310:	440a      	add	r2, r1
 8007312:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800731a:	6053      	str	r3, [r2, #4]
          break;
 800731c:	e01b      	b.n	8007356 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	4413      	add	r3, r2
 8007326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	69fa      	ldr	r2, [r7, #28]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	6a3a      	ldr	r2, [r7, #32]
 8007332:	440a      	add	r2, r1
 8007334:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007338:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800733c:	6053      	str	r3, [r2, #4]
          break;
 800733e:	e00a      	b.n	8007356 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	4413      	add	r3, r2
 8007348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800734c:	461a      	mov	r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	6053      	str	r3, [r2, #4]
 8007352:	e000      	b.n	8007356 <USB_HC_StartXfer+0x3ea>
          break;
 8007354:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	4413      	add	r3, r2
 800735e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800736c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e003      	b.n	8007388 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007386:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800738e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800739c:	461a      	mov	r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e055      	b.n	8007458 <USB_HC_StartXfer+0x4ec>
 80073ac:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	78db      	ldrb	r3, [r3, #3]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d14e      	bne.n	8007456 <USB_HC_StartXfer+0x4ea>
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d04a      	beq.n	8007456 <USB_HC_StartXfer+0x4ea>
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	79db      	ldrb	r3, [r3, #7]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d146      	bne.n	8007456 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	7c9b      	ldrb	r3, [r3, #18]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d831      	bhi.n	8007434 <USB_HC_StartXfer+0x4c8>
 80073d0:	a201      	add	r2, pc, #4	@ (adr r2, 80073d8 <USB_HC_StartXfer+0x46c>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	080073e9 	.word	0x080073e9
 80073dc:	0800740d 	.word	0x0800740d
 80073e0:	080073e9 	.word	0x080073e9
 80073e4:	0800740d 	.word	0x0800740d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	3303      	adds	r3, #3
 80073ee:	089b      	lsrs	r3, r3, #2
 80073f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80073f2:	8afa      	ldrh	r2, [r7, #22]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d91c      	bls.n	8007438 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f043 0220 	orr.w	r2, r3, #32
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	619a      	str	r2, [r3, #24]
        }
        break;
 800740a:	e015      	b.n	8007438 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	3303      	adds	r3, #3
 8007412:	089b      	lsrs	r3, r3, #2
 8007414:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007416:	8afa      	ldrh	r2, [r7, #22]
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	b29b      	uxth	r3, r3
 8007422:	429a      	cmp	r2, r3
 8007424:	d90a      	bls.n	800743c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	619a      	str	r2, [r3, #24]
        }
        break;
 8007432:	e003      	b.n	800743c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007434:	bf00      	nop
 8007436:	e002      	b.n	800743e <USB_HC_StartXfer+0x4d2>
        break;
 8007438:	bf00      	nop
 800743a:	e000      	b.n	800743e <USB_HC_StartXfer+0x4d2>
        break;
 800743c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6999      	ldr	r1, [r3, #24]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	785a      	ldrb	r2, [r3, #1]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	b29b      	uxth	r3, r3
 800744c:	2000      	movs	r0, #0
 800744e:	9000      	str	r0, [sp, #0]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff f9ca 	bl	80067ea <USB_WritePacket>
  }

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3728      	adds	r7, #40	@ 0x28
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	b29b      	uxth	r3, r3
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007482:	b480      	push	{r7}
 8007484:	b089      	sub	sp, #36	@ 0x24
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	0c9b      	lsrs	r3, r3, #18
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	0fdb      	lsrs	r3, r3, #31
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	0fdb      	lsrs	r3, r3, #31
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d10d      	bne.n	8007504 <USB_HC_Halt+0x82>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <USB_HC_Halt+0x82>
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d002      	beq.n	8007500 <USB_HC_Halt+0x7e>
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d101      	bne.n	8007504 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	e0d8      	b.n	80076b6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <USB_HC_Halt+0x8e>
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d173      	bne.n	80075f8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	4413      	add	r3, r2
 8007518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	0151      	lsls	r1, r2, #5
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	440a      	add	r2, r1
 8007526:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800752a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800752e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d14a      	bne.n	80075d2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007540:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d133      	bne.n	80075b0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	440a      	add	r2, r1
 800755e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007562:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007566:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	440a      	add	r2, r1
 800757e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007582:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007586:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3301      	adds	r3, #1
 800758c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007594:	d82e      	bhi.n	80075f4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075ac:	d0ec      	beq.n	8007588 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075ae:	e081      	b.n	80076b4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075ce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075d0:	e070      	b.n	80076b4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	0151      	lsls	r1, r2, #5
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	440a      	add	r2, r1
 80075e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075f2:	e05f      	b.n	80076b4 <USB_HC_Halt+0x232>
            break;
 80075f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075f6:	e05d      	b.n	80076b4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	440a      	add	r2, r1
 800760e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007612:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007616:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d133      	bne.n	8007690 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	4413      	add	r3, r2
 8007630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	440a      	add	r2, r1
 800763e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007642:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007646:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	0151      	lsls	r1, r2, #5
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	440a      	add	r2, r1
 800765e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007666:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3301      	adds	r3, #1
 800766c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007674:	d81d      	bhi.n	80076b2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800768c:	d0ec      	beq.n	8007668 <USB_HC_Halt+0x1e6>
 800768e:	e011      	b.n	80076b4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	e000      	b.n	80076b4 <USB_HC_Halt+0x232>
          break;
 80076b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3724      	adds	r7, #36	@ 0x24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80076d8:	2301      	movs	r3, #1
 80076da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	04da      	lsls	r2, r3, #19
 80076e0:	4b15      	ldr	r3, [pc, #84]	@ (8007738 <USB_DoPing+0x74>)
 80076e2:	4013      	ands	r3, r2
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800770c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007714:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	4413      	add	r3, r2
 800771e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007722:	461a      	mov	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	1ff80000 	.word	0x1ff80000

0800773c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fe ff8d 	bl	8006670 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007756:	2110      	movs	r1, #16
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fe ffe6 	bl	800672a <USB_FlushTxFifo>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff f810 	bl	800678e <USB_FlushRxFifo>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007778:	2300      	movs	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
 800777c:	e01f      	b.n	80077be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	4413      	add	r3, r2
 8007786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007794:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800779c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b2:	461a      	mov	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	3301      	adds	r3, #1
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b0f      	cmp	r3, #15
 80077c2:	d9dc      	bls.n	800777e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80077c4:	2300      	movs	r3, #0
 80077c6:	61bb      	str	r3, [r7, #24]
 80077c8:	e034      	b.n	8007834 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077fe:	461a      	mov	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007810:	d80c      	bhi.n	800782c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	4413      	add	r3, r2
 800781a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007828:	d0ec      	beq.n	8007804 <USB_StopHost+0xc8>
 800782a:	e000      	b.n	800782e <USB_StopHost+0xf2>
        break;
 800782c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	3301      	adds	r3, #1
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b0f      	cmp	r3, #15
 8007838:	d9c7      	bls.n	80077ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007840:	461a      	mov	r2, r3
 8007842:	f04f 33ff 	mov.w	r3, #4294967295
 8007846:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f04f 32ff 	mov.w	r2, #4294967295
 800784e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7fe fefc 	bl	800664e <USB_EnableGlobalInt>

  return ret;
 8007856:	7ffb      	ldrb	r3, [r7, #31]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007860:	b590      	push	{r4, r7, lr}
 8007862:	b089      	sub	sp, #36	@ 0x24
 8007864:	af04      	add	r7, sp, #16
 8007866:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007868:	2301      	movs	r3, #1
 800786a:	2202      	movs	r2, #2
 800786c:	2102      	movs	r1, #2
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fc85 	bl	800817e <USBH_FindInterface>
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	2bff      	cmp	r3, #255	@ 0xff
 800787c:	d002      	beq.n	8007884 <USBH_CDC_InterfaceInit+0x24>
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d901      	bls.n	8007888 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007884:	2302      	movs	r3, #2
 8007886:	e13d      	b.n	8007b04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fc5a 	bl	8008146 <USBH_SelectInterface>
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800789c:	2302      	movs	r3, #2
 800789e:	e131      	b.n	8007b04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80078a6:	2050      	movs	r0, #80	@ 0x50
 80078a8:	f002 fb64 	bl	8009f74 <malloc>
 80078ac:	4603      	mov	r3, r0
 80078ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80078c0:	2302      	movs	r3, #2
 80078c2:	e11f      	b.n	8007b04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80078c4:	2250      	movs	r2, #80	@ 0x50
 80078c6:	2100      	movs	r1, #0
 80078c8:	68b8      	ldr	r0, [r7, #8]
 80078ca:	f002 fc11 	bl	800a0f0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	211a      	movs	r1, #26
 80078d4:	fb01 f303 	mul.w	r3, r1, r3
 80078d8:	4413      	add	r3, r2
 80078da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da15      	bge.n	8007912 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	211a      	movs	r1, #26
 80078ec:	fb01 f303 	mul.w	r3, r1, r3
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80078f6:	781a      	ldrb	r2, [r3, #0]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	211a      	movs	r1, #26
 8007902:	fb01 f303 	mul.w	r3, r1, r3
 8007906:	4413      	add	r3, r2
 8007908:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800790c:	881a      	ldrh	r2, [r3, #0]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 ffbe 	bl	800989a <USBH_AllocPipe>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	7819      	ldrb	r1, [r3, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	7858      	ldrb	r0, [r3, #1]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	8952      	ldrh	r2, [r2, #10]
 800793e:	9202      	str	r2, [sp, #8]
 8007940:	2203      	movs	r2, #3
 8007942:	9201      	str	r2, [sp, #4]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	4623      	mov	r3, r4
 8007948:	4602      	mov	r2, r0
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 ff76 	bl	800983c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2200      	movs	r2, #0
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f002 fa85 	bl	8009e68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800795e:	2300      	movs	r3, #0
 8007960:	2200      	movs	r2, #0
 8007962:	210a      	movs	r1, #10
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc0a 	bl	800817e <USBH_FindInterface>
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	2bff      	cmp	r3, #255	@ 0xff
 8007972:	d002      	beq.n	800797a <USBH_CDC_InterfaceInit+0x11a>
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d901      	bls.n	800797e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800797a:	2302      	movs	r3, #2
 800797c:	e0c2      	b.n	8007b04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	211a      	movs	r1, #26
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	4413      	add	r3, r2
 800798a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	b25b      	sxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	da16      	bge.n	80079c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	211a      	movs	r1, #26
 800799c:	fb01 f303 	mul.w	r3, r1, r3
 80079a0:	4413      	add	r3, r2
 80079a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	211a      	movs	r1, #26
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	835a      	strh	r2, [r3, #26]
 80079c2:	e015      	b.n	80079f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	211a      	movs	r1, #26
 80079ca:	fb01 f303 	mul.w	r3, r1, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	211a      	movs	r1, #26
 80079e0:	fb01 f303 	mul.w	r3, r1, r3
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	211a      	movs	r1, #26
 80079f6:	fb01 f303 	mul.w	r3, r1, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	b25b      	sxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da16      	bge.n	8007a36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	211a      	movs	r1, #26
 8007a0e:	fb01 f303 	mul.w	r3, r1, r3
 8007a12:	4413      	add	r3, r2
 8007a14:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	211a      	movs	r1, #26
 8007a24:	fb01 f303 	mul.w	r3, r1, r3
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007a2e:	881a      	ldrh	r2, [r3, #0]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	835a      	strh	r2, [r3, #26]
 8007a34:	e015      	b.n	8007a62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	211a      	movs	r1, #26
 8007a3c:	fb01 f303 	mul.w	r3, r1, r3
 8007a40:	4413      	add	r3, r2
 8007a42:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007a46:	781a      	ldrb	r2, [r3, #0]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	211a      	movs	r1, #26
 8007a52:	fb01 f303 	mul.w	r3, r1, r3
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007a5c:	881a      	ldrh	r2, [r3, #0]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	7b9b      	ldrb	r3, [r3, #14]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 ff16 	bl	800989a <USBH_AllocPipe>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	461a      	mov	r2, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	7bdb      	ldrb	r3, [r3, #15]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 ff0c 	bl	800989a <USBH_AllocPipe>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	7b59      	ldrb	r1, [r3, #13]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	7b98      	ldrb	r0, [r3, #14]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	8b12      	ldrh	r2, [r2, #24]
 8007aa2:	9202      	str	r2, [sp, #8]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	9201      	str	r2, [sp, #4]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4623      	mov	r3, r4
 8007aac:	4602      	mov	r2, r0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fec4 	bl	800983c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	7b19      	ldrb	r1, [r3, #12]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	7bd8      	ldrb	r0, [r3, #15]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	8b52      	ldrh	r2, [r2, #26]
 8007acc:	9202      	str	r2, [sp, #8]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	9201      	str	r2, [sp, #4]
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	4623      	mov	r3, r4
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 feaf 	bl	800983c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	7b5b      	ldrb	r3, [r3, #13]
 8007aea:	2200      	movs	r2, #0
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f002 f9ba 	bl	8009e68 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	7b1b      	ldrb	r3, [r3, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f002 f9b3 	bl	8009e68 <USBH_LL_SetToggle>

  return USBH_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd90      	pop	{r4, r7, pc}

08007b0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00e      	beq.n	8007b44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 fea4 	bl	800987a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 fecf 	bl	80098dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	7b1b      	ldrb	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00e      	beq.n	8007b6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	7b1b      	ldrb	r3, [r3, #12]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fe91 	bl	800987a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	7b1b      	ldrb	r3, [r3, #12]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 febc 	bl	80098dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	7b5b      	ldrb	r3, [r3, #13]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00e      	beq.n	8007b90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	7b5b      	ldrb	r3, [r3, #13]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fe7e 	bl	800987a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	7b5b      	ldrb	r3, [r3, #13]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 fea9 	bl	80098dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f002 f9ed 	bl	8009f84 <free>
    phost->pActiveClass->pData = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3340      	adds	r3, #64	@ 0x40
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f8b1 	bl	8007d3e <GetLineCoding>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d105      	bne.n	8007bf2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007bec:	2102      	movs	r1, #2
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d877      	bhi.n	8007d10 <USBH_CDC_Process+0x114>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <USBH_CDC_Process+0x2c>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c3d 	.word	0x08007c3d
 8007c2c:	08007c43 	.word	0x08007c43
 8007c30:	08007c73 	.word	0x08007c73
 8007c34:	08007ce7 	.word	0x08007ce7
 8007c38:	08007cf5 	.word	0x08007cf5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c40:	e06d      	b.n	8007d1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f897 	bl	8007d7c <SetLineCoding>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c60:	e058      	b.n	8007d14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d055      	beq.n	8007d14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2204      	movs	r2, #4
 8007c6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007c70:	e050      	b.n	8007d14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	3340      	adds	r3, #64	@ 0x40
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f860 	bl	8007d3e <GetLineCoding>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d126      	bne.n	8007cd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9a:	791b      	ldrb	r3, [r3, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d13b      	bne.n	8007d18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007caa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d133      	bne.n	8007d18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d12b      	bne.n	8007d18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d124      	bne.n	8007d18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f958 	bl	8007f84 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007cd4:	e020      	b.n	8007d18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d01d      	beq.n	8007d18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2204      	movs	r2, #4
 8007ce0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007ce4:	e018      	b.n	8007d18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f867 	bl	8007dba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f8da 	bl	8007ea6 <CDC_ProcessReception>
      break;
 8007cf2:	e014      	b.n	8007d1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 f81a 	bl	8008d30 <USBH_ClrFeature>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007d0e:	e005      	b.n	8007d1c <USBH_CDC_Process+0x120>

    default:
      break;
 8007d10:	bf00      	nop
 8007d12:	e004      	b.n	8007d1e <USBH_CDC_Process+0x122>
      break;
 8007d14:	bf00      	nop
 8007d16:	e002      	b.n	8007d1e <USBH_CDC_Process+0x122>
      break;
 8007d18:	bf00      	nop
 8007d1a:	e000      	b.n	8007d1e <USBH_CDC_Process+0x122>
      break;
 8007d1c:	bf00      	nop

  }

  return status;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	22a1      	movs	r2, #161	@ 0xa1
 8007d4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2221      	movs	r2, #33	@ 0x21
 8007d52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2207      	movs	r2, #7
 8007d64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2207      	movs	r2, #7
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 fb14 	bl	800939a <USBH_CtlReq>
 8007d72:	4603      	mov	r3, r0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2221      	movs	r2, #33	@ 0x21
 8007d8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2207      	movs	r2, #7
 8007da2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2207      	movs	r2, #7
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 faf5 	bl	800939a <USBH_CtlReq>
 8007db0:	4603      	mov	r3, r0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af02      	add	r7, sp, #8
 8007dc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d002      	beq.n	8007de0 <CDC_ProcessTransmission+0x26>
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d023      	beq.n	8007e26 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007dde:	e05e      	b.n	8007e9e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	8b12      	ldrh	r2, [r2, #24]
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d90b      	bls.n	8007e04 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	69d9      	ldr	r1, [r3, #28]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8b1a      	ldrh	r2, [r3, #24]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	7b5b      	ldrb	r3, [r3, #13]
 8007df8:	2001      	movs	r0, #1
 8007dfa:	9000      	str	r0, [sp, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fcda 	bl	80097b6 <USBH_BulkSendData>
 8007e02:	e00b      	b.n	8007e1c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	7b5b      	ldrb	r3, [r3, #13]
 8007e12:	2001      	movs	r0, #1
 8007e14:	9000      	str	r0, [sp, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fccd 	bl	80097b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007e24:	e03b      	b.n	8007e9e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	7b5b      	ldrb	r3, [r3, #13]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 fff1 	bl	8009e14 <USBH_LL_GetURBState>
 8007e32:	4603      	mov	r3, r0
 8007e34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d128      	bne.n	8007e8e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	8b12      	ldrh	r2, [r2, #24]
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d90e      	bls.n	8007e66 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	8b12      	ldrh	r2, [r2, #24]
 8007e50:	1a9a      	subs	r2, r3, r2
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	8b12      	ldrh	r2, [r2, #24]
 8007e5e:	441a      	add	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	61da      	str	r2, [r3, #28]
 8007e64:	e002      	b.n	8007e6c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007e7c:	e00e      	b.n	8007e9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f868 	bl	8007f5c <USBH_CDC_TransmitCallback>
      break;
 8007e8c:	e006      	b.n	8007e9c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007e8e:	7afb      	ldrb	r3, [r7, #11]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d103      	bne.n	8007e9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007e9c:	bf00      	nop
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b086      	sub	sp, #24
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d002      	beq.n	8007ecc <CDC_ProcessReception+0x26>
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d00e      	beq.n	8007ee8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007eca:	e043      	b.n	8007f54 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	6a19      	ldr	r1, [r3, #32]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	8b5a      	ldrh	r2, [r3, #26]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	7b1b      	ldrb	r3, [r3, #12]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fc91 	bl	8009800 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007ee6:	e035      	b.n	8007f54 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	7b1b      	ldrb	r3, [r3, #12]
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 ff90 	bl	8009e14 <USBH_LL_GetURBState>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ef8:	7cfb      	ldrb	r3, [r7, #19]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d129      	bne.n	8007f52 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	7b1b      	ldrb	r3, [r3, #12]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 fef3 	bl	8009cf0 <USBH_LL_GetLastXferSize>
 8007f0a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d016      	beq.n	8007f44 <CDC_ProcessReception+0x9e>
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	8b5b      	ldrh	r3, [r3, #26]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d110      	bne.n	8007f44 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	6a1a      	ldr	r2, [r3, #32]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	441a      	add	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2203      	movs	r2, #3
 8007f3e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007f42:	e006      	b.n	8007f52 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f80f 	bl	8007f70 <USBH_CDC_ReceiveCallback>
      break;
 8007f52:	bf00      	nop
  }
}
 8007f54:	bf00      	nop
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007fac:	2302      	movs	r3, #2
 8007fae:	e029      	b.n	8008004 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	79fa      	ldrb	r2, [r7, #7]
 8007fb4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f81f 	bl	800800c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f001 fdc3 	bl	8009b88 <USBH_LL_Init>

  return USBH_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	e009      	b.n	8008032 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	33e0      	adds	r3, #224	@ 0xe0
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	2200      	movs	r2, #0
 800802a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b0f      	cmp	r3, #15
 8008036:	d9f2      	bls.n	800801e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e009      	b.n	8008052 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008048:	2200      	movs	r2, #0
 800804a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3301      	adds	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008058:	d3f1      	bcc.n	800803e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2240      	movs	r2, #64	@ 0x40
 800807e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	331c      	adds	r3, #28
 80080aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080ae:	2100      	movs	r1, #0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f002 f81d 	bl	800a0f0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080c0:	2100      	movs	r1, #0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f002 f814 	bl	800a0f0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80080ce:	2212      	movs	r2, #18
 80080d0:	2100      	movs	r1, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f002 f80c 	bl	800a0f0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80080de:	223e      	movs	r2, #62	@ 0x3e
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f002 f804 	bl	800a0f0 <memset>

  return USBH_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b085      	sub	sp, #20
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d016      	beq.n	8008134 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10e      	bne.n	800812e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008116:	1c59      	adds	r1, r3, #1
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	33de      	adds	r3, #222	@ 0xde
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
 800812c:	e004      	b.n	8008138 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800812e:	2302      	movs	r3, #2
 8008130:	73fb      	strb	r3, [r7, #15]
 8008132:	e001      	b.n	8008138 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008134:	2302      	movs	r3, #2
 8008136:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	429a      	cmp	r2, r3
 8008160:	d204      	bcs.n	800816c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	78fa      	ldrb	r2, [r7, #3]
 8008166:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800816a:	e001      	b.n	8008170 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800816c:	2302      	movs	r3, #2
 800816e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008170:	7bfb      	ldrb	r3, [r7, #15]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800817e:	b480      	push	{r7}
 8008180:	b087      	sub	sp, #28
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	4608      	mov	r0, r1
 8008188:	4611      	mov	r1, r2
 800818a:	461a      	mov	r2, r3
 800818c:	4603      	mov	r3, r0
 800818e:	70fb      	strb	r3, [r7, #3]
 8008190:	460b      	mov	r3, r1
 8008192:	70bb      	strb	r3, [r7, #2]
 8008194:	4613      	mov	r3, r2
 8008196:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800819c:	2300      	movs	r3, #0
 800819e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80081a6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80081a8:	e025      	b.n	80081f6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	221a      	movs	r2, #26
 80081ae:	fb02 f303 	mul.w	r3, r2, r3
 80081b2:	3308      	adds	r3, #8
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	3302      	adds	r3, #2
 80081ba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	795b      	ldrb	r3, [r3, #5]
 80081c0:	78fa      	ldrb	r2, [r7, #3]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d002      	beq.n	80081cc <USBH_FindInterface+0x4e>
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	2bff      	cmp	r3, #255	@ 0xff
 80081ca:	d111      	bne.n	80081f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80081d0:	78ba      	ldrb	r2, [r7, #2]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d002      	beq.n	80081dc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80081d6:	78bb      	ldrb	r3, [r7, #2]
 80081d8:	2bff      	cmp	r3, #255	@ 0xff
 80081da:	d109      	bne.n	80081f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80081e0:	787a      	ldrb	r2, [r7, #1]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d002      	beq.n	80081ec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80081e6:	787b      	ldrb	r3, [r7, #1]
 80081e8:	2bff      	cmp	r3, #255	@ 0xff
 80081ea:	d101      	bne.n	80081f0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	e006      	b.n	80081fe <USBH_FindInterface+0x80>
    }
    if_ix++;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	3301      	adds	r3, #1
 80081f4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d9d6      	bls.n	80081aa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80081fc:	23ff      	movs	r3, #255	@ 0xff
}
 80081fe:	4618      	mov	r0, r3
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fcf4 	bl	8009c00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008218:	2101      	movs	r1, #1
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fe0d 	bl	8009e3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af04      	add	r7, sp, #16
 8008232:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b01      	cmp	r3, #1
 8008246:	d102      	bne.n	800824e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2203      	movs	r2, #3
 800824c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b0b      	cmp	r3, #11
 8008256:	f200 81bb 	bhi.w	80085d0 <USBH_Process+0x3a4>
 800825a:	a201      	add	r2, pc, #4	@ (adr r2, 8008260 <USBH_Process+0x34>)
 800825c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008260:	08008291 	.word	0x08008291
 8008264:	080082c3 	.word	0x080082c3
 8008268:	0800832b 	.word	0x0800832b
 800826c:	0800856b 	.word	0x0800856b
 8008270:	080085d1 	.word	0x080085d1
 8008274:	080083cb 	.word	0x080083cb
 8008278:	08008511 	.word	0x08008511
 800827c:	08008401 	.word	0x08008401
 8008280:	08008421 	.word	0x08008421
 8008284:	0800843f 	.word	0x0800843f
 8008288:	08008483 	.word	0x08008483
 800828c:	08008553 	.word	0x08008553
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 819b 	beq.w	80085d4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80082a4:	20c8      	movs	r0, #200	@ 0xc8
 80082a6:	f001 fe12 	bl	8009ece <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 fd05 	bl	8009cba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082c0:	e188      	b.n	80085d4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d107      	bne.n	80082dc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082da:	e18a      	b.n	80085f2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80082e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082e6:	d914      	bls.n	8008312 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80082ee:	3301      	adds	r3, #1
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d903      	bls.n	800830a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	220d      	movs	r2, #13
 8008306:	701a      	strb	r2, [r3, #0]
      break;
 8008308:	e173      	b.n	80085f2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
      break;
 8008310:	e16f      	b.n	80085f2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008318:	f103 020a 	add.w	r2, r3, #10
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008322:	200a      	movs	r0, #10
 8008324:	f001 fdd3 	bl	8009ece <USBH_Delay>
      break;
 8008328:	e163      	b.n	80085f2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800833a:	2104      	movs	r1, #4
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008340:	2064      	movs	r0, #100	@ 0x64
 8008342:	f001 fdc4 	bl	8009ece <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fc90 	bl	8009c6c <USBH_LL_GetSpeed>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2205      	movs	r2, #5
 800835a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800835c:	2100      	movs	r1, #0
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fa9b 	bl	800989a <USBH_AllocPipe>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800836c:	2180      	movs	r1, #128	@ 0x80
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f001 fa93 	bl	800989a <USBH_AllocPipe>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7919      	ldrb	r1, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008390:	9202      	str	r2, [sp, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	9201      	str	r2, [sp, #4]
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	4603      	mov	r3, r0
 800839a:	2280      	movs	r2, #128	@ 0x80
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 fa4d 	bl	800983c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7959      	ldrb	r1, [r3, #5]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083b6:	9202      	str	r2, [sp, #8]
 80083b8:	2200      	movs	r2, #0
 80083ba:	9201      	str	r2, [sp, #4]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4603      	mov	r3, r0
 80083c0:	2200      	movs	r2, #0
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 fa3a 	bl	800983c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083c8:	e113      	b.n	80085f2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f916 	bl	80085fc <USBH_HandleEnum>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 80fd 	bne.w	80085d8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d103      	bne.n	80083f8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2208      	movs	r2, #8
 80083f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083f6:	e0ef      	b.n	80085d8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2207      	movs	r2, #7
 80083fc:	701a      	strb	r2, [r3, #0]
      break;
 80083fe:	e0eb      	b.n	80085d8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80e8 	beq.w	80085dc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008412:	2101      	movs	r1, #1
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2208      	movs	r2, #8
 800841c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800841e:	e0dd      	b.n	80085dc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fc3a 	bl	8008ca2 <USBH_SetCfg>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 80d5 	bne.w	80085e0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2209      	movs	r2, #9
 800843a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800843c:	e0d0      	b.n	80085e0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b00      	cmp	r3, #0
 800844a:	d016      	beq.n	800847a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800844c:	2101      	movs	r1, #1
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fc4a 	bl	8008ce8 <USBH_SetFeature>
 8008454:	4603      	mov	r3, r0
 8008456:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d103      	bne.n	8008468 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	220a      	movs	r2, #10
 8008464:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008466:	e0bd      	b.n	80085e4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b03      	cmp	r3, #3
 800846e:	f040 80b9 	bne.w	80085e4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	220a      	movs	r2, #10
 8008476:	701a      	strb	r2, [r3, #0]
      break;
 8008478:	e0b4      	b.n	80085e4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	220a      	movs	r2, #10
 800847e:	701a      	strb	r2, [r3, #0]
      break;
 8008480:	e0b0      	b.n	80085e4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 80ad 	beq.w	80085e8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
 800849a:	e016      	b.n	80084ca <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	32de      	adds	r2, #222	@ 0xde
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	791a      	ldrb	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d108      	bne.n	80084c4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80084b2:	7bfa      	ldrb	r2, [r7, #15]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	32de      	adds	r2, #222	@ 0xde
 80084b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80084c2:	e005      	b.n	80084d0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	3301      	adds	r3, #1
 80084c8:	73fb      	strb	r3, [r7, #15]
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0e5      	beq.n	800849c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d016      	beq.n	8008508 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	4798      	blx	r3
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d109      	bne.n	8008500 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2206      	movs	r2, #6
 80084f0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084f8:	2103      	movs	r1, #3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084fe:	e073      	b.n	80085e8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	220d      	movs	r2, #13
 8008504:	701a      	strb	r2, [r3, #0]
      break;
 8008506:	e06f      	b.n	80085e8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	220d      	movs	r2, #13
 800850c:	701a      	strb	r2, [r3, #0]
      break;
 800850e:	e06b      	b.n	80085e8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d017      	beq.n	800854a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
 8008526:	4603      	mov	r3, r0
 8008528:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	220b      	movs	r2, #11
 8008536:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008538:	e058      	b.n	80085ec <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d154      	bne.n	80085ec <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	220d      	movs	r2, #13
 8008546:	701a      	strb	r2, [r3, #0]
      break;
 8008548:	e050      	b.n	80085ec <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	220d      	movs	r2, #13
 800854e:	701a      	strb	r2, [r3, #0]
      break;
 8008550:	e04c      	b.n	80085ec <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d049      	beq.n	80085f0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	4798      	blx	r3
      }
      break;
 8008568:	e042      	b.n	80085f0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7ff fd4a 	bl	800800c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085a6:	2105      	movs	r1, #5
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d107      	bne.n	80085c8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fe22 	bl	800820a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085c6:	e014      	b.n	80085f2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fb19 	bl	8009c00 <USBH_LL_Start>
      break;
 80085ce:	e010      	b.n	80085f2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80085d0:	bf00      	nop
 80085d2:	e00e      	b.n	80085f2 <USBH_Process+0x3c6>
      break;
 80085d4:	bf00      	nop
 80085d6:	e00c      	b.n	80085f2 <USBH_Process+0x3c6>
      break;
 80085d8:	bf00      	nop
 80085da:	e00a      	b.n	80085f2 <USBH_Process+0x3c6>
    break;
 80085dc:	bf00      	nop
 80085de:	e008      	b.n	80085f2 <USBH_Process+0x3c6>
      break;
 80085e0:	bf00      	nop
 80085e2:	e006      	b.n	80085f2 <USBH_Process+0x3c6>
      break;
 80085e4:	bf00      	nop
 80085e6:	e004      	b.n	80085f2 <USBH_Process+0x3c6>
      break;
 80085e8:	bf00      	nop
 80085ea:	e002      	b.n	80085f2 <USBH_Process+0x3c6>
      break;
 80085ec:	bf00      	nop
 80085ee:	e000      	b.n	80085f2 <USBH_Process+0x3c6>
      break;
 80085f0:	bf00      	nop
  }
  return USBH_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af04      	add	r7, sp, #16
 8008602:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008604:	2301      	movs	r3, #1
 8008606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008608:	2301      	movs	r3, #1
 800860a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	2b07      	cmp	r3, #7
 8008612:	f200 81bd 	bhi.w	8008990 <USBH_HandleEnum+0x394>
 8008616:	a201      	add	r2, pc, #4	@ (adr r2, 800861c <USBH_HandleEnum+0x20>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	0800863d 	.word	0x0800863d
 8008620:	080086f7 	.word	0x080086f7
 8008624:	08008761 	.word	0x08008761
 8008628:	080087eb 	.word	0x080087eb
 800862c:	08008855 	.word	0x08008855
 8008630:	080088c5 	.word	0x080088c5
 8008634:	0800890b 	.word	0x0800890b
 8008638:	08008951 	.word	0x08008951
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800863c:	2108      	movs	r1, #8
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa4c 	bl	8008adc <USBH_Get_DevDesc>
 8008644:	4603      	mov	r3, r0
 8008646:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d12e      	bne.n	80086ac <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7919      	ldrb	r1, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008672:	9202      	str	r2, [sp, #8]
 8008674:	2200      	movs	r2, #0
 8008676:	9201      	str	r2, [sp, #4]
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	4603      	mov	r3, r0
 800867c:	2280      	movs	r2, #128	@ 0x80
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 f8dc 	bl	800983c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7959      	ldrb	r1, [r3, #5]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008698:	9202      	str	r2, [sp, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	9201      	str	r2, [sp, #4]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4603      	mov	r3, r0
 80086a2:	2200      	movs	r2, #0
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 f8c9 	bl	800983c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086aa:	e173      	b.n	8008994 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f040 8170 	bne.w	8008994 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80086ba:	3301      	adds	r3, #1
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d903      	bls.n	80086d6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	220d      	movs	r2, #13
 80086d2:	701a      	strb	r2, [r3, #0]
      break;
 80086d4:	e15e      	b.n	8008994 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	795b      	ldrb	r3, [r3, #5]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 f8fd 	bl	80098dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 f8f7 	bl	80098dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	701a      	strb	r2, [r3, #0]
      break;
 80086f4:	e14e      	b.n	8008994 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80086f6:	2112      	movs	r1, #18
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9ef 	bl	8008adc <USBH_Get_DevDesc>
 80086fe:	4603      	mov	r3, r0
 8008700:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d103      	bne.n	8008710 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800870e:	e143      	b.n	8008998 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b03      	cmp	r3, #3
 8008714:	f040 8140 	bne.w	8008998 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800871e:	3301      	adds	r3, #1
 8008720:	b2da      	uxtb	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800872e:	2b03      	cmp	r3, #3
 8008730:	d903      	bls.n	800873a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	220d      	movs	r2, #13
 8008736:	701a      	strb	r2, [r3, #0]
      break;
 8008738:	e12e      	b.n	8008998 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	795b      	ldrb	r3, [r3, #5]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 f8cb 	bl	80098dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	791b      	ldrb	r3, [r3, #4]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 f8c5 	bl	80098dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	701a      	strb	r2, [r3, #0]
      break;
 800875e:	e11b      	b.n	8008998 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008760:	2101      	movs	r1, #1
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa79 	bl	8008c5a <USBH_SetAddress>
 8008768:	4603      	mov	r3, r0
 800876a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d130      	bne.n	80087d4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008772:	2002      	movs	r0, #2
 8008774:	f001 fbab 	bl	8009ece <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2203      	movs	r2, #3
 8008784:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	7919      	ldrb	r1, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800879a:	9202      	str	r2, [sp, #8]
 800879c:	2200      	movs	r2, #0
 800879e:	9201      	str	r2, [sp, #4]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	4603      	mov	r3, r0
 80087a4:	2280      	movs	r2, #128	@ 0x80
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 f848 	bl	800983c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	7959      	ldrb	r1, [r3, #5]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087c0:	9202      	str	r2, [sp, #8]
 80087c2:	2200      	movs	r2, #0
 80087c4:	9201      	str	r2, [sp, #4]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	4603      	mov	r3, r0
 80087ca:	2200      	movs	r2, #0
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f835 	bl	800983c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80087d2:	e0e3      	b.n	800899c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	f040 80e0 	bne.w	800899c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	220d      	movs	r2, #13
 80087e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	705a      	strb	r2, [r3, #1]
      break;
 80087e8:	e0d8      	b.n	800899c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80087ea:	2109      	movs	r1, #9
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f9a1 	bl	8008b34 <USBH_Get_CfgDesc>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2204      	movs	r2, #4
 8008800:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008802:	e0cd      	b.n	80089a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b03      	cmp	r3, #3
 8008808:	f040 80ca 	bne.w	80089a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008812:	3301      	adds	r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008822:	2b03      	cmp	r3, #3
 8008824:	d903      	bls.n	800882e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	220d      	movs	r2, #13
 800882a:	701a      	strb	r2, [r3, #0]
      break;
 800882c:	e0b8      	b.n	80089a0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	795b      	ldrb	r3, [r3, #5]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 f851 	bl	80098dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 f84b 	bl	80098dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
      break;
 8008852:	e0a5      	b.n	80089a0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f969 	bl	8008b34 <USBH_Get_CfgDesc>
 8008862:	4603      	mov	r3, r0
 8008864:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2205      	movs	r2, #5
 8008870:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008872:	e097      	b.n	80089a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b03      	cmp	r3, #3
 8008878:	f040 8094 	bne.w	80089a4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008882:	3301      	adds	r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008892:	2b03      	cmp	r3, #3
 8008894:	d903      	bls.n	800889e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	220d      	movs	r2, #13
 800889a:	701a      	strb	r2, [r3, #0]
      break;
 800889c:	e082      	b.n	80089a4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	795b      	ldrb	r3, [r3, #5]
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 f819 	bl	80098dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	791b      	ldrb	r3, [r3, #4]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 f813 	bl	80098dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
      break;
 80088c2:	e06f      	b.n	80089a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d019      	beq.n	8008902 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80088da:	23ff      	movs	r3, #255	@ 0xff
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f953 	bl	8008b88 <USBH_Get_StringDesc>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d103      	bne.n	80088f4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2206      	movs	r2, #6
 80088f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80088f2:	e059      	b.n	80089a8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d156      	bne.n	80089a8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2206      	movs	r2, #6
 80088fe:	705a      	strb	r2, [r3, #1]
      break;
 8008900:	e052      	b.n	80089a8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2206      	movs	r2, #6
 8008906:	705a      	strb	r2, [r3, #1]
      break;
 8008908:	e04e      	b.n	80089a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008910:	2b00      	cmp	r3, #0
 8008912:	d019      	beq.n	8008948 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008920:	23ff      	movs	r3, #255	@ 0xff
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f930 	bl	8008b88 <USBH_Get_StringDesc>
 8008928:	4603      	mov	r3, r0
 800892a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d103      	bne.n	800893a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2207      	movs	r2, #7
 8008936:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008938:	e038      	b.n	80089ac <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b03      	cmp	r3, #3
 800893e:	d135      	bne.n	80089ac <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2207      	movs	r2, #7
 8008944:	705a      	strb	r2, [r3, #1]
      break;
 8008946:	e031      	b.n	80089ac <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2207      	movs	r2, #7
 800894c:	705a      	strb	r2, [r3, #1]
      break;
 800894e:	e02d      	b.n	80089ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008956:	2b00      	cmp	r3, #0
 8008958:	d017      	beq.n	800898a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008966:	23ff      	movs	r3, #255	@ 0xff
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f90d 	bl	8008b88 <USBH_Get_StringDesc>
 800896e:	4603      	mov	r3, r0
 8008970:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800897c:	e018      	b.n	80089b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b03      	cmp	r3, #3
 8008982:	d115      	bne.n	80089b0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
      break;
 8008988:	e012      	b.n	80089b0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
      break;
 800898e:	e00f      	b.n	80089b0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008990:	bf00      	nop
 8008992:	e00e      	b.n	80089b2 <USBH_HandleEnum+0x3b6>
      break;
 8008994:	bf00      	nop
 8008996:	e00c      	b.n	80089b2 <USBH_HandleEnum+0x3b6>
      break;
 8008998:	bf00      	nop
 800899a:	e00a      	b.n	80089b2 <USBH_HandleEnum+0x3b6>
      break;
 800899c:	bf00      	nop
 800899e:	e008      	b.n	80089b2 <USBH_HandleEnum+0x3b6>
      break;
 80089a0:	bf00      	nop
 80089a2:	e006      	b.n	80089b2 <USBH_HandleEnum+0x3b6>
      break;
 80089a4:	bf00      	nop
 80089a6:	e004      	b.n	80089b2 <USBH_HandleEnum+0x3b6>
      break;
 80089a8:	bf00      	nop
 80089aa:	e002      	b.n	80089b2 <USBH_HandleEnum+0x3b6>
      break;
 80089ac:	bf00      	nop
 80089ae:	e000      	b.n	80089b2 <USBH_HandleEnum+0x3b6>
      break;
 80089b0:	bf00      	nop
  }
  return Status;
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f804 	bl	80089fe <USBH_HandleSof>
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b0b      	cmp	r3, #11
 8008a0e:	d10a      	bne.n	8008a26 <USBH_HandleSof+0x28>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	4798      	blx	r3
  }
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008a3e:	bf00      	nop
}
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008a5a:	bf00      	nop
}
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 f8be 	bl	8009c36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	791b      	ldrb	r3, [r3, #4]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 ff0b 	bl	80098dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	795b      	ldrb	r3, [r3, #5]
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 ff05 	bl	80098dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008ae8:	887b      	ldrh	r3, [r7, #2]
 8008aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aee:	d901      	bls.n	8008af4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e01b      	b.n	8008b2c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008afa:	887b      	ldrh	r3, [r7, #2]
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	4613      	mov	r3, r2
 8008b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b04:	2100      	movs	r1, #0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f872 	bl	8008bf0 <USBH_GetDescriptor>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b1c:	887a      	ldrh	r2, [r7, #2]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f929 	bl	8008d78 <USBH_ParseDevDesc>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af02      	add	r7, sp, #8
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	331c      	adds	r3, #28
 8008b44:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008b46:	887b      	ldrh	r3, [r7, #2]
 8008b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b4c:	d901      	bls.n	8008b52 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e016      	b.n	8008b80 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008b52:	887b      	ldrh	r3, [r7, #2]
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f846 	bl	8008bf0 <USBH_GetDescriptor>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d107      	bne.n	8008b7e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008b6e:	887b      	ldrh	r3, [r7, #2]
 8008b70:	461a      	mov	r2, r3
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f9af 	bl	8008ed8 <USBH_ParseCfgDesc>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	461a      	mov	r2, r3
 8008b94:	460b      	mov	r3, r1
 8008b96:	72fb      	strb	r3, [r7, #11]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008b9c:	893b      	ldrh	r3, [r7, #8]
 8008b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ba2:	d802      	bhi.n	8008baa <USBH_Get_StringDesc+0x22>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e01c      	b.n	8008be8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008bae:	7afb      	ldrb	r3, [r7, #11]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008bb6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008bbe:	893b      	ldrh	r3, [r7, #8]
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 f812 	bl	8008bf0 <USBH_GetDescriptor>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d107      	bne.n	8008be6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008bdc:	893a      	ldrh	r2, [r7, #8]
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fb8d 	bl	8009300 <USBH_ParseStringDesc>
  }

  return status;
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	607b      	str	r3, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	72fb      	strb	r3, [r7, #11]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	789b      	ldrb	r3, [r3, #2]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d11c      	bne.n	8008c44 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2206      	movs	r2, #6
 8008c1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	893a      	ldrh	r2, [r7, #8]
 8008c20:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c22:	893b      	ldrh	r3, [r7, #8]
 8008c24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c2c:	d104      	bne.n	8008c38 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f240 4209 	movw	r2, #1033	@ 0x409
 8008c34:	829a      	strh	r2, [r3, #20]
 8008c36:	e002      	b.n	8008c3e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8b3a      	ldrh	r2, [r7, #24]
 8008c42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008c44:	8b3b      	ldrh	r3, [r7, #24]
 8008c46:	461a      	mov	r2, r3
 8008c48:	6879      	ldr	r1, [r7, #4]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 fba5 	bl	800939a <USBH_CtlReq>
 8008c50:	4603      	mov	r3, r0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	789b      	ldrb	r3, [r3, #2]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d10f      	bne.n	8008c8e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2205      	movs	r2, #5
 8008c78:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fb81 	bl	800939a <USBH_CtlReq>
 8008c98:	4603      	mov	r3, r0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	789b      	ldrb	r3, [r3, #2]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d10e      	bne.n	8008cd4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2209      	movs	r2, #9
 8008cc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	887a      	ldrh	r2, [r7, #2]
 8008cc6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fb5e 	bl	800939a <USBH_CtlReq>
 8008cde:	4603      	mov	r3, r0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	789b      	ldrb	r3, [r3, #2]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d10f      	bne.n	8008d1c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2203      	movs	r2, #3
 8008d06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2100      	movs	r1, #0
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fb3a 	bl	800939a <USBH_CtlReq>
 8008d26:	4603      	mov	r3, r0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	789b      	ldrb	r3, [r3, #2]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d10f      	bne.n	8008d64 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d64:	2200      	movs	r2, #0
 8008d66:	2100      	movs	r1, #0
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fb16 	bl	800939a <USBH_CtlReq>
 8008d6e:	4603      	mov	r3, r0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008d8c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e094      	b.n	8008ec6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	781a      	ldrb	r2, [r3, #0]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	785a      	ldrb	r2, [r3, #1]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	3302      	adds	r3, #2
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	3303      	adds	r3, #3
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	791a      	ldrb	r2, [r3, #4]
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	795a      	ldrb	r2, [r3, #5]
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	799a      	ldrb	r2, [r3, #6]
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	79da      	ldrb	r2, [r3, #7]
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d11b      	bne.n	8008e32 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	79db      	ldrb	r3, [r3, #7]
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	dc0f      	bgt.n	8008e22 <USBH_ParseDevDesc+0xaa>
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	db0f      	blt.n	8008e26 <USBH_ParseDevDesc+0xae>
 8008e06:	3b08      	subs	r3, #8
 8008e08:	4a32      	ldr	r2, [pc, #200]	@ (8008ed4 <USBH_ParseDevDesc+0x15c>)
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	bf14      	ite	ne
 8008e16:	2301      	movne	r3, #1
 8008e18:	2300      	moveq	r3, #0
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d106      	bne.n	8008e2e <USBH_ParseDevDesc+0xb6>
 8008e20:	e001      	b.n	8008e26 <USBH_ParseDevDesc+0xae>
 8008e22:	2b40      	cmp	r3, #64	@ 0x40
 8008e24:	d003      	beq.n	8008e2e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2208      	movs	r2, #8
 8008e2a:	71da      	strb	r2, [r3, #7]
        break;
 8008e2c:	e000      	b.n	8008e30 <USBH_ParseDevDesc+0xb8>
        break;
 8008e2e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008e30:	e00e      	b.n	8008e50 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d107      	bne.n	8008e4c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	79db      	ldrb	r3, [r3, #7]
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d005      	beq.n	8008e50 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2208      	movs	r2, #8
 8008e48:	71da      	strb	r2, [r3, #7]
 8008e4a:	e001      	b.n	8008e50 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d936      	bls.n	8008ec4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	3309      	adds	r3, #9
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	330a      	adds	r3, #10
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	330b      	adds	r3, #11
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	4313      	orrs	r3, r2
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	330c      	adds	r3, #12
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	330d      	adds	r3, #13
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	7b9a      	ldrb	r2, [r3, #14]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	7bda      	ldrb	r2, [r3, #15]
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	7c1a      	ldrb	r2, [r3, #16]
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	7c5a      	ldrb	r2, [r3, #17]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	01000101 	.word	0x01000101

08008ed8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08c      	sub	sp, #48	@ 0x30
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008eec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008f06:	2302      	movs	r3, #2
 8008f08:	e0da      	b.n	80090c0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b09      	cmp	r3, #9
 8008f14:	d002      	beq.n	8008f1c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f18:	2209      	movs	r2, #9
 8008f1a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	781a      	ldrb	r2, [r3, #0]
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	785a      	ldrb	r2, [r3, #1]
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	3302      	adds	r3, #2
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3303      	adds	r3, #3
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f46:	bf28      	it	cs
 8008f48:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	791a      	ldrb	r2, [r3, #4]
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	795a      	ldrb	r2, [r3, #5]
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	799a      	ldrb	r2, [r3, #6]
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	79da      	ldrb	r2, [r3, #7]
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	7a1a      	ldrb	r2, [r3, #8]
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f7a:	88fb      	ldrh	r3, [r7, #6]
 8008f7c:	2b09      	cmp	r3, #9
 8008f7e:	f240 809d 	bls.w	80090bc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008f82:	2309      	movs	r3, #9
 8008f84:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f8a:	e081      	b.n	8009090 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f8c:	f107 0316 	add.w	r3, r7, #22
 8008f90:	4619      	mov	r1, r3
 8008f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f94:	f000 f9e7 	bl	8009366 <USBH_GetNextDesc>
 8008f98:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d176      	bne.n	8009090 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2b09      	cmp	r3, #9
 8008fa8:	d002      	beq.n	8008fb0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fac:	2209      	movs	r2, #9
 8008fae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fb4:	221a      	movs	r2, #26
 8008fb6:	fb02 f303 	mul.w	r3, r2, r3
 8008fba:	3308      	adds	r3, #8
 8008fbc:	6a3a      	ldr	r2, [r7, #32]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fc6:	69f8      	ldr	r0, [r7, #28]
 8008fc8:	f000 f87e 	bl	80090c8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008fd6:	e043      	b.n	8009060 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008fd8:	f107 0316 	add.w	r3, r7, #22
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fe0:	f000 f9c1 	bl	8009366 <USBH_GetNextDesc>
 8008fe4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	785b      	ldrb	r3, [r3, #1]
 8008fea:	2b05      	cmp	r3, #5
 8008fec:	d138      	bne.n	8009060 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	795b      	ldrb	r3, [r3, #5]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d113      	bne.n	800901e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d003      	beq.n	8009006 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	799b      	ldrb	r3, [r3, #6]
 8009002:	2b03      	cmp	r3, #3
 8009004:	d10b      	bne.n	800901e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	79db      	ldrb	r3, [r3, #7]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <USBH_ParseCfgDesc+0x14e>
 800900e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b09      	cmp	r3, #9
 8009014:	d007      	beq.n	8009026 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	2209      	movs	r2, #9
 800901a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800901c:	e003      	b.n	8009026 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800901e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009020:	2207      	movs	r2, #7
 8009022:	701a      	strb	r2, [r3, #0]
 8009024:	e000      	b.n	8009028 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009026:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800902c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009030:	3201      	adds	r2, #1
 8009032:	00d2      	lsls	r2, r2, #3
 8009034:	211a      	movs	r1, #26
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	4413      	add	r3, r2
 800903c:	3308      	adds	r3, #8
 800903e:	6a3a      	ldr	r2, [r7, #32]
 8009040:	4413      	add	r3, r2
 8009042:	3304      	adds	r3, #4
 8009044:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009048:	69b9      	ldr	r1, [r7, #24]
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f000 f870 	bl	8009130 <USBH_ParseEPDesc>
 8009050:	4603      	mov	r3, r0
 8009052:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009056:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800905a:	3301      	adds	r3, #1
 800905c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	791b      	ldrb	r3, [r3, #4]
 8009064:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009068:	429a      	cmp	r2, r3
 800906a:	d204      	bcs.n	8009076 <USBH_ParseCfgDesc+0x19e>
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	885a      	ldrh	r2, [r3, #2]
 8009070:	8afb      	ldrh	r3, [r7, #22]
 8009072:	429a      	cmp	r2, r3
 8009074:	d8b0      	bhi.n	8008fd8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	791b      	ldrb	r3, [r3, #4]
 800907a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800907e:	429a      	cmp	r2, r3
 8009080:	d201      	bcs.n	8009086 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009082:	2303      	movs	r3, #3
 8009084:	e01c      	b.n	80090c0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009086:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800908a:	3301      	adds	r3, #1
 800908c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009094:	2b01      	cmp	r3, #1
 8009096:	d805      	bhi.n	80090a4 <USBH_ParseCfgDesc+0x1cc>
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	885a      	ldrh	r2, [r3, #2]
 800909c:	8afb      	ldrh	r3, [r7, #22]
 800909e:	429a      	cmp	r2, r3
 80090a0:	f63f af74 	bhi.w	8008f8c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	791b      	ldrb	r3, [r3, #4]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	bf28      	it	cs
 80090ac:	2302      	movcs	r3, #2
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d201      	bcs.n	80090bc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e001      	b.n	80090c0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80090bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3730      	adds	r7, #48	@ 0x30
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781a      	ldrb	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	785a      	ldrb	r2, [r3, #1]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	789a      	ldrb	r2, [r3, #2]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	78da      	ldrb	r2, [r3, #3]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	3304      	adds	r3, #4
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	bf28      	it	cs
 80090fc:	2302      	movcs	r3, #2
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	795a      	ldrb	r2, [r3, #5]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	799a      	ldrb	r2, [r3, #6]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	79da      	ldrb	r2, [r3, #7]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	7a1a      	ldrb	r2, [r3, #8]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	721a      	strb	r2, [r3, #8]
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	781a      	ldrb	r2, [r3, #0]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	785a      	ldrb	r2, [r3, #1]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	789a      	ldrb	r2, [r3, #2]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	78da      	ldrb	r2, [r3, #3]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3305      	adds	r3, #5
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	021b      	lsls	r3, r3, #8
 8009170:	b29b      	uxth	r3, r3
 8009172:	4313      	orrs	r3, r2
 8009174:	b29a      	uxth	r2, r3
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	799a      	ldrb	r2, [r3, #6]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	889b      	ldrh	r3, [r3, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800918e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009192:	d804      	bhi.n	800919e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800919c:	d901      	bls.n	80091a2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800919e:	2303      	movs	r3, #3
 80091a0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d136      	bne.n	800921a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	78db      	ldrb	r3, [r3, #3]
 80091b0:	f003 0303 	and.w	r3, r3, #3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d108      	bne.n	80091ca <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	889b      	ldrh	r3, [r3, #4]
 80091bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c0:	f240 8097 	bls.w	80092f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80091c4:	2303      	movs	r3, #3
 80091c6:	75fb      	strb	r3, [r7, #23]
 80091c8:	e093      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	78db      	ldrb	r3, [r3, #3]
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d107      	bne.n	80091e6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	889b      	ldrh	r3, [r3, #4]
 80091da:	2b40      	cmp	r3, #64	@ 0x40
 80091dc:	f240 8089 	bls.w	80092f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80091e0:	2303      	movs	r3, #3
 80091e2:	75fb      	strb	r3, [r7, #23]
 80091e4:	e085      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	78db      	ldrb	r3, [r3, #3]
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d005      	beq.n	80091fe <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	78db      	ldrb	r3, [r3, #3]
 80091f6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d10a      	bne.n	8009214 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	799b      	ldrb	r3, [r3, #6]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <USBH_ParseEPDesc+0xde>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	799b      	ldrb	r3, [r3, #6]
 800920a:	2b10      	cmp	r3, #16
 800920c:	d970      	bls.n	80092f0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800920e:	2303      	movs	r3, #3
 8009210:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009212:	e06d      	b.n	80092f0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009214:	2303      	movs	r3, #3
 8009216:	75fb      	strb	r3, [r7, #23]
 8009218:	e06b      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009220:	2b01      	cmp	r3, #1
 8009222:	d13c      	bne.n	800929e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	78db      	ldrb	r3, [r3, #3]
 8009228:	f003 0303 	and.w	r3, r3, #3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d005      	beq.n	800923c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	78db      	ldrb	r3, [r3, #3]
 8009234:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009238:	2b00      	cmp	r3, #0
 800923a:	d106      	bne.n	800924a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	889b      	ldrh	r3, [r3, #4]
 8009240:	2b40      	cmp	r3, #64	@ 0x40
 8009242:	d956      	bls.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009244:	2303      	movs	r3, #3
 8009246:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009248:	e053      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	78db      	ldrb	r3, [r3, #3]
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	2b01      	cmp	r3, #1
 8009254:	d10e      	bne.n	8009274 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	799b      	ldrb	r3, [r3, #6]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d007      	beq.n	800926e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009262:	2b10      	cmp	r3, #16
 8009264:	d803      	bhi.n	800926e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800926a:	2b40      	cmp	r3, #64	@ 0x40
 800926c:	d941      	bls.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800926e:	2303      	movs	r3, #3
 8009270:	75fb      	strb	r3, [r7, #23]
 8009272:	e03e      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	78db      	ldrb	r3, [r3, #3]
 8009278:	f003 0303 	and.w	r3, r3, #3
 800927c:	2b03      	cmp	r3, #3
 800927e:	d10b      	bne.n	8009298 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	799b      	ldrb	r3, [r3, #6]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d004      	beq.n	8009292 <USBH_ParseEPDesc+0x162>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	889b      	ldrh	r3, [r3, #4]
 800928c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009290:	d32f      	bcc.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009292:	2303      	movs	r3, #3
 8009294:	75fb      	strb	r3, [r7, #23]
 8009296:	e02c      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009298:	2303      	movs	r3, #3
 800929a:	75fb      	strb	r3, [r7, #23]
 800929c:	e029      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d120      	bne.n	80092ea <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	78db      	ldrb	r3, [r3, #3]
 80092ac:	f003 0303 	and.w	r3, r3, #3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	889b      	ldrh	r3, [r3, #4]
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d01a      	beq.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092bc:	2303      	movs	r3, #3
 80092be:	75fb      	strb	r3, [r7, #23]
 80092c0:	e017      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	78db      	ldrb	r3, [r3, #3]
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d10a      	bne.n	80092e4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	799b      	ldrb	r3, [r3, #6]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <USBH_ParseEPDesc+0x1ae>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	889b      	ldrh	r3, [r3, #4]
 80092da:	2b08      	cmp	r3, #8
 80092dc:	d909      	bls.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092de:	2303      	movs	r3, #3
 80092e0:	75fb      	strb	r3, [r7, #23]
 80092e2:	e006      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80092e4:	2303      	movs	r3, #3
 80092e6:	75fb      	strb	r3, [r7, #23]
 80092e8:	e003      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092ea:	2303      	movs	r3, #3
 80092ec:	75fb      	strb	r3, [r7, #23]
 80092ee:	e000      	b.n	80092f2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80092f0:	bf00      	nop
  }

  return status;
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4613      	mov	r3, r2
 800930c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b03      	cmp	r3, #3
 8009316:	d120      	bne.n	800935a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	1e9a      	subs	r2, r3, #2
 800931e:	88fb      	ldrh	r3, [r7, #6]
 8009320:	4293      	cmp	r3, r2
 8009322:	bf28      	it	cs
 8009324:	4613      	movcs	r3, r2
 8009326:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3302      	adds	r3, #2
 800932c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800932e:	2300      	movs	r3, #0
 8009330:	82fb      	strh	r3, [r7, #22]
 8009332:	e00b      	b.n	800934c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009334:	8afb      	ldrh	r3, [r7, #22]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4413      	add	r3, r2
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	3301      	adds	r3, #1
 8009344:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009346:	8afb      	ldrh	r3, [r7, #22]
 8009348:	3302      	adds	r3, #2
 800934a:	82fb      	strh	r3, [r7, #22]
 800934c:	8afa      	ldrh	r2, [r7, #22]
 800934e:	8abb      	ldrh	r3, [r7, #20]
 8009350:	429a      	cmp	r2, r3
 8009352:	d3ef      	bcc.n	8009334 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2200      	movs	r2, #0
 8009358:	701a      	strb	r2, [r3, #0]
  }
}
 800935a:	bf00      	nop
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009366:	b480      	push	{r7}
 8009368:	b085      	sub	sp, #20
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7812      	ldrb	r2, [r2, #0]
 8009378:	4413      	add	r3, r2
 800937a:	b29a      	uxth	r2, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4413      	add	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800938c:	68fb      	ldr	r3, [r7, #12]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b086      	sub	sp, #24
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	4613      	mov	r3, r2
 80093a6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80093a8:	2301      	movs	r3, #1
 80093aa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	789b      	ldrb	r3, [r3, #2]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d002      	beq.n	80093ba <USBH_CtlReq+0x20>
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d00f      	beq.n	80093d8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80093b8:	e027      	b.n	800940a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	88fa      	ldrh	r2, [r7, #6]
 80093c4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2202      	movs	r2, #2
 80093d0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80093d2:	2301      	movs	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]
      break;
 80093d6:	e018      	b.n	800940a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f81b 	bl	8009414 <USBH_HandleControl>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <USBH_CtlReq+0x54>
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d106      	bne.n	80093fc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2201      	movs	r2, #1
 80093f2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	761a      	strb	r2, [r3, #24]
      break;
 80093fa:	e005      	b.n	8009408 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d102      	bne.n	8009408 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2201      	movs	r2, #1
 8009406:	709a      	strb	r2, [r3, #2]
      break;
 8009408:	bf00      	nop
  }
  return status;
 800940a:	7dfb      	ldrb	r3, [r7, #23]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af02      	add	r7, sp, #8
 800941a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800941c:	2301      	movs	r3, #1
 800941e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009420:	2300      	movs	r3, #0
 8009422:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7e1b      	ldrb	r3, [r3, #24]
 8009428:	3b01      	subs	r3, #1
 800942a:	2b0a      	cmp	r3, #10
 800942c:	f200 8156 	bhi.w	80096dc <USBH_HandleControl+0x2c8>
 8009430:	a201      	add	r2, pc, #4	@ (adr r2, 8009438 <USBH_HandleControl+0x24>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	08009465 	.word	0x08009465
 800943c:	0800947f 	.word	0x0800947f
 8009440:	080094e9 	.word	0x080094e9
 8009444:	0800950f 	.word	0x0800950f
 8009448:	08009547 	.word	0x08009547
 800944c:	08009571 	.word	0x08009571
 8009450:	080095c3 	.word	0x080095c3
 8009454:	080095e5 	.word	0x080095e5
 8009458:	08009621 	.word	0x08009621
 800945c:	08009647 	.word	0x08009647
 8009460:	08009685 	.word	0x08009685
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f103 0110 	add.w	r1, r3, #16
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	795b      	ldrb	r3, [r3, #5]
 800946e:	461a      	mov	r2, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f943 	bl	80096fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2202      	movs	r2, #2
 800947a:	761a      	strb	r2, [r3, #24]
      break;
 800947c:	e139      	b.n	80096f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	795b      	ldrb	r3, [r3, #5]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fcc5 	bl	8009e14 <USBH_LL_GetURBState>
 800948a:	4603      	mov	r3, r0
 800948c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d11e      	bne.n	80094d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	7c1b      	ldrb	r3, [r3, #16]
 8009498:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800949c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	8adb      	ldrh	r3, [r3, #22]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80094a6:	7b7b      	ldrb	r3, [r7, #13]
 80094a8:	2b80      	cmp	r3, #128	@ 0x80
 80094aa:	d103      	bne.n	80094b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2203      	movs	r2, #3
 80094b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094b2:	e115      	b.n	80096e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2205      	movs	r2, #5
 80094b8:	761a      	strb	r2, [r3, #24]
      break;
 80094ba:	e111      	b.n	80096e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80094bc:	7b7b      	ldrb	r3, [r7, #13]
 80094be:	2b80      	cmp	r3, #128	@ 0x80
 80094c0:	d103      	bne.n	80094ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2209      	movs	r2, #9
 80094c6:	761a      	strb	r2, [r3, #24]
      break;
 80094c8:	e10a      	b.n	80096e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2207      	movs	r2, #7
 80094ce:	761a      	strb	r2, [r3, #24]
      break;
 80094d0:	e106      	b.n	80096e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d003      	beq.n	80094e0 <USBH_HandleControl+0xcc>
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	2b02      	cmp	r3, #2
 80094dc:	f040 8100 	bne.w	80096e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	220b      	movs	r2, #11
 80094e4:	761a      	strb	r2, [r3, #24]
      break;
 80094e6:	e0fb      	b.n	80096e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6899      	ldr	r1, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	899a      	ldrh	r2, [r3, #12]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	791b      	ldrb	r3, [r3, #4]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f93a 	bl	800977a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2204      	movs	r2, #4
 800950a:	761a      	strb	r2, [r3, #24]
      break;
 800950c:	e0f1      	b.n	80096f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	791b      	ldrb	r3, [r3, #4]
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fc7d 	bl	8009e14 <USBH_LL_GetURBState>
 800951a:	4603      	mov	r3, r0
 800951c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d102      	bne.n	800952a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2209      	movs	r2, #9
 8009528:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b05      	cmp	r3, #5
 800952e:	d102      	bne.n	8009536 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009530:	2303      	movs	r3, #3
 8009532:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009534:	e0d6      	b.n	80096e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b04      	cmp	r3, #4
 800953a:	f040 80d3 	bne.w	80096e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	220b      	movs	r2, #11
 8009542:	761a      	strb	r2, [r3, #24]
      break;
 8009544:	e0ce      	b.n	80096e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6899      	ldr	r1, [r3, #8]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	899a      	ldrh	r2, [r3, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	795b      	ldrb	r3, [r3, #5]
 8009552:	2001      	movs	r0, #1
 8009554:	9000      	str	r0, [sp, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f8ea 	bl	8009730 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009562:	b29a      	uxth	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2206      	movs	r2, #6
 800956c:	761a      	strb	r2, [r3, #24]
      break;
 800956e:	e0c0      	b.n	80096f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	795b      	ldrb	r3, [r3, #5]
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fc4c 	bl	8009e14 <USBH_LL_GetURBState>
 800957c:	4603      	mov	r3, r0
 800957e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d103      	bne.n	800958e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2207      	movs	r2, #7
 800958a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800958c:	e0ac      	b.n	80096e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	2b05      	cmp	r3, #5
 8009592:	d105      	bne.n	80095a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	220c      	movs	r2, #12
 8009598:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800959a:	2303      	movs	r3, #3
 800959c:	73fb      	strb	r3, [r7, #15]
      break;
 800959e:	e0a3      	b.n	80096e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d103      	bne.n	80095ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2205      	movs	r2, #5
 80095aa:	761a      	strb	r2, [r3, #24]
      break;
 80095ac:	e09c      	b.n	80096e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	f040 8099 	bne.w	80096e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	220b      	movs	r2, #11
 80095ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80095bc:	2302      	movs	r3, #2
 80095be:	73fb      	strb	r3, [r7, #15]
      break;
 80095c0:	e092      	b.n	80096e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	791b      	ldrb	r3, [r3, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	2100      	movs	r1, #0
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f8d5 	bl	800977a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2208      	movs	r2, #8
 80095e0:	761a      	strb	r2, [r3, #24]

      break;
 80095e2:	e086      	b.n	80096f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	791b      	ldrb	r3, [r3, #4]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fc12 	bl	8009e14 <USBH_LL_GetURBState>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d105      	bne.n	8009606 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	220d      	movs	r2, #13
 80095fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009604:	e072      	b.n	80096ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b04      	cmp	r3, #4
 800960a:	d103      	bne.n	8009614 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	220b      	movs	r2, #11
 8009610:	761a      	strb	r2, [r3, #24]
      break;
 8009612:	e06b      	b.n	80096ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b05      	cmp	r3, #5
 8009618:	d168      	bne.n	80096ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800961a:	2303      	movs	r3, #3
 800961c:	73fb      	strb	r3, [r7, #15]
      break;
 800961e:	e065      	b.n	80096ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	795b      	ldrb	r3, [r3, #5]
 8009624:	2201      	movs	r2, #1
 8009626:	9200      	str	r2, [sp, #0]
 8009628:	2200      	movs	r2, #0
 800962a:	2100      	movs	r1, #0
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f87f 	bl	8009730 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009638:	b29a      	uxth	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	220a      	movs	r2, #10
 8009642:	761a      	strb	r2, [r3, #24]
      break;
 8009644:	e055      	b.n	80096f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	795b      	ldrb	r3, [r3, #5]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fbe1 	bl	8009e14 <USBH_LL_GetURBState>
 8009652:	4603      	mov	r3, r0
 8009654:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d105      	bne.n	8009668 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	220d      	movs	r2, #13
 8009664:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009666:	e043      	b.n	80096f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d103      	bne.n	8009676 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2209      	movs	r2, #9
 8009672:	761a      	strb	r2, [r3, #24]
      break;
 8009674:	e03c      	b.n	80096f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	2b04      	cmp	r3, #4
 800967a:	d139      	bne.n	80096f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	220b      	movs	r2, #11
 8009680:	761a      	strb	r2, [r3, #24]
      break;
 8009682:	e035      	b.n	80096f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7e5b      	ldrb	r3, [r3, #25]
 8009688:	3301      	adds	r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	765a      	strb	r2, [r3, #25]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7e5b      	ldrb	r3, [r3, #25]
 8009694:	2b02      	cmp	r3, #2
 8009696:	d806      	bhi.n	80096a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80096a4:	e025      	b.n	80096f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096ac:	2106      	movs	r1, #6
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	795b      	ldrb	r3, [r3, #5]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f90c 	bl	80098dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	791b      	ldrb	r3, [r3, #4]
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f906 	bl	80098dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80096d6:	2302      	movs	r3, #2
 80096d8:	73fb      	strb	r3, [r7, #15]
      break;
 80096da:	e00a      	b.n	80096f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80096dc:	bf00      	nop
 80096de:	e008      	b.n	80096f2 <USBH_HandleControl+0x2de>
      break;
 80096e0:	bf00      	nop
 80096e2:	e006      	b.n	80096f2 <USBH_HandleControl+0x2de>
      break;
 80096e4:	bf00      	nop
 80096e6:	e004      	b.n	80096f2 <USBH_HandleControl+0x2de>
      break;
 80096e8:	bf00      	nop
 80096ea:	e002      	b.n	80096f2 <USBH_HandleControl+0x2de>
      break;
 80096ec:	bf00      	nop
 80096ee:	e000      	b.n	80096f2 <USBH_HandleControl+0x2de>
      break;
 80096f0:	bf00      	nop
  }

  return status;
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af04      	add	r7, sp, #16
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4613      	mov	r3, r2
 8009708:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800970a:	79f9      	ldrb	r1, [r7, #7]
 800970c:	2300      	movs	r3, #0
 800970e:	9303      	str	r3, [sp, #12]
 8009710:	2308      	movs	r3, #8
 8009712:	9302      	str	r3, [sp, #8]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	2300      	movs	r3, #0
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	2300      	movs	r3, #0
 800971e:	2200      	movs	r2, #0
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 fb46 	bl	8009db2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af04      	add	r7, sp, #16
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4611      	mov	r1, r2
 800973c:	461a      	mov	r2, r3
 800973e:	460b      	mov	r3, r1
 8009740:	80fb      	strh	r3, [r7, #6]
 8009742:	4613      	mov	r3, r2
 8009744:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009750:	2300      	movs	r3, #0
 8009752:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009754:	7979      	ldrb	r1, [r7, #5]
 8009756:	7e3b      	ldrb	r3, [r7, #24]
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	9302      	str	r3, [sp, #8]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	2301      	movs	r3, #1
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	2300      	movs	r3, #0
 8009768:	2200      	movs	r2, #0
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fb21 	bl	8009db2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b088      	sub	sp, #32
 800977e:	af04      	add	r7, sp, #16
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	4611      	mov	r1, r2
 8009786:	461a      	mov	r2, r3
 8009788:	460b      	mov	r3, r1
 800978a:	80fb      	strh	r3, [r7, #6]
 800978c:	4613      	mov	r3, r2
 800978e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009790:	7979      	ldrb	r1, [r7, #5]
 8009792:	2300      	movs	r3, #0
 8009794:	9303      	str	r3, [sp, #12]
 8009796:	88fb      	ldrh	r3, [r7, #6]
 8009798:	9302      	str	r3, [sp, #8]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	2301      	movs	r3, #1
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	2300      	movs	r3, #0
 80097a4:	2201      	movs	r2, #1
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 fb03 	bl	8009db2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80097ac:	2300      	movs	r3, #0

}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b088      	sub	sp, #32
 80097ba:	af04      	add	r7, sp, #16
 80097bc:	60f8      	str	r0, [r7, #12]
 80097be:	60b9      	str	r1, [r7, #8]
 80097c0:	4611      	mov	r1, r2
 80097c2:	461a      	mov	r2, r3
 80097c4:	460b      	mov	r3, r1
 80097c6:	80fb      	strh	r3, [r7, #6]
 80097c8:	4613      	mov	r3, r2
 80097ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80097d6:	2300      	movs	r3, #0
 80097d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097da:	7979      	ldrb	r1, [r7, #5]
 80097dc:	7e3b      	ldrb	r3, [r7, #24]
 80097de:	9303      	str	r3, [sp, #12]
 80097e0:	88fb      	ldrh	r3, [r7, #6]
 80097e2:	9302      	str	r3, [sp, #8]
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	2301      	movs	r3, #1
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	2302      	movs	r3, #2
 80097ee:	2200      	movs	r2, #0
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fade 	bl	8009db2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b088      	sub	sp, #32
 8009804:	af04      	add	r7, sp, #16
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	4611      	mov	r1, r2
 800980c:	461a      	mov	r2, r3
 800980e:	460b      	mov	r3, r1
 8009810:	80fb      	strh	r3, [r7, #6]
 8009812:	4613      	mov	r3, r2
 8009814:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009816:	7979      	ldrb	r1, [r7, #5]
 8009818:	2300      	movs	r3, #0
 800981a:	9303      	str	r3, [sp, #12]
 800981c:	88fb      	ldrh	r3, [r7, #6]
 800981e:	9302      	str	r3, [sp, #8]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	2301      	movs	r3, #1
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	2302      	movs	r3, #2
 800982a:	2201      	movs	r2, #1
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fac0 	bl	8009db2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af04      	add	r7, sp, #16
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	4608      	mov	r0, r1
 8009846:	4611      	mov	r1, r2
 8009848:	461a      	mov	r2, r3
 800984a:	4603      	mov	r3, r0
 800984c:	70fb      	strb	r3, [r7, #3]
 800984e:	460b      	mov	r3, r1
 8009850:	70bb      	strb	r3, [r7, #2]
 8009852:	4613      	mov	r3, r2
 8009854:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009856:	7878      	ldrb	r0, [r7, #1]
 8009858:	78ba      	ldrb	r2, [r7, #2]
 800985a:	78f9      	ldrb	r1, [r7, #3]
 800985c:	8b3b      	ldrh	r3, [r7, #24]
 800985e:	9302      	str	r3, [sp, #8]
 8009860:	7d3b      	ldrb	r3, [r7, #20]
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	7c3b      	ldrb	r3, [r7, #16]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa53 	bl	8009d16 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009886:	78fb      	ldrb	r3, [r7, #3]
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa72 	bl	8009d74 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f836 	bl	8009918 <USBH_GetFreePipe>
 80098ac:	4603      	mov	r3, r0
 80098ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80098b0:	89fb      	ldrh	r3, [r7, #14]
 80098b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00a      	beq.n	80098d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80098ba:	78fa      	ldrb	r2, [r7, #3]
 80098bc:	89fb      	ldrh	r3, [r7, #14]
 80098be:	f003 030f 	and.w	r3, r3, #15
 80098c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	33e0      	adds	r3, #224	@ 0xe0
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80098d0:	89fb      	ldrh	r3, [r7, #14]
 80098d2:	b2db      	uxtb	r3, r3
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	2b0f      	cmp	r3, #15
 80098ec:	d80d      	bhi.n	800990a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	33e0      	adds	r3, #224	@ 0xe0
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	33e0      	adds	r3, #224	@ 0xe0
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009920:	2300      	movs	r3, #0
 8009922:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
 8009928:	e00f      	b.n	800994a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	33e0      	adds	r3, #224	@ 0xe0
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	b29b      	uxth	r3, r3
 8009942:	e007      	b.n	8009954 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	3301      	adds	r3, #1
 8009948:	73fb      	strb	r3, [r7, #15]
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	2b0f      	cmp	r3, #15
 800994e:	d9ec      	bls.n	800992a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009950:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009964:	2201      	movs	r2, #1
 8009966:	490e      	ldr	r1, [pc, #56]	@ (80099a0 <MX_USB_HOST_Init+0x40>)
 8009968:	480e      	ldr	r0, [pc, #56]	@ (80099a4 <MX_USB_HOST_Init+0x44>)
 800996a:	f7fe fb15 	bl	8007f98 <USBH_Init>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009974:	f7f7 fc24 	bl	80011c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009978:	490b      	ldr	r1, [pc, #44]	@ (80099a8 <MX_USB_HOST_Init+0x48>)
 800997a:	480a      	ldr	r0, [pc, #40]	@ (80099a4 <MX_USB_HOST_Init+0x44>)
 800997c:	f7fe fbb9 	bl	80080f2 <USBH_RegisterClass>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009986:	f7f7 fc1b 	bl	80011c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800998a:	4806      	ldr	r0, [pc, #24]	@ (80099a4 <MX_USB_HOST_Init+0x44>)
 800998c:	f7fe fc3d 	bl	800820a <USBH_Start>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009996:	f7f7 fc13 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800999a:	bf00      	nop
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	080099c1 	.word	0x080099c1
 80099a4:	20000220 	.word	0x20000220
 80099a8:	2000000c 	.word	0x2000000c

080099ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80099b0:	4802      	ldr	r0, [pc, #8]	@ (80099bc <MX_USB_HOST_Process+0x10>)
 80099b2:	f7fe fc3b 	bl	800822c <USBH_Process>
}
 80099b6:	bf00      	nop
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20000220 	.word	0x20000220

080099c0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d819      	bhi.n	8009a08 <USBH_UserProcess+0x48>
 80099d4:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <USBH_UserProcess+0x1c>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	08009a09 	.word	0x08009a09
 80099e0:	080099f9 	.word	0x080099f9
 80099e4:	08009a09 	.word	0x08009a09
 80099e8:	08009a01 	.word	0x08009a01
 80099ec:	080099f1 	.word	0x080099f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80099f0:	4b09      	ldr	r3, [pc, #36]	@ (8009a18 <USBH_UserProcess+0x58>)
 80099f2:	2203      	movs	r2, #3
 80099f4:	701a      	strb	r2, [r3, #0]
  break;
 80099f6:	e008      	b.n	8009a0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80099f8:	4b07      	ldr	r3, [pc, #28]	@ (8009a18 <USBH_UserProcess+0x58>)
 80099fa:	2202      	movs	r2, #2
 80099fc:	701a      	strb	r2, [r3, #0]
  break;
 80099fe:	e004      	b.n	8009a0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009a00:	4b05      	ldr	r3, [pc, #20]	@ (8009a18 <USBH_UserProcess+0x58>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
  break;
 8009a06:	e000      	b.n	8009a0a <USBH_UserProcess+0x4a>

  default:
  break;
 8009a08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009a0a:	bf00      	nop
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	200005f8 	.word	0x200005f8

08009a1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	@ 0x28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a24:	f107 0314 	add.w	r3, r7, #20
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	605a      	str	r2, [r3, #4]
 8009a2e:	609a      	str	r2, [r3, #8]
 8009a30:	60da      	str	r2, [r3, #12]
 8009a32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a3c:	d147      	bne.n	8009ace <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a3e:	2300      	movs	r3, #0
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	4b25      	ldr	r3, [pc, #148]	@ (8009ad8 <HAL_HCD_MspInit+0xbc>)
 8009a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a46:	4a24      	ldr	r2, [pc, #144]	@ (8009ad8 <HAL_HCD_MspInit+0xbc>)
 8009a48:	f043 0301 	orr.w	r3, r3, #1
 8009a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a4e:	4b22      	ldr	r3, [pc, #136]	@ (8009ad8 <HAL_HCD_MspInit+0xbc>)
 8009a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	613b      	str	r3, [r7, #16]
 8009a58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009a5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009a68:	f107 0314 	add.w	r3, r7, #20
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	481b      	ldr	r0, [pc, #108]	@ (8009adc <HAL_HCD_MspInit+0xc0>)
 8009a70:	f7f8 f978 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009a74:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a82:	2300      	movs	r3, #0
 8009a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a86:	230a      	movs	r3, #10
 8009a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a8a:	f107 0314 	add.w	r3, r7, #20
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4812      	ldr	r0, [pc, #72]	@ (8009adc <HAL_HCD_MspInit+0xc0>)
 8009a92:	f7f8 f967 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a96:	4b10      	ldr	r3, [pc, #64]	@ (8009ad8 <HAL_HCD_MspInit+0xbc>)
 8009a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8009ad8 <HAL_HCD_MspInit+0xbc>)
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aa0:	6353      	str	r3, [r2, #52]	@ 0x34
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60fb      	str	r3, [r7, #12]
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <HAL_HCD_MspInit+0xbc>)
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8009ad8 <HAL_HCD_MspInit+0xbc>)
 8009aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ab2:	4b09      	ldr	r3, [pc, #36]	@ (8009ad8 <HAL_HCD_MspInit+0xbc>)
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	2043      	movs	r0, #67	@ 0x43
 8009ac4:	f7f7 ff19 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ac8:	2043      	movs	r0, #67	@ 0x43
 8009aca:	f7f7 ff32 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ace:	bf00      	nop
 8009ad0:	3728      	adds	r7, #40	@ 0x28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	40023800 	.word	0x40023800
 8009adc:	40020000 	.word	0x40020000

08009ae0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe ff73 	bl	80089da <USBH_LL_IncTimer>
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe ffab 	bl	8008a66 <USBH_LL_Connect>
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe ffb4 	bl	8008a94 <USBH_LL_Disconnect>
}
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
 8009b40:	4613      	mov	r3, r2
 8009b42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe ff65 	bl	8008a2e <USBH_LL_PortEnabled>
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe ff65 	bl	8008a4a <USBH_LL_PortDisabled>
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d12a      	bne.n	8009bf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009b9a:	4a18      	ldr	r2, [pc, #96]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a15      	ldr	r2, [pc, #84]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009ba6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009baa:	4b14      	ldr	r3, [pc, #80]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009bac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009bb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009bb2:	4b12      	ldr	r3, [pc, #72]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009bb4:	2208      	movs	r2, #8
 8009bb6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009bb8:	4b10      	ldr	r3, [pc, #64]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009bca:	4b0c      	ldr	r3, [pc, #48]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009bd0:	480a      	ldr	r0, [pc, #40]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009bd2:	f7f8 fac7 	bl	8002164 <HAL_HCD_Init>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009bdc:	f7f7 faf0 	bl	80011c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009be0:	4806      	ldr	r0, [pc, #24]	@ (8009bfc <USBH_LL_Init+0x74>)
 8009be2:	f7f8 ff27 	bl	8002a34 <HAL_HCD_GetCurrentFrame>
 8009be6:	4603      	mov	r3, r0
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7fe fee6 	bl	80089bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200005fc 	.word	0x200005fc

08009c00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7f8 fe94 	bl	8002944 <HAL_HCD_Start>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 f95e 	bl	8009ee4 <USBH_Get_USB_Status>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7f8 fe9c 	bl	800298a <HAL_HCD_Stop>
 8009c52:	4603      	mov	r3, r0
 8009c54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 f943 	bl	8009ee4 <USBH_Get_USB_Status>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009c74:	2301      	movs	r3, #1
 8009c76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7f8 fee6 	bl	8002a50 <HAL_HCD_GetCurrentSpeed>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d00c      	beq.n	8009ca4 <USBH_LL_GetSpeed+0x38>
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d80d      	bhi.n	8009caa <USBH_LL_GetSpeed+0x3e>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <USBH_LL_GetSpeed+0x2c>
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d003      	beq.n	8009c9e <USBH_LL_GetSpeed+0x32>
 8009c96:	e008      	b.n	8009caa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9c:	e008      	b.n	8009cb0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca2:	e005      	b.n	8009cb0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca8:	e002      	b.n	8009cb0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009caa:	2301      	movs	r3, #1
 8009cac:	73fb      	strb	r3, [r7, #15]
    break;
 8009cae:	bf00      	nop
  }
  return  speed;
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7f8 fe77 	bl	80029c4 <HAL_HCD_ResetPort>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 f901 	bl	8009ee4 <USBH_Get_USB_Status>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d02:	78fa      	ldrb	r2, [r7, #3]
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7f8 fe7f 	bl	8002a0a <HAL_HCD_HC_GetXferCount>
 8009d0c:	4603      	mov	r3, r0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d16:	b590      	push	{r4, r7, lr}
 8009d18:	b089      	sub	sp, #36	@ 0x24
 8009d1a:	af04      	add	r7, sp, #16
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	4608      	mov	r0, r1
 8009d20:	4611      	mov	r1, r2
 8009d22:	461a      	mov	r2, r3
 8009d24:	4603      	mov	r3, r0
 8009d26:	70fb      	strb	r3, [r7, #3]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70bb      	strb	r3, [r7, #2]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009d3e:	787c      	ldrb	r4, [r7, #1]
 8009d40:	78ba      	ldrb	r2, [r7, #2]
 8009d42:	78f9      	ldrb	r1, [r7, #3]
 8009d44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d46:	9302      	str	r3, [sp, #8]
 8009d48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	4623      	mov	r3, r4
 8009d56:	f7f8 fa6c 	bl	8002232 <HAL_HCD_HC_Init>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f8bf 	bl	8009ee4 <USBH_Get_USB_Status>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd90      	pop	{r4, r7, pc}

08009d74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d8e:	78fa      	ldrb	r2, [r7, #3]
 8009d90:	4611      	mov	r1, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f8 fb05 	bl	80023a2 <HAL_HCD_HC_Halt>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 f8a0 	bl	8009ee4 <USBH_Get_USB_Status>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009db2:	b590      	push	{r4, r7, lr}
 8009db4:	b089      	sub	sp, #36	@ 0x24
 8009db6:	af04      	add	r7, sp, #16
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	4608      	mov	r0, r1
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	70fb      	strb	r3, [r7, #3]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70bb      	strb	r3, [r7, #2]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009dda:	787c      	ldrb	r4, [r7, #1]
 8009ddc:	78ba      	ldrb	r2, [r7, #2]
 8009dde:	78f9      	ldrb	r1, [r7, #3]
 8009de0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009de4:	9303      	str	r3, [sp, #12]
 8009de6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009de8:	9302      	str	r3, [sp, #8]
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4623      	mov	r3, r4
 8009df6:	f7f8 faf7 	bl	80023e8 <HAL_HCD_HC_SubmitRequest>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 f86f 	bl	8009ee4 <USBH_Get_USB_Status>
 8009e06:	4603      	mov	r3, r0
 8009e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd90      	pop	{r4, r7, pc}

08009e14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e26:	78fa      	ldrb	r2, [r7, #3]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f8 fdd8 	bl	80029e0 <HAL_HCD_HC_GetURBState>
 8009e30:	4603      	mov	r3, r0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d103      	bne.n	8009e58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f872 	bl	8009f3c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009e58:	20c8      	movs	r0, #200	@ 0xc8
 8009e5a:	f7f7 fc4f 	bl	80016fc <HAL_Delay>
  return USBH_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
 8009e74:	4613      	mov	r3, r2
 8009e76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009e80:	78fa      	ldrb	r2, [r7, #3]
 8009e82:	68f9      	ldr	r1, [r7, #12]
 8009e84:	4613      	mov	r3, r2
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	1a9b      	subs	r3, r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	3317      	adds	r3, #23
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009e96:	78fa      	ldrb	r2, [r7, #3]
 8009e98:	68f9      	ldr	r1, [r7, #12]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	1a9b      	subs	r3, r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	333c      	adds	r3, #60	@ 0x3c
 8009ea6:	78ba      	ldrb	r2, [r7, #2]
 8009ea8:	701a      	strb	r2, [r3, #0]
 8009eaa:	e009      	b.n	8009ec0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009eac:	78fa      	ldrb	r2, [r7, #3]
 8009eae:	68f9      	ldr	r1, [r7, #12]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	011b      	lsls	r3, r3, #4
 8009eb4:	1a9b      	subs	r3, r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	440b      	add	r3, r1
 8009eba:	333d      	adds	r3, #61	@ 0x3d
 8009ebc:	78ba      	ldrb	r2, [r7, #2]
 8009ebe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7f7 fc10 	bl	80016fc <HAL_Delay>
}
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ef2:	79fb      	ldrb	r3, [r7, #7]
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d817      	bhi.n	8009f28 <USBH_Get_USB_Status+0x44>
 8009ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8009f00 <USBH_Get_USB_Status+0x1c>)
 8009efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efe:	bf00      	nop
 8009f00:	08009f11 	.word	0x08009f11
 8009f04:	08009f17 	.word	0x08009f17
 8009f08:	08009f1d 	.word	0x08009f1d
 8009f0c:	08009f23 	.word	0x08009f23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	73fb      	strb	r3, [r7, #15]
    break;
 8009f14:	e00b      	b.n	8009f2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009f16:	2302      	movs	r3, #2
 8009f18:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1a:	e008      	b.n	8009f2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f20:	e005      	b.n	8009f2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009f22:	2302      	movs	r3, #2
 8009f24:	73fb      	strb	r3, [r7, #15]
    break;
 8009f26:	e002      	b.n	8009f2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009f28:	2302      	movs	r3, #2
 8009f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2c:	bf00      	nop
  }
  return usb_status;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009f4a:	79fb      	ldrb	r3, [r7, #7]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	e001      	b.n	8009f5a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009f56:	2301      	movs	r3, #1
 8009f58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	2101      	movs	r1, #1
 8009f60:	4803      	ldr	r0, [pc, #12]	@ (8009f70 <MX_DriverVbusFS+0x34>)
 8009f62:	f7f8 f8b3 	bl	80020cc <HAL_GPIO_WritePin>
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	40020800 	.word	0x40020800

08009f74 <malloc>:
 8009f74:	4b02      	ldr	r3, [pc, #8]	@ (8009f80 <malloc+0xc>)
 8009f76:	4601      	mov	r1, r0
 8009f78:	6818      	ldr	r0, [r3, #0]
 8009f7a:	f000 b82d 	b.w	8009fd8 <_malloc_r>
 8009f7e:	bf00      	nop
 8009f80:	2000002c 	.word	0x2000002c

08009f84 <free>:
 8009f84:	4b02      	ldr	r3, [pc, #8]	@ (8009f90 <free+0xc>)
 8009f86:	4601      	mov	r1, r0
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	f000 b8f5 	b.w	800a178 <_free_r>
 8009f8e:	bf00      	nop
 8009f90:	2000002c 	.word	0x2000002c

08009f94 <sbrk_aligned>:
 8009f94:	b570      	push	{r4, r5, r6, lr}
 8009f96:	4e0f      	ldr	r6, [pc, #60]	@ (8009fd4 <sbrk_aligned+0x40>)
 8009f98:	460c      	mov	r4, r1
 8009f9a:	6831      	ldr	r1, [r6, #0]
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	b911      	cbnz	r1, 8009fa6 <sbrk_aligned+0x12>
 8009fa0:	f000 f8ae 	bl	800a100 <_sbrk_r>
 8009fa4:	6030      	str	r0, [r6, #0]
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f000 f8a9 	bl	800a100 <_sbrk_r>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d103      	bne.n	8009fba <sbrk_aligned+0x26>
 8009fb2:	f04f 34ff 	mov.w	r4, #4294967295
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	bd70      	pop	{r4, r5, r6, pc}
 8009fba:	1cc4      	adds	r4, r0, #3
 8009fbc:	f024 0403 	bic.w	r4, r4, #3
 8009fc0:	42a0      	cmp	r0, r4
 8009fc2:	d0f8      	beq.n	8009fb6 <sbrk_aligned+0x22>
 8009fc4:	1a21      	subs	r1, r4, r0
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f000 f89a 	bl	800a100 <_sbrk_r>
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d1f2      	bne.n	8009fb6 <sbrk_aligned+0x22>
 8009fd0:	e7ef      	b.n	8009fb2 <sbrk_aligned+0x1e>
 8009fd2:	bf00      	nop
 8009fd4:	200009dc 	.word	0x200009dc

08009fd8 <_malloc_r>:
 8009fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	1ccd      	adds	r5, r1, #3
 8009fde:	f025 0503 	bic.w	r5, r5, #3
 8009fe2:	3508      	adds	r5, #8
 8009fe4:	2d0c      	cmp	r5, #12
 8009fe6:	bf38      	it	cc
 8009fe8:	250c      	movcc	r5, #12
 8009fea:	2d00      	cmp	r5, #0
 8009fec:	4606      	mov	r6, r0
 8009fee:	db01      	blt.n	8009ff4 <_malloc_r+0x1c>
 8009ff0:	42a9      	cmp	r1, r5
 8009ff2:	d904      	bls.n	8009ffe <_malloc_r+0x26>
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	6033      	str	r3, [r6, #0]
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0d4 <_malloc_r+0xfc>
 800a002:	f000 f869 	bl	800a0d8 <__malloc_lock>
 800a006:	f8d8 3000 	ldr.w	r3, [r8]
 800a00a:	461c      	mov	r4, r3
 800a00c:	bb44      	cbnz	r4, 800a060 <_malloc_r+0x88>
 800a00e:	4629      	mov	r1, r5
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff ffbf 	bl	8009f94 <sbrk_aligned>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	4604      	mov	r4, r0
 800a01a:	d158      	bne.n	800a0ce <_malloc_r+0xf6>
 800a01c:	f8d8 4000 	ldr.w	r4, [r8]
 800a020:	4627      	mov	r7, r4
 800a022:	2f00      	cmp	r7, #0
 800a024:	d143      	bne.n	800a0ae <_malloc_r+0xd6>
 800a026:	2c00      	cmp	r4, #0
 800a028:	d04b      	beq.n	800a0c2 <_malloc_r+0xea>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	4639      	mov	r1, r7
 800a02e:	4630      	mov	r0, r6
 800a030:	eb04 0903 	add.w	r9, r4, r3
 800a034:	f000 f864 	bl	800a100 <_sbrk_r>
 800a038:	4581      	cmp	r9, r0
 800a03a:	d142      	bne.n	800a0c2 <_malloc_r+0xea>
 800a03c:	6821      	ldr	r1, [r4, #0]
 800a03e:	1a6d      	subs	r5, r5, r1
 800a040:	4629      	mov	r1, r5
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ffa6 	bl	8009f94 <sbrk_aligned>
 800a048:	3001      	adds	r0, #1
 800a04a:	d03a      	beq.n	800a0c2 <_malloc_r+0xea>
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	442b      	add	r3, r5
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	f8d8 3000 	ldr.w	r3, [r8]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	bb62      	cbnz	r2, 800a0b4 <_malloc_r+0xdc>
 800a05a:	f8c8 7000 	str.w	r7, [r8]
 800a05e:	e00f      	b.n	800a080 <_malloc_r+0xa8>
 800a060:	6822      	ldr	r2, [r4, #0]
 800a062:	1b52      	subs	r2, r2, r5
 800a064:	d420      	bmi.n	800a0a8 <_malloc_r+0xd0>
 800a066:	2a0b      	cmp	r2, #11
 800a068:	d917      	bls.n	800a09a <_malloc_r+0xc2>
 800a06a:	1961      	adds	r1, r4, r5
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	6025      	str	r5, [r4, #0]
 800a070:	bf18      	it	ne
 800a072:	6059      	strne	r1, [r3, #4]
 800a074:	6863      	ldr	r3, [r4, #4]
 800a076:	bf08      	it	eq
 800a078:	f8c8 1000 	streq.w	r1, [r8]
 800a07c:	5162      	str	r2, [r4, r5]
 800a07e:	604b      	str	r3, [r1, #4]
 800a080:	4630      	mov	r0, r6
 800a082:	f000 f82f 	bl	800a0e4 <__malloc_unlock>
 800a086:	f104 000b 	add.w	r0, r4, #11
 800a08a:	1d23      	adds	r3, r4, #4
 800a08c:	f020 0007 	bic.w	r0, r0, #7
 800a090:	1ac2      	subs	r2, r0, r3
 800a092:	bf1c      	itt	ne
 800a094:	1a1b      	subne	r3, r3, r0
 800a096:	50a3      	strne	r3, [r4, r2]
 800a098:	e7af      	b.n	8009ffa <_malloc_r+0x22>
 800a09a:	6862      	ldr	r2, [r4, #4]
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	bf0c      	ite	eq
 800a0a0:	f8c8 2000 	streq.w	r2, [r8]
 800a0a4:	605a      	strne	r2, [r3, #4]
 800a0a6:	e7eb      	b.n	800a080 <_malloc_r+0xa8>
 800a0a8:	4623      	mov	r3, r4
 800a0aa:	6864      	ldr	r4, [r4, #4]
 800a0ac:	e7ae      	b.n	800a00c <_malloc_r+0x34>
 800a0ae:	463c      	mov	r4, r7
 800a0b0:	687f      	ldr	r7, [r7, #4]
 800a0b2:	e7b6      	b.n	800a022 <_malloc_r+0x4a>
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	d1fb      	bne.n	800a0b4 <_malloc_r+0xdc>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	6053      	str	r3, [r2, #4]
 800a0c0:	e7de      	b.n	800a080 <_malloc_r+0xa8>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	6033      	str	r3, [r6, #0]
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f000 f80c 	bl	800a0e4 <__malloc_unlock>
 800a0cc:	e794      	b.n	8009ff8 <_malloc_r+0x20>
 800a0ce:	6005      	str	r5, [r0, #0]
 800a0d0:	e7d6      	b.n	800a080 <_malloc_r+0xa8>
 800a0d2:	bf00      	nop
 800a0d4:	200009e0 	.word	0x200009e0

0800a0d8 <__malloc_lock>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	@ (800a0e0 <__malloc_lock+0x8>)
 800a0da:	f000 b84b 	b.w	800a174 <__retarget_lock_acquire_recursive>
 800a0de:	bf00      	nop
 800a0e0:	20000b20 	.word	0x20000b20

0800a0e4 <__malloc_unlock>:
 800a0e4:	4801      	ldr	r0, [pc, #4]	@ (800a0ec <__malloc_unlock+0x8>)
 800a0e6:	f000 b846 	b.w	800a176 <__retarget_lock_release_recursive>
 800a0ea:	bf00      	nop
 800a0ec:	20000b20 	.word	0x20000b20

0800a0f0 <memset>:
 800a0f0:	4402      	add	r2, r0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d100      	bne.n	800a0fa <memset+0xa>
 800a0f8:	4770      	bx	lr
 800a0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a0fe:	e7f9      	b.n	800a0f4 <memset+0x4>

0800a100 <_sbrk_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d06      	ldr	r5, [pc, #24]	@ (800a11c <_sbrk_r+0x1c>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	f7f7 fa12 	bl	8001534 <_sbrk>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_sbrk_r+0x1a>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_sbrk_r+0x1a>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	20000b1c 	.word	0x20000b1c

0800a120 <__errno>:
 800a120:	4b01      	ldr	r3, [pc, #4]	@ (800a128 <__errno+0x8>)
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	2000002c 	.word	0x2000002c

0800a12c <__libc_init_array>:
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	4d0d      	ldr	r5, [pc, #52]	@ (800a164 <__libc_init_array+0x38>)
 800a130:	4c0d      	ldr	r4, [pc, #52]	@ (800a168 <__libc_init_array+0x3c>)
 800a132:	1b64      	subs	r4, r4, r5
 800a134:	10a4      	asrs	r4, r4, #2
 800a136:	2600      	movs	r6, #0
 800a138:	42a6      	cmp	r6, r4
 800a13a:	d109      	bne.n	800a150 <__libc_init_array+0x24>
 800a13c:	4d0b      	ldr	r5, [pc, #44]	@ (800a16c <__libc_init_array+0x40>)
 800a13e:	4c0c      	ldr	r4, [pc, #48]	@ (800a170 <__libc_init_array+0x44>)
 800a140:	f000 f864 	bl	800a20c <_init>
 800a144:	1b64      	subs	r4, r4, r5
 800a146:	10a4      	asrs	r4, r4, #2
 800a148:	2600      	movs	r6, #0
 800a14a:	42a6      	cmp	r6, r4
 800a14c:	d105      	bne.n	800a15a <__libc_init_array+0x2e>
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	f855 3b04 	ldr.w	r3, [r5], #4
 800a154:	4798      	blx	r3
 800a156:	3601      	adds	r6, #1
 800a158:	e7ee      	b.n	800a138 <__libc_init_array+0xc>
 800a15a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a15e:	4798      	blx	r3
 800a160:	3601      	adds	r6, #1
 800a162:	e7f2      	b.n	800a14a <__libc_init_array+0x1e>
 800a164:	0800a248 	.word	0x0800a248
 800a168:	0800a248 	.word	0x0800a248
 800a16c:	0800a248 	.word	0x0800a248
 800a170:	0800a24c 	.word	0x0800a24c

0800a174 <__retarget_lock_acquire_recursive>:
 800a174:	4770      	bx	lr

0800a176 <__retarget_lock_release_recursive>:
 800a176:	4770      	bx	lr

0800a178 <_free_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4605      	mov	r5, r0
 800a17c:	2900      	cmp	r1, #0
 800a17e:	d041      	beq.n	800a204 <_free_r+0x8c>
 800a180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a184:	1f0c      	subs	r4, r1, #4
 800a186:	2b00      	cmp	r3, #0
 800a188:	bfb8      	it	lt
 800a18a:	18e4      	addlt	r4, r4, r3
 800a18c:	f7ff ffa4 	bl	800a0d8 <__malloc_lock>
 800a190:	4a1d      	ldr	r2, [pc, #116]	@ (800a208 <_free_r+0x90>)
 800a192:	6813      	ldr	r3, [r2, #0]
 800a194:	b933      	cbnz	r3, 800a1a4 <_free_r+0x2c>
 800a196:	6063      	str	r3, [r4, #4]
 800a198:	6014      	str	r4, [r2, #0]
 800a19a:	4628      	mov	r0, r5
 800a19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1a0:	f7ff bfa0 	b.w	800a0e4 <__malloc_unlock>
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	d908      	bls.n	800a1ba <_free_r+0x42>
 800a1a8:	6820      	ldr	r0, [r4, #0]
 800a1aa:	1821      	adds	r1, r4, r0
 800a1ac:	428b      	cmp	r3, r1
 800a1ae:	bf01      	itttt	eq
 800a1b0:	6819      	ldreq	r1, [r3, #0]
 800a1b2:	685b      	ldreq	r3, [r3, #4]
 800a1b4:	1809      	addeq	r1, r1, r0
 800a1b6:	6021      	streq	r1, [r4, #0]
 800a1b8:	e7ed      	b.n	800a196 <_free_r+0x1e>
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	b10b      	cbz	r3, 800a1c4 <_free_r+0x4c>
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	d9fa      	bls.n	800a1ba <_free_r+0x42>
 800a1c4:	6811      	ldr	r1, [r2, #0]
 800a1c6:	1850      	adds	r0, r2, r1
 800a1c8:	42a0      	cmp	r0, r4
 800a1ca:	d10b      	bne.n	800a1e4 <_free_r+0x6c>
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	4401      	add	r1, r0
 800a1d0:	1850      	adds	r0, r2, r1
 800a1d2:	4283      	cmp	r3, r0
 800a1d4:	6011      	str	r1, [r2, #0]
 800a1d6:	d1e0      	bne.n	800a19a <_free_r+0x22>
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	6053      	str	r3, [r2, #4]
 800a1de:	4408      	add	r0, r1
 800a1e0:	6010      	str	r0, [r2, #0]
 800a1e2:	e7da      	b.n	800a19a <_free_r+0x22>
 800a1e4:	d902      	bls.n	800a1ec <_free_r+0x74>
 800a1e6:	230c      	movs	r3, #12
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	e7d6      	b.n	800a19a <_free_r+0x22>
 800a1ec:	6820      	ldr	r0, [r4, #0]
 800a1ee:	1821      	adds	r1, r4, r0
 800a1f0:	428b      	cmp	r3, r1
 800a1f2:	bf04      	itt	eq
 800a1f4:	6819      	ldreq	r1, [r3, #0]
 800a1f6:	685b      	ldreq	r3, [r3, #4]
 800a1f8:	6063      	str	r3, [r4, #4]
 800a1fa:	bf04      	itt	eq
 800a1fc:	1809      	addeq	r1, r1, r0
 800a1fe:	6021      	streq	r1, [r4, #0]
 800a200:	6054      	str	r4, [r2, #4]
 800a202:	e7ca      	b.n	800a19a <_free_r+0x22>
 800a204:	bd38      	pop	{r3, r4, r5, pc}
 800a206:	bf00      	nop
 800a208:	200009e0 	.word	0x200009e0

0800a20c <_init>:
 800a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20e:	bf00      	nop
 800a210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a212:	bc08      	pop	{r3}
 800a214:	469e      	mov	lr, r3
 800a216:	4770      	bx	lr

0800a218 <_fini>:
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21a:	bf00      	nop
 800a21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21e:	bc08      	pop	{r3}
 800a220:	469e      	mov	lr, r3
 800a222:	4770      	bx	lr
