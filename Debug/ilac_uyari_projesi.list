
ilac_uyari_projesi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c9c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009e24  08009e24  0000ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e40  08009e40  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e40  08009e40  0000ae40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e48  08009e48  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e48  08009e48  0000ae48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e4c  08009e4c  0000ae4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009e50  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000aa8  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b24  20000b24  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018599  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004305  00000000  00000000  00023645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  00027950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100a  00000000  00000000  00028e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025541  00000000  00000000  00029e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d589  00000000  00000000  0004f3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d257c  00000000  00000000  0006c934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013eeb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aa8  00000000  00000000  0013eef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0014499c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e0c 	.word	0x08009e0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009e0c 	.word	0x08009e0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Flash_WR>:
 *      Author: ilbeyli
 */

#include "FLASH_PROCESS_lib.h"

void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80004c2:	f001 f8a5 	bl	8001610 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 80004c6:	2102      	movs	r1, #2
 80004c8:	200b      	movs	r0, #11
 80004ca:	f001 fa03 	bl	80018d4 <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	2200      	movs	r2, #0
 80004d2:	461c      	mov	r4, r3
 80004d4:	4615      	mov	r5, r2
 80004d6:	4622      	mov	r2, r4
 80004d8:	462b      	mov	r3, r5
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	2002      	movs	r0, #2
 80004de:	f001 f843 	bl	8001568 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80004e2:	f001 f8b7 	bl	8001654 <HAL_FLASH_Lock>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080004f0 <process_alarm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void process_alarm(bool AlarmState, int time){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	71fb      	strb	r3, [r7, #7]
	if(AlarmState == true){
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d076      	beq.n	80005f0 <process_alarm+0x100>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8000502:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000506:	484c      	ldr	r0, [pc, #304]	@ (8000638 <process_alarm+0x148>)
 8000508:	f001 fbf9 	bl	8001cfe <HAL_GPIO_TogglePin>

//		06:00 - 11:59 → Sabah
//		12:00 - 17:59 → Öğle
//		18:00 - 23:59 → Akşam
//		00:00 - 05:59 → Gece
			if (6 <= time && time < 12) {
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	2b05      	cmp	r3, #5
 8000510:	dd1a      	ble.n	8000548 <process_alarm+0x58>
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	2b0b      	cmp	r3, #11
 8000516:	dc17      	bgt.n	8000548 <process_alarm+0x58>
			    // Sabah
				HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000518:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051c:	4846      	ldr	r0, [pc, #280]	@ (8000638 <process_alarm+0x148>)
 800051e:	f001 fbee 	bl	8001cfe <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000528:	4843      	ldr	r0, [pc, #268]	@ (8000638 <process_alarm+0x148>)
 800052a:	f001 fbcf 	bl	8001ccc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000534:	4840      	ldr	r0, [pc, #256]	@ (8000638 <process_alarm+0x148>)
 8000536:	f001 fbc9 	bl	8001ccc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000540:	483d      	ldr	r0, [pc, #244]	@ (8000638 <process_alarm+0x148>)
 8000542:	f001 fbc3 	bl	8001ccc <HAL_GPIO_WritePin>
 8000546:	e072      	b.n	800062e <process_alarm+0x13e>
			}
			else if (12 <= time && time < 18) {
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2b0b      	cmp	r3, #11
 800054c:	dd1a      	ble.n	8000584 <process_alarm+0x94>
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2b11      	cmp	r3, #17
 8000552:	dc17      	bgt.n	8000584 <process_alarm+0x94>
			    // Öğle
				HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8000554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000558:	4837      	ldr	r0, [pc, #220]	@ (8000638 <process_alarm+0x148>)
 800055a:	f001 fbd0 	bl	8001cfe <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000564:	4834      	ldr	r0, [pc, #208]	@ (8000638 <process_alarm+0x148>)
 8000566:	f001 fbb1 	bl	8001ccc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000570:	4831      	ldr	r0, [pc, #196]	@ (8000638 <process_alarm+0x148>)
 8000572:	f001 fbab 	bl	8001ccc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057c:	482e      	ldr	r0, [pc, #184]	@ (8000638 <process_alarm+0x148>)
 800057e:	f001 fba5 	bl	8001ccc <HAL_GPIO_WritePin>
 8000582:	e054      	b.n	800062e <process_alarm+0x13e>
			}
			else if (18 <= time && time < 24) {
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b11      	cmp	r3, #17
 8000588:	dd1a      	ble.n	80005c0 <process_alarm+0xd0>
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b17      	cmp	r3, #23
 800058e:	dc17      	bgt.n	80005c0 <process_alarm+0xd0>
			    // Akşam
				HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 8000590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000594:	4828      	ldr	r0, [pc, #160]	@ (8000638 <process_alarm+0x148>)
 8000596:	f001 fbb2 	bl	8001cfe <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005a0:	4825      	ldr	r0, [pc, #148]	@ (8000638 <process_alarm+0x148>)
 80005a2:	f001 fb93 	bl	8001ccc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ac:	4822      	ldr	r0, [pc, #136]	@ (8000638 <process_alarm+0x148>)
 80005ae:	f001 fb8d 	bl	8001ccc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005b8:	481f      	ldr	r0, [pc, #124]	@ (8000638 <process_alarm+0x148>)
 80005ba:	f001 fb87 	bl	8001ccc <HAL_GPIO_WritePin>
 80005be:	e036      	b.n	800062e <process_alarm+0x13e>
			}
			else {
			    // Gece
				HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 80005c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c4:	481c      	ldr	r0, [pc, #112]	@ (8000638 <process_alarm+0x148>)
 80005c6:	f001 fb9a 	bl	8001cfe <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d0:	4819      	ldr	r0, [pc, #100]	@ (8000638 <process_alarm+0x148>)
 80005d2:	f001 fb7b 	bl	8001ccc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005dc:	4816      	ldr	r0, [pc, #88]	@ (8000638 <process_alarm+0x148>)
 80005de:	f001 fb75 	bl	8001ccc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e8:	4813      	ldr	r0, [pc, #76]	@ (8000638 <process_alarm+0x148>)
 80005ea:	f001 fb6f 	bl	8001ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
	}
}
 80005ee:	e01e      	b.n	800062e <process_alarm+0x13e>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f6:	4810      	ldr	r0, [pc, #64]	@ (8000638 <process_alarm+0x148>)
 80005f8:	f001 fb68 	bl	8001ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000602:	480d      	ldr	r0, [pc, #52]	@ (8000638 <process_alarm+0x148>)
 8000604:	f001 fb62 	bl	8001ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <process_alarm+0x148>)
 8000610:	f001 fb5c 	bl	8001ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061a:	4807      	ldr	r0, [pc, #28]	@ (8000638 <process_alarm+0x148>)
 800061c:	f001 fb56 	bl	8001ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <process_alarm+0x148>)
 8000628:	f001 fb50 	bl	8001ccc <HAL_GPIO_WritePin>
}
 800062c:	e7ff      	b.n	800062e <process_alarm+0x13e>
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020c00 	.word	0x40020c00

0800063c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d102      	bne.n	8000652 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	AlarmTriggered = true;
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x24>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
    }

}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200001d9 	.word	0x200001d9

08000664 <SevenSDisplay1_null>:
            HAL_GPIO_WritePin(dp1_GPIO_Port, dp1_Pin, GPIO_PIN_RESET);
            break;
    }
}

void SevenSDisplay1_null(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2180      	movs	r1, #128	@ 0x80
 800066c:	4817      	ldr	r0, [pc, #92]	@ (80006cc <SevenSDisplay1_null+0x68>)
 800066e:	f001 fb2d 	bl	8001ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000678:	4814      	ldr	r0, [pc, #80]	@ (80006cc <SevenSDisplay1_null+0x68>)
 800067a:	f001 fb27 	bl	8001ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000684:	4811      	ldr	r0, [pc, #68]	@ (80006cc <SevenSDisplay1_null+0x68>)
 8000686:	f001 fb21 	bl	8001ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000690:	480e      	ldr	r0, [pc, #56]	@ (80006cc <SevenSDisplay1_null+0x68>)
 8000692:	f001 fb1b 	bl	8001ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <SevenSDisplay1_null+0x68>)
 800069e:	f001 fb15 	bl	8001ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a8:	4808      	ldr	r0, [pc, #32]	@ (80006cc <SevenSDisplay1_null+0x68>)
 80006aa:	f001 fb0f 	bl	8001ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b4:	4805      	ldr	r0, [pc, #20]	@ (80006cc <SevenSDisplay1_null+0x68>)
 80006b6:	f001 fb09 	bl	8001ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(dp1_GPIO_Port, dp1_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <SevenSDisplay1_null+0x68>)
 80006c2:	f001 fb03 	bl	8001ccc <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fd9f 	bl	8001218 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f8d1 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 fa5b 	bl	8000b98 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e2:	f000 f939 	bl	8000958 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006e6:	f000 f965 	bl	80009b4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006ea:	f000 fa1f 	bl	8000b2c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80006ee:	f008 ff37 	bl	8009560 <MX_USB_HOST_Init>
  MX_RTC_Init();
 80006f2:	f000 f98f 	bl	8000a14 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  RTC_Time.Hours = 21;
 80006f6:	4b54      	ldr	r3, [pc, #336]	@ (8000848 <main+0x178>)
 80006f8:	2215      	movs	r2, #21
 80006fa:	701a      	strb	r2, [r3, #0]
  RTC_Time.Minutes = 15;
 80006fc:	4b52      	ldr	r3, [pc, #328]	@ (8000848 <main+0x178>)
 80006fe:	220f      	movs	r2, #15
 8000700:	705a      	strb	r2, [r3, #1]
  RTC_Time.Seconds = 0;
 8000702:	4b51      	ldr	r3, [pc, #324]	@ (8000848 <main+0x178>)
 8000704:	2200      	movs	r2, #0
 8000706:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8000708:	2200      	movs	r2, #0
 800070a:	494f      	ldr	r1, [pc, #316]	@ (8000848 <main+0x178>)
 800070c:	484f      	ldr	r0, [pc, #316]	@ (800084c <main+0x17c>)
 800070e:	f005 f88a 	bl	8005826 <HAL_RTC_SetTime>

  RTC_Date.Year = 25;
 8000712:	4b4f      	ldr	r3, [pc, #316]	@ (8000850 <main+0x180>)
 8000714:	2219      	movs	r2, #25
 8000716:	70da      	strb	r2, [r3, #3]
  RTC_Date.Month = RTC_MONTH_FEBRUARY;
 8000718:	4b4d      	ldr	r3, [pc, #308]	@ (8000850 <main+0x180>)
 800071a:	2202      	movs	r2, #2
 800071c:	705a      	strb	r2, [r3, #1]
  RTC_Date.Date = 1;
 800071e:	4b4c      	ldr	r3, [pc, #304]	@ (8000850 <main+0x180>)
 8000720:	2201      	movs	r2, #1
 8000722:	709a      	strb	r2, [r3, #2]
  RTC_Date.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000724:	4b4a      	ldr	r3, [pc, #296]	@ (8000850 <main+0x180>)
 8000726:	2207      	movs	r2, #7
 8000728:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
 800072a:	2200      	movs	r2, #0
 800072c:	4948      	ldr	r1, [pc, #288]	@ (8000850 <main+0x180>)
 800072e:	4847      	ldr	r0, [pc, #284]	@ (800084c <main+0x17c>)
 8000730:	f005 f971 	bl	8005a16 <HAL_RTC_SetDate>

  RTC_AlarmTime.Hours = 21;
 8000734:	4b47      	ldr	r3, [pc, #284]	@ (8000854 <main+0x184>)
 8000736:	2215      	movs	r2, #21
 8000738:	701a      	strb	r2, [r3, #0]
  RTC_AlarmTime.Minutes = 16;
 800073a:	4b46      	ldr	r3, [pc, #280]	@ (8000854 <main+0x184>)
 800073c:	2210      	movs	r2, #16
 800073e:	705a      	strb	r2, [r3, #1]
  RTC_AlarmTime.Seconds = 0;
 8000740:	4b44      	ldr	r3, [pc, #272]	@ (8000854 <main+0x184>)
 8000742:	2200      	movs	r2, #0
 8000744:	709a      	strb	r2, [r3, #2]

  SevenSDisplay1_null();
 8000746:	f7ff ff8d 	bl	8000664 <SevenSDisplay1_null>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800074a:	f008 ff2f 	bl	80095ac <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800074e:	2200      	movs	r2, #0
 8000750:	493d      	ldr	r1, [pc, #244]	@ (8000848 <main+0x178>)
 8000752:	483e      	ldr	r0, [pc, #248]	@ (800084c <main+0x17c>)
 8000754:	f005 f901 	bl	800595a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
 8000758:	2200      	movs	r2, #0
 800075a:	493d      	ldr	r1, [pc, #244]	@ (8000850 <main+0x180>)
 800075c:	483b      	ldr	r0, [pc, #236]	@ (800084c <main+0x17c>)
 800075e:	f005 f9de 	bl	8005b1e <HAL_RTC_GetDate>


    if(HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == GPIO_PIN_SET){
 8000762:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000766:	483c      	ldr	r0, [pc, #240]	@ (8000858 <main+0x188>)
 8000768:	f001 fa98 	bl	8001c9c <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d12f      	bne.n	80007d2 <main+0x102>
    	button1_flag +=1;
 8000772:	4b3a      	ldr	r3, [pc, #232]	@ (800085c <main+0x18c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	4a38      	ldr	r2, [pc, #224]	@ (800085c <main+0x18c>)
 800077a:	6013      	str	r3, [r2, #0]
    	if (button1_flag >= 5){
 800077c:	4b37      	ldr	r3, [pc, #220]	@ (800085c <main+0x18c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b04      	cmp	r3, #4
 8000782:	dd26      	ble.n	80007d2 <main+0x102>
    		int setMinutes = (PickerMinutes1*10) + PickerMinutes2;
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <main+0x190>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	461a      	mov	r2, r3
 8000792:	4b34      	ldr	r3, [pc, #208]	@ (8000864 <main+0x194>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	607b      	str	r3, [r7, #4]
    		int setHours = (PickerHours1*10) + PickerHours2;
 800079a:	4b33      	ldr	r3, [pc, #204]	@ (8000868 <main+0x198>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b30      	ldr	r3, [pc, #192]	@ (800086c <main+0x19c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	603b      	str	r3, [r7, #0]
    		Flash_WR(flash_hours, setHours);
 80007b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <main+0x1a0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fe7d 	bl	80004b8 <Flash_WR>
    		Flash_WR(flash_minutes, setMinutes);
 80007be:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <main+0x1a4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe76 	bl	80004b8 <Flash_WR>
    		button1_flag = 0;
 80007cc:	4b23      	ldr	r3, [pc, #140]	@ (800085c <main+0x18c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
    	}
    }
    if(button1_flag == 0){
 80007d2:	4b22      	ldr	r3, [pc, #136]	@ (800085c <main+0x18c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1b7      	bne.n	800074a <main+0x7a>
        if(!AlarmTriggered && RTC_AlarmTime.Hours==RTC_Time.Hours && RTC_AlarmTime.Minutes == RTC_Time.Minutes){
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <main+0x1a8>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	f083 0301 	eor.w	r3, r3, #1
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00f      	beq.n	8000808 <main+0x138>
 80007e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <main+0x184>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <main+0x178>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d109      	bne.n	8000808 <main+0x138>
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <main+0x184>)
 80007f6:	785a      	ldrb	r2, [r3, #1]
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <main+0x178>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d103      	bne.n	8000808 <main+0x138>
        	AlarmState = true;
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <main+0x1ac>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e002      	b.n	800080e <main+0x13e>
        }
        else{
        	AlarmState = false;
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <main+0x1ac>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
        }
        if(RTC_AlarmTime.Hours==RTC_Time.Hours && (RTC_AlarmTime.Minutes + 1)  == RTC_Time.Minutes ){
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <main+0x184>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <main+0x178>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	429a      	cmp	r2, r3
 8000818:	d109      	bne.n	800082e <main+0x15e>
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <main+0x184>)
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	3301      	adds	r3, #1
 8000820:	4a09      	ldr	r2, [pc, #36]	@ (8000848 <main+0x178>)
 8000822:	7852      	ldrb	r2, [r2, #1]
 8000824:	4293      	cmp	r3, r2
 8000826:	d102      	bne.n	800082e <main+0x15e>
        	AlarmTriggered = false;
 8000828:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <main+0x1a8>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
        }
        process_alarm(AlarmState, RTC_AlarmTime.Hours);
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <main+0x1ac>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <main+0x184>)
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe59 	bl	80004f0 <process_alarm>
        HAL_Delay(100);
 800083e:	2064      	movs	r0, #100	@ 0x64
 8000840:	f000 fd5c 	bl	80012fc <HAL_Delay>
    MX_USB_HOST_Process();
 8000844:	e781      	b.n	800074a <main+0x7a>
 8000846:	bf00      	nop
 8000848:	200001ac 	.word	0x200001ac
 800084c:	20000134 	.word	0x20000134
 8000850:	200001d4 	.word	0x200001d4
 8000854:	200001c0 	.word	0x200001c0
 8000858:	40020c00 	.word	0x40020c00
 800085c:	200001dc 	.word	0x200001dc
 8000860:	200001e8 	.word	0x200001e8
 8000864:	200001ec 	.word	0x200001ec
 8000868:	200001e0 	.word	0x200001e0
 800086c:	200001e4 	.word	0x200001e4
 8000870:	200001f0 	.word	0x200001f0
 8000874:	200001f4 	.word	0x200001f4
 8000878:	200001d9 	.word	0x200001d9
 800087c:	200001d8 	.word	0x200001d8

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	@ 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f009 fa2e 	bl	8009cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <SystemClock_Config+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	4a28      	ldr	r2, [pc, #160]	@ (8000950 <SystemClock_Config+0xd0>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <SystemClock_Config+0xd0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a22      	ldr	r2, [pc, #136]	@ (8000954 <SystemClock_Config+0xd4>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <SystemClock_Config+0xd4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008dc:	2309      	movs	r3, #9
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008e6:	2301      	movs	r3, #1
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000902:	2307      	movs	r3, #7
 8000904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f004 f942 	bl	8004b94 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000916:	f000 fa53 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000926:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2105      	movs	r1, #5
 8000938:	4618      	mov	r0, r3
 800093a:	f004 fba3 	bl	8005084 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000944:	f000 fa3c 	bl	8000dc0 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	@ 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_I2C1_Init+0x50>)
 800095e:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <MX_I2C1_Init+0x54>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <MX_I2C1_Init+0x58>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000976:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800097a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_I2C1_Init+0x50>)
 8000996:	f003 fb19 	bl	8003fcc <HAL_I2C_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 fa0e 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000098 	.word	0x20000098
 80009ac:	40005400 	.word	0x40005400
 80009b0:	000186a0 	.word	0x000186a0

080009b4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009ba:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <MX_I2S3_Init+0x58>)
 80009bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a10 <MX_I2S3_Init+0x5c>)
 80009de:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_I2S3_Init+0x54>)
 80009f4:	f003 fc2e 	bl	8004254 <HAL_I2S_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009fe:	f000 f9df 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000ec 	.word	0x200000ec
 8000a0c:	40003c00 	.word	0x40003c00
 8000a10:	00017700 	.word	0x00017700

08000a14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b090      	sub	sp, #64	@ 0x40
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2228      	movs	r2, #40	@ 0x28
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f009 f95b 	bl	8009cf0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b28 <MX_RTC_Init+0x114>)
 8000a3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a40:	4b38      	ldr	r3, [pc, #224]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a46:	4b37      	ldr	r3, [pc, #220]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a48:	227f      	movs	r2, #127	@ 0x7f
 8000a4a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a4c:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a4e:	22ff      	movs	r2, #255	@ 0xff
 8000a50:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a52:	4b34      	ldr	r3, [pc, #208]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a58:	4b32      	ldr	r3, [pc, #200]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a5e:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a64:	482f      	ldr	r0, [pc, #188]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a66:	f004 fe5b 	bl	8005720 <HAL_RTC_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000a70:	f000 f9a6 	bl	8000dc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000a74:	2311      	movs	r3, #17
 8000a76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 5;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4823      	ldr	r0, [pc, #140]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000a98:	f004 fec5 	bl	8005826 <HAL_RTC_SetTime>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000aa2:	f000 f98d 	bl	8000dc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000aac:	2302      	movs	r3, #2
 8000aae:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000abe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4817      	ldr	r0, [pc, #92]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000ac8:	f004 ffa5 	bl	8005a16 <HAL_RTC_SetDate>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000ad2:	f000 f975 	bl	8000dc0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 8000ade:	230a      	movs	r3, #10
 8000ae0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_RTC_Init+0x110>)
 8000b0e:	f005 f855 	bl	8005bbc <HAL_RTC_SetAlarm_IT>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000b18:	f000 f952 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3740      	adds	r7, #64	@ 0x40
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000134 	.word	0x20000134
 8000b28:	40002800 	.word	0x40002800

08000b2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b32:	4a18      	ldr	r2, [pc, #96]	@ (8000b94 <MX_SPI1_Init+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b78:	220a      	movs	r2, #10
 8000b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_SPI1_Init+0x64>)
 8000b7e:	f005 fa79 	bl	8006074 <HAL_SPI_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b88:	f000 f91a 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000154 	.word	0x20000154
 8000b94:	40013000 	.word	0x40013000

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	@ 0x30
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	4b76      	ldr	r3, [pc, #472]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a75      	ldr	r2, [pc, #468]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b73      	ldr	r3, [pc, #460]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b6f      	ldr	r3, [pc, #444]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a6e      	ldr	r2, [pc, #440]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b68      	ldr	r3, [pc, #416]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a67      	ldr	r2, [pc, #412]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b65      	ldr	r3, [pc, #404]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b61      	ldr	r3, [pc, #388]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a60      	ldr	r2, [pc, #384]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a59      	ldr	r2, [pc, #356]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b57      	ldr	r3, [pc, #348]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|g1_Pin|f1_Pin|a1_Pin
 8000c56:	2200      	movs	r2, #0
 8000c58:	f647 7188 	movw	r1, #32648	@ 0x7f88
 8000c5c:	4853      	ldr	r0, [pc, #332]	@ (8000dac <MX_GPIO_Init+0x214>)
 8000c5e:	f001 f835 	bl	8001ccc <HAL_GPIO_WritePin>
                          |b1_Pin|e1_Pin|d1_Pin|dp1_Pin
                          |c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2101      	movs	r1, #1
 8000c66:	4852      	ldr	r0, [pc, #328]	@ (8000db0 <MX_GPIO_Init+0x218>)
 8000c68:	f001 f830 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, buzzer_Pin|led4_Pin|led3_Pin|led2_Pin
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f64f 0110 	movw	r1, #63504	@ 0xf810
 8000c72:	4850      	ldr	r0, [pc, #320]	@ (8000db4 <MX_GPIO_Init+0x21c>)
 8000c74:	f001 f82a 	bl	8001ccc <HAL_GPIO_WritePin>
                          |led1_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin g1_Pin f1_Pin a1_Pin
                           b1_Pin e1_Pin d1_Pin dp1_Pin
                           c1_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|g1_Pin|f1_Pin|a1_Pin
 8000c78:	f647 7388 	movw	r3, #32648	@ 0x7f88
 8000c7c:	61fb      	str	r3, [r7, #28]
                          |b1_Pin|e1_Pin|d1_Pin|dp1_Pin
                          |c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4846      	ldr	r0, [pc, #280]	@ (8000dac <MX_GPIO_Init+0x214>)
 8000c92:	f000 fe67 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4840      	ldr	r0, [pc, #256]	@ (8000db0 <MX_GPIO_Init+0x218>)
 8000cae:	f000 fe59 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4838      	ldr	r0, [pc, #224]	@ (8000db0 <MX_GPIO_Init+0x218>)
 8000cce:	f000 fe49 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <MX_GPIO_Init+0x220>)
 8000ce8:	f000 fe3c 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cec:	2304      	movs	r3, #4
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	482f      	ldr	r0, [pc, #188]	@ (8000dbc <MX_GPIO_Init+0x224>)
 8000d00:	f000 fe30 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d16:	2305      	movs	r3, #5
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4826      	ldr	r0, [pc, #152]	@ (8000dbc <MX_GPIO_Init+0x224>)
 8000d22:	f000 fe1f 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : button2_Pin button1_Pin */
  GPIO_InitStruct.Pin = button2_Pin|button1_Pin;
 8000d26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d30:	2302      	movs	r3, #2
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481e      	ldr	r0, [pc, #120]	@ (8000db4 <MX_GPIO_Init+0x21c>)
 8000d3c:	f000 fe12 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzer_Pin led4_Pin led3_Pin led2_Pin
                           led1_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin|led4_Pin|led3_Pin|led2_Pin
 8000d40:	f64f 0310 	movw	r3, #63504	@ 0xf810
 8000d44:	61fb      	str	r3, [r7, #28]
                          |led1_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4816      	ldr	r0, [pc, #88]	@ (8000db4 <MX_GPIO_Init+0x21c>)
 8000d5a:	f000 fe03 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4810      	ldr	r0, [pc, #64]	@ (8000db4 <MX_GPIO_Init+0x21c>)
 8000d72:	f000 fdf7 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4808      	ldr	r0, [pc, #32]	@ (8000dac <MX_GPIO_Init+0x214>)
 8000d8c:	f000 fdea 	bl	8001964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2006      	movs	r0, #6
 8000d96:	f000 fbb0 	bl	80014fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d9a:	2006      	movs	r0, #6
 8000d9c:	f000 fbc9 	bl	8001532 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da0:	bf00      	nop
 8000da2:	3730      	adds	r7, #48	@ 0x30
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020c00 	.word	0x40020c00
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e0a:	2007      	movs	r0, #7
 8000e0c:	f000 fb6a 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a19      	ldr	r2, [pc, #100]	@ (8000ea0 <HAL_I2C_MspInit+0x84>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12c      	bne.n	8000e98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e5a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e60:	2312      	movs	r3, #18
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <HAL_I2C_MspInit+0x8c>)
 8000e78:	f000 fd74 	bl	8001964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	@ 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	@ 0x38
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a31      	ldr	r2, [pc, #196]	@ (8000f9c <HAL_I2S_MspInit+0xf0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d15a      	bne.n	8000f92 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000edc:	2301      	movs	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ee0:	23c0      	movs	r3, #192	@ 0xc0
 8000ee2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fad5 	bl	800549c <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ef8:	f7ff ff62 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	4a26      	ldr	r2, [pc, #152]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	4a18      	ldr	r2, [pc, #96]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_I2S_MspInit+0xf4>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f50:	2310      	movs	r3, #16
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f60:	2306      	movs	r3, #6
 8000f62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <HAL_I2S_MspInit+0xf8>)
 8000f6c:	f000 fcfa 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f70:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f82:	2306      	movs	r3, #6
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <HAL_I2S_MspInit+0xfc>)
 8000f8e:	f000 fce9 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f92:	bf00      	nop
 8000f94:	3738      	adds	r7, #56	@ 0x38
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40003c00 	.word	0x40003c00
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020800 	.word	0x40020800

08000fac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_RTC_MspInit+0x5c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d119      	bne.n	8001000 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fa5e 	bl	800549c <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000fe6:	f7ff feeb 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_RTC_MspInit+0x60>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2029      	movs	r0, #41	@ 0x29
 8000ff6:	f000 fa80 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000ffa:	2029      	movs	r0, #41	@ 0x29
 8000ffc:	f000 fa99 	bl	8001532 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40002800 	.word	0x40002800
 800100c:	42470e3c 	.word	0x42470e3c

08001010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <HAL_SPI_MspInit+0x84>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12b      	bne.n	800108a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_SPI_MspInit+0x88>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <HAL_SPI_MspInit+0x88>)
 800103c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_SPI_MspInit+0x88>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_SPI_MspInit+0x88>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <HAL_SPI_MspInit+0x88>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_SPI_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800106a:	23e0      	movs	r3, #224	@ 0xe0
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800107a:	2305      	movs	r3, #5
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_SPI_MspInit+0x8c>)
 8001086:	f000 fc6d 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40013000 	.word	0x40013000
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <NMI_Handler+0x4>

080010a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <MemManage_Handler+0x4>

080010b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f6:	f000 f8e1 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}

080010fe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 fe16 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <RTC_Alarm_IRQHandler+0x10>)
 8001112:	f004 fe97 	bl	8005e44 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000134 	.word	0x20000134

08001120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <OTG_FS_IRQHandler+0x10>)
 8001126:	f001 f8fd 	bl	8002324 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200005fc 	.word	0x200005fc

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f008 fddc 	bl	8009d20 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]

  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20020000 	.word	0x20020000
 8001194:	00000400 	.word	0x00000400
 8001198:	200001f8 	.word	0x200001f8
 800119c:	20000b28 	.word	0x20000b28

080011a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011c8:	f7ff ffea 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	@ (8001204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f008 fd9b 	bl	8009d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff fa6b 	bl	80006d0 <main>
  bx  lr    
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001208:	08009e50 	.word	0x08009e50
  ldr r2, =_sbss
 800120c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001210:	20000b24 	.word	0x20000b24

08001214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <HAL_Init+0x40>)
 8001222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_Init+0x40>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_Init+0x40>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f94f 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f808 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fdbe 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f967 	bl	800154e <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f000 f92f 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	200001fc 	.word	0x200001fc

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200001fc 	.word	0x200001fc

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	@ (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff3e 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800157a:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <HAL_FLASH_Program+0xa0>)
 800157c:	7e1b      	ldrb	r3, [r3, #24]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_FLASH_Program+0x1e>
 8001582:	2302      	movs	r3, #2
 8001584:	e03b      	b.n	80015fe <HAL_FLASH_Program+0x96>
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_FLASH_Program+0xa0>)
 8001588:	2201      	movs	r2, #1
 800158a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800158c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001590:	f000 f870 	bl	8001674 <FLASH_WaitForLastOperation>
 8001594:	4603      	mov	r3, r0
 8001596:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d12b      	bne.n	80015f6 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80015a4:	783b      	ldrb	r3, [r7, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f000 f91b 	bl	80017e4 <FLASH_Program_Byte>
 80015ae:	e016      	b.n	80015de <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80015b6:	883b      	ldrh	r3, [r7, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	68b8      	ldr	r0, [r7, #8]
 80015bc:	f000 f8ee 	bl	800179c <FLASH_Program_HalfWord>
 80015c0:	e00d      	b.n	80015de <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d105      	bne.n	80015d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f000 f8c3 	bl	8001758 <FLASH_Program_Word>
 80015d2:	e004      	b.n	80015de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80015d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f000 f88b 	bl	80016f4 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015e2:	f000 f847 	bl	8001674 <FLASH_WaitForLastOperation>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_FLASH_Program+0xa4>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_FLASH_Program+0xa4>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <HAL_FLASH_Program+0xa0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	761a      	strb	r2, [r3, #24]

  return status;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000200 	.word	0x20000200
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_FLASH_Unlock+0x38>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da0b      	bge.n	800163a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_FLASH_Unlock+0x38>)
 8001624:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_FLASH_Unlock+0x3c>)
 8001626:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <HAL_FLASH_Unlock+0x38>)
 800162a:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <HAL_FLASH_Unlock+0x40>)
 800162c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_FLASH_Unlock+0x38>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da01      	bge.n	800163a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800163a:	79fb      	ldrb	r3, [r7, #7]
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40023c00 	.word	0x40023c00
 800164c:	45670123 	.word	0x45670123
 8001650:	cdef89ab 	.word	0xcdef89ab

08001654 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_FLASH_Lock+0x1c>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <HAL_FLASH_Lock+0x1c>)
 800165e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001662:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40023c00 	.word	0x40023c00

08001674 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <FLASH_WaitForLastOperation+0x78>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001686:	f7ff fe2d 	bl	80012e4 <HAL_GetTick>
 800168a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800168c:	e010      	b.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d00c      	beq.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <FLASH_WaitForLastOperation+0x38>
 800169c:	f7ff fe22 	bl	80012e4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d201      	bcs.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e019      	b.n	80016e4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <FLASH_WaitForLastOperation+0x7c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e8      	bne.n	800168e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <FLASH_WaitForLastOperation+0x7c>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <FLASH_WaitForLastOperation+0x7c>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <FLASH_WaitForLastOperation+0x7c>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80016da:	f000 f8a5 	bl	8001828 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0

}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000200 	.word	0x20000200
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a13      	ldr	r2, [pc, #76]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 8001706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800170a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 8001712:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800172a:	f3bf 8f6f 	isb	sy
}
 800172e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001730:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	000a      	movs	r2, r1
 800173e:	2300      	movs	r3, #0
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	3104      	adds	r1, #4
 8001744:	4613      	mov	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40023c00 	.word	0x40023c00

08001758 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800176c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	4a09      	ldr	r2, [pc, #36]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001778:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <FLASH_Program_Word+0x40>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40023c00 	.word	0x40023c00

0800179c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	801a      	strh	r2, [r3, #0]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <FLASH_Program_Byte+0x40>)
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <FLASH_Program_Byte+0x40>)
 80017f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <FLASH_Program_Byte+0x40>)
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <FLASH_Program_Byte+0x40>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <FLASH_Program_Byte+0x40>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <FLASH_Program_Byte+0x40>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800182c:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001838:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	4a23      	ldr	r2, [pc, #140]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 8001842:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001844:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 8001846:	2210      	movs	r2, #16
 8001848:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001856:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	4a1c      	ldr	r2, [pc, #112]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 8001860:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 8001864:	2220      	movs	r2, #32
 8001866:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001868:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001874:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 800187e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 800189c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 80018a0:	2280      	movs	r2, #128	@ 0x80
 80018a2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80018b0:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <FLASH_SetErrorCode+0xa8>)
 80018ba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <FLASH_SetErrorCode+0xa4>)
 80018be:	2202      	movs	r2, #2
 80018c0:	60da      	str	r2, [r3, #12]
  }
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40023c00 	.word	0x40023c00
 80018d0:	20000200 	.word	0x20000200

080018d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e010      	b.n	8001912 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d103      	bne.n	80018fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80018f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e009      	b.n	8001912 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d103      	bne.n	800190c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001904:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e002      	b.n	8001912 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800190c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001910:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 8001918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800191c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	490f      	ldr	r1, [pc, #60]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a0c      	ldr	r2, [pc, #48]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 8001930:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001934:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4313      	orrs	r3, r2
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <FLASH_Erase_Sector+0x8c>)
 800194e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001952:	6113      	str	r3, [r2, #16]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e16b      	b.n	8001c58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 815a 	bne.w	8001c52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d005      	beq.n	80019b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d130      	bne.n	8001a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d017      	beq.n	8001a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80b4 	beq.w	8001c52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b60      	ldr	r3, [pc, #384]	@ (8001c70 <HAL_GPIO_Init+0x30c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	4a5f      	ldr	r2, [pc, #380]	@ (8001c70 <HAL_GPIO_Init+0x30c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afa:	4b5d      	ldr	r3, [pc, #372]	@ (8001c70 <HAL_GPIO_Init+0x30c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a5b      	ldr	r2, [pc, #364]	@ (8001c74 <HAL_GPIO_Init+0x310>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	@ (8001c78 <HAL_GPIO_Init+0x314>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02b      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a51      	ldr	r2, [pc, #324]	@ (8001c7c <HAL_GPIO_Init+0x318>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a50      	ldr	r2, [pc, #320]	@ (8001c80 <HAL_GPIO_Init+0x31c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4f      	ldr	r2, [pc, #316]	@ (8001c84 <HAL_GPIO_Init+0x320>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c88 <HAL_GPIO_Init+0x324>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x216>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4d      	ldr	r2, [pc, #308]	@ (8001c8c <HAL_GPIO_Init+0x328>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x212>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c90 <HAL_GPIO_Init+0x32c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x20e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	@ (8001c94 <HAL_GPIO_Init+0x330>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x20a>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e00e      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b6e:	2308      	movs	r3, #8
 8001b70:	e00c      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b72:	2306      	movs	r3, #6
 8001b74:	e00a      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	@ (8001c74 <HAL_GPIO_Init+0x310>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_GPIO_Init+0x334>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bce:	4a32      	ldr	r2, [pc, #200]	@ (8001c98 <HAL_GPIO_Init+0x334>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b30      	ldr	r3, [pc, #192]	@ (8001c98 <HAL_GPIO_Init+0x334>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf8:	4a27      	ldr	r2, [pc, #156]	@ (8001c98 <HAL_GPIO_Init+0x334>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	@ (8001c98 <HAL_GPIO_Init+0x334>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c22:	4a1d      	ldr	r2, [pc, #116]	@ (8001c98 <HAL_GPIO_Init+0x334>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <HAL_GPIO_Init+0x334>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4c:	4a12      	ldr	r2, [pc, #72]	@ (8001c98 <HAL_GPIO_Init+0x334>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f ae90 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40021400 	.word	0x40021400
 8001c90:	40021800 	.word	0x40021800
 8001c94:	40021c00 	.word	0x40021c00
 8001c98:	40013c00 	.word	0x40013c00

08001c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e001      	b.n	8001cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce8:	e003      	b.n	8001cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	041a      	lsls	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	041a      	lsls	r2, r3, #16
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	400b      	ands	r3, r1
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d3e:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d4a:	4a05      	ldr	r2, [pc, #20]	@ (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fc72 	bl	800063c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e059      	b.n	8001e2a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f007 fc43 	bl	800961c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001da4:	d102      	bne.n	8001dac <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f004 fa5d 	bl	8006270 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7c1a      	ldrb	r2, [r3, #16]
 8001dbe:	f88d 2000 	strb.w	r2, [sp]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc6:	f004 f9de 	bl	8006186 <USB_CoreInit>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e026      	b.n	8001e2a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	4618      	mov	r0, r3
 8001de4:	f004 fa55 	bl	8006292 <USB_SetCurrentMode>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e017      	b.n	8001e2a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7c1a      	ldrb	r2, [r3, #16]
 8001e02:	f88d 2000 	strb.w	r2, [sp]
 8001e06:	3304      	adds	r3, #4
 8001e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0a:	f004 fbf7 	bl	80065fc <USB_HostInit>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e004      	b.n	8001e2a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001e32:	b590      	push	{r4, r7, lr}
 8001e34:	b08b      	sub	sp, #44	@ 0x2c
 8001e36:	af04      	add	r7, sp, #16
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	4608      	mov	r0, r1
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4603      	mov	r3, r0
 8001e42:	70fb      	strb	r3, [r7, #3]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70bb      	strb	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001e4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e4e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_HCD_HC_Init+0x2c>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e09d      	b.n	8001f9a <HAL_HCD_HC_Init+0x168>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	3319      	adds	r3, #25
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	3314      	adds	r3, #20
 8001e8a:	787a      	ldrb	r2, [r7, #1]
 8001e8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3315      	adds	r3, #21
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	3326      	adds	r3, #38	@ 0x26
 8001eb2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001eb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	78bb      	ldrb	r3, [r7, #2]
 8001ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ec0:	b2d8      	uxtb	r0, r3
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3316      	adds	r3, #22
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fbc7 	bl	800266c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001ede:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da0a      	bge.n	8001efc <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3317      	adds	r3, #23
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e009      	b.n	8001f10 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	3317      	adds	r3, #23
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 fcd5 	bl	80068c4 <USB_GetHostSpeed>
 8001f1a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001f1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d10b      	bne.n	8001f3c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001f24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_HCD_HC_Init+0x10a>
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d104      	bne.n	8001f3c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2bbc      	cmp	r3, #188	@ 0xbc
 8001f36:	d901      	bls.n	8001f3c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001f38:	23bc      	movs	r3, #188	@ 0xbc
 8001f3a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	b298      	uxth	r0, r3
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3328      	adds	r3, #40	@ 0x28
 8001f66:	4602      	mov	r2, r0
 8001f68:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	787c      	ldrb	r4, [r7, #1]
 8001f74:	78ba      	ldrb	r2, [r7, #2]
 8001f76:	78f9      	ldrb	r1, [r7, #3]
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4623      	mov	r3, r4
 8001f88:	f004 fcc4 	bl	8006914 <USB_HC_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd90      	pop	{r4, r7, pc}

08001fa2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_HCD_HC_Halt+0x1e>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e00f      	b.n	8001fe0 <HAL_HCD_HC_Halt+0x3e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f005 f856 	bl	8007082 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	70fb      	strb	r3, [r7, #3]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70bb      	strb	r3, [r7, #2]
 8001ffe:	4613      	mov	r3, r2
 8002000:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3317      	adds	r3, #23
 8002012:	78ba      	ldrb	r2, [r7, #2]
 8002014:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3326      	adds	r3, #38	@ 0x26
 8002026:	787a      	ldrb	r2, [r7, #1]
 8002028:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800202a:	7c3b      	ldrb	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d114      	bne.n	800205a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	332a      	adds	r3, #42	@ 0x2a
 8002040:	2203      	movs	r2, #3
 8002042:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3319      	adds	r3, #25
 8002054:	7f3a      	ldrb	r2, [r7, #28]
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e009      	b.n	800206e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	332a      	adds	r3, #42	@ 0x2a
 800206a:	2202      	movs	r2, #2
 800206c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800206e:	787b      	ldrb	r3, [r7, #1]
 8002070:	2b03      	cmp	r3, #3
 8002072:	f200 8102 	bhi.w	800227a <HAL_HCD_HC_SubmitRequest+0x292>
 8002076:	a201      	add	r2, pc, #4	@ (adr r2, 800207c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	0800208d 	.word	0x0800208d
 8002080:	08002265 	.word	0x08002265
 8002084:	08002151 	.word	0x08002151
 8002088:	080021db 	.word	0x080021db
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800208c:	7c3b      	ldrb	r3, [r7, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	f040 80f5 	bne.w	800227e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d12d      	bne.n	80020f6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800209a:	8b3b      	ldrh	r3, [r7, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	333d      	adds	r3, #61	@ 0x3d
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	333d      	adds	r3, #61	@ 0x3d
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	332a      	adds	r3, #42	@ 0x2a
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80020de:	e0ce      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	332a      	adds	r3, #42	@ 0x2a
 80020f0:	2202      	movs	r2, #2
 80020f2:	701a      	strb	r2, [r3, #0]
      break;
 80020f4:	e0c3      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	331a      	adds	r3, #26
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	f040 80b8 	bne.w	800227e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	333c      	adds	r3, #60	@ 0x3c
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10a      	bne.n	800213a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	332a      	adds	r3, #42	@ 0x2a
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
      break;
 8002138:	e0a1      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	332a      	adds	r3, #42	@ 0x2a
 800214a:	2202      	movs	r2, #2
 800214c:	701a      	strb	r2, [r3, #0]
      break;
 800214e:	e096      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002150:	78bb      	ldrb	r3, [r7, #2]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d120      	bne.n	8002198 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	333d      	adds	r3, #61	@ 0x3d
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	332a      	adds	r3, #42	@ 0x2a
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002180:	e07e      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	332a      	adds	r3, #42	@ 0x2a
 8002192:	2202      	movs	r2, #2
 8002194:	701a      	strb	r2, [r3, #0]
      break;
 8002196:	e073      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	333c      	adds	r3, #60	@ 0x3c
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10a      	bne.n	80021c4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	332a      	adds	r3, #42	@ 0x2a
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
      break;
 80021c2:	e05d      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	332a      	adds	r3, #42	@ 0x2a
 80021d4:	2202      	movs	r2, #2
 80021d6:	701a      	strb	r2, [r3, #0]
      break;
 80021d8:	e052      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d120      	bne.n	8002222 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	333d      	adds	r3, #61	@ 0x3d
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	332a      	adds	r3, #42	@ 0x2a
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800220a:	e039      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	332a      	adds	r3, #42	@ 0x2a
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
      break;
 8002220:	e02e      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	333c      	adds	r3, #60	@ 0x3c
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	332a      	adds	r3, #42	@ 0x2a
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
      break;
 800224c:	e018      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	332a      	adds	r3, #42	@ 0x2a
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
      break;
 8002262:	e00d      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	332a      	adds	r3, #42	@ 0x2a
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
      break;
 8002278:	e002      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800227e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	332c      	adds	r3, #44	@ 0x2c
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	8b39      	ldrh	r1, [r7, #24]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	3334      	adds	r3, #52	@ 0x34
 80022a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	334c      	adds	r3, #76	@ 0x4c
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3338      	adds	r3, #56	@ 0x38
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	3315      	adds	r3, #21
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334d      	adds	r3, #77	@ 0x4d
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	3310      	adds	r3, #16
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	1d19      	adds	r1, r3, #4
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	799b      	ldrb	r3, [r3, #6]
 8002312:	461a      	mov	r2, r3
 8002314:	f004 fc2a 	bl	8006b6c <USB_HC_StartXfer>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop

08002324 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f004 f91f 	bl	800657e <USB_GetMode>
 8002340:	4603      	mov	r3, r0
 8002342:	2b01      	cmp	r3, #1
 8002344:	f040 80fb 	bne.w	800253e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f004 f8e2 	bl	8006516 <USB_ReadInterrupts>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80f1 	beq.w	800253c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f004 f8d9 	bl	8006516 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800236e:	d104      	bne.n	800237a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002378:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f004 f8c9 	bl	8006516 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800238e:	d104      	bne.n	800239a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002398:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 f8b9 	bl	8006516 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ae:	d104      	bne.n	80023ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f8a9 	bl	8006516 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d103      	bne.n	80023d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2202      	movs	r2, #2
 80023d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 f89b 	bl	8006516 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023ea:	d120      	bne.n	800242e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80023f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d113      	bne.n	800242e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002406:	2110      	movs	r1, #16
 8002408:	6938      	ldr	r0, [r7, #16]
 800240a:	f003 ff8e 	bl	800632a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800240e:	6938      	ldr	r0, [r7, #16]
 8002410:	f003 ffbd 	bl	800638e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7a5b      	ldrb	r3, [r3, #9]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d105      	bne.n	8002428 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f004 f9ae 	bl	8006784 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f007 f975 	bl	8009718 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f004 f86f 	bl	8006516 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800243e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002442:	d102      	bne.n	800244a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f001 fd4d 	bl	8003ee4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 f861 	bl	8006516 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b08      	cmp	r3, #8
 800245c:	d106      	bne.n	800246c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f007 f93e 	bl	80096e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2208      	movs	r2, #8
 800246a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f004 f850 	bl	8006516 <USB_ReadInterrupts>
 8002476:	4603      	mov	r3, r0
 8002478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002480:	d139      	bne.n	80024f6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f004 fdea 	bl	8007060 <USB_HC_ReadInterrupt>
 800248c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e025      	b.n	80024e0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d018      	beq.n	80024da <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024be:	d106      	bne.n	80024ce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f905 	bl	80026d6 <HCD_HC_IN_IRQHandler>
 80024cc:	e005      	b.n	80024da <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 ff67 	bl	80033a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	795b      	ldrb	r3, [r3, #5]
 80024e4:	461a      	mov	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d3d3      	bcc.n	8002494 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 f80b 	bl	8006516 <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b10      	cmp	r3, #16
 8002508:	d101      	bne.n	800250e <HAL_HCD_IRQHandler+0x1ea>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_HCD_IRQHandler+0x1ec>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d014      	beq.n	800253e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0210 	bic.w	r2, r2, #16
 8002522:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f001 fbfe 	bl	8003d26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0210 	orr.w	r2, r2, #16
 8002538:	619a      	str	r2, [r3, #24]
 800253a:	e000      	b.n	800253e <HAL_HCD_IRQHandler+0x21a>
      return;
 800253c:	bf00      	nop
    }
  }
}
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_HCD_Start+0x16>
 8002556:	2302      	movs	r3, #2
 8002558:	e013      	b.n	8002582 <HAL_HCD_Start+0x3e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f004 f972 	bl	8006852 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f003 fe6b 	bl	800624e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_HCD_Stop+0x16>
 800259c:	2302      	movs	r3, #2
 800259e:	e00d      	b.n	80025bc <HAL_HCD_Stop+0x32>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f004 fec5 	bl	800733c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f004 f914 	bl	80067fe <USB_ResetPort>
 80025d6:	4603      	mov	r3, r0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	334c      	adds	r3, #76	@ 0x4c
 80025fc:	781b      	ldrb	r3, [r3, #0]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3338      	adds	r3, #56	@ 0x38
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f004 f956 	bl	80068f2 <USB_GetCurrentFrame>
 8002646:	4603      	mov	r3, r0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f004 f931 	bl	80068c4 <USB_GetHostSpeed>
 8002662:	4603      	mov	r3, r0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	331a      	adds	r3, #26
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	331b      	adds	r3, #27
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3325      	adds	r3, #37	@ 0x25
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3324      	adds	r3, #36	@ 0x24
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 ff21 	bl	800653c <USB_ReadChInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b04      	cmp	r3, #4
 8002702:	d11a      	bne.n	800273a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	2304      	movs	r3, #4
 8002714:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	334d      	adds	r3, #77	@ 0x4d
 8002726:	2207      	movs	r2, #7
 8002728:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f004 fca5 	bl	8007082 <USB_HC_Halt>
 8002738:	e09e      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fefa 	bl	800653c <USB_ReadChInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002752:	d11b      	bne.n	800278c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002766:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	334d      	adds	r3, #77	@ 0x4d
 8002778:	2208      	movs	r2, #8
 800277a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fc7c 	bl	8007082 <USB_HC_Halt>
 800278a:	e075      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f003 fed1 	bl	800653c <USB_ReadChInterrupts>
 800279a:	4603      	mov	r3, r0
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d11a      	bne.n	80027da <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b0:	461a      	mov	r2, r3
 80027b2:	2308      	movs	r3, #8
 80027b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	334d      	adds	r3, #77	@ 0x4d
 80027c6:	2206      	movs	r2, #6
 80027c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fc55 	bl	8007082 <USB_HC_Halt>
 80027d8:	e04e      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 feaa 	bl	800653c <USB_ReadChInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f2:	d11b      	bne.n	800282c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002800:	461a      	mov	r2, r3
 8002802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002806:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	334d      	adds	r3, #77	@ 0x4d
 8002818:	2209      	movs	r2, #9
 800281a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f004 fc2c 	bl	8007082 <USB_HC_Halt>
 800282a:	e025      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fe81 	bl	800653c <USB_ReadChInterrupts>
 800283a:	4603      	mov	r3, r0
 800283c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002840:	2b80      	cmp	r3, #128	@ 0x80
 8002842:	d119      	bne.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002850:	461a      	mov	r2, r3
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	334d      	adds	r3, #77	@ 0x4d
 8002866:	2207      	movs	r2, #7
 8002868:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f004 fc05 	bl	8007082 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fe5b 	bl	800653c <USB_ReadChInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800288c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002890:	d112      	bne.n	80028b8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fbf1 	bl	8007082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	f000 bd75 	b.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 fe3b 	bl	800653c <USB_ReadChInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 8128 	bne.w	8002b22 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	2320      	movs	r3, #32
 80028e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	331b      	adds	r3, #27
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d119      	bne.n	800292e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	331b      	adds	r3, #27
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	440a      	add	r2, r1
 8002924:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	799b      	ldrb	r3, [r3, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01b      	beq.n	800296e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3330      	adds	r3, #48	@ 0x30
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	1ac9      	subs	r1, r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4403      	add	r3, r0
 800296a:	3338      	adds	r3, #56	@ 0x38
 800296c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	334d      	adds	r3, #77	@ 0x4d
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3344      	adds	r3, #68	@ 0x44
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a2:	461a      	mov	r2, r3
 80029a4:	2301      	movs	r3, #1
 80029a6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3326      	adds	r3, #38	@ 0x26
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3326      	adds	r3, #38	@ 0x26
 80029ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d110      	bne.n	80029f6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fb50 	bl	8007082 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ee:	461a      	mov	r2, r3
 80029f0:	2310      	movs	r3, #16
 80029f2:	6093      	str	r3, [r2, #8]
 80029f4:	e03d      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3326      	adds	r3, #38	@ 0x26
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d00a      	beq.n	8002a22 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3326      	adds	r3, #38	@ 0x26
 8002a1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d127      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	0151      	lsls	r1, r2, #5
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	440a      	add	r2, r1
 8002a38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a40:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	334c      	adds	r3, #76	@ 0x4c
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334c      	adds	r3, #76	@ 0x4c
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f006 fe61 	bl	8009734 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	799b      	ldrb	r3, [r3, #6]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d13b      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3338      	adds	r3, #56	@ 0x38
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4403      	add	r3, r0
 8002a9a:	3328      	adds	r3, #40	@ 0x28
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	440b      	add	r3, r1
 8002aa0:	1e59      	subs	r1, r3, #1
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4403      	add	r3, r0
 8002ab0:	3328      	adds	r3, #40	@ 0x28
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8470 	beq.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	333c      	adds	r3, #60	@ 0x3c
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	f083 0301 	eor.w	r3, r3, #1
 8002ada:	b2d8      	uxtb	r0, r3
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	333c      	adds	r3, #60	@ 0x3c
 8002aea:	4602      	mov	r2, r0
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	f000 bc58 	b.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	333c      	adds	r3, #60	@ 0x3c
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2d8      	uxtb	r0, r3
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	333c      	adds	r3, #60	@ 0x3c
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	f000 bc40 	b.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fd06 	bl	800653c <USB_ReadChInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d131      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	2320      	movs	r3, #32
 8002b4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	331a      	adds	r3, #26
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	f040 841f 	bne.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	331b      	adds	r3, #27
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	334d      	adds	r3, #77	@ 0x4d
 8002b88:	2203      	movs	r2, #3
 8002b8a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 fa74 	bl	8007082 <USB_HC_Halt>
 8002b9a:	f000 bc02 	b.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fcc8 	bl	800653c <USB_ReadChInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 8305 	bne.w	80031c2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	334d      	adds	r3, #77	@ 0x4d
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d114      	bne.n	8002c0a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	334d      	adds	r3, #77	@ 0x4d
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	@ 0x4c
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e2cc      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	334d      	adds	r3, #77	@ 0x4d
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d114      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	334c      	adds	r3, #76	@ 0x4c
 8002c44:	2205      	movs	r2, #5
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e2ac      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	334d      	adds	r3, #77	@ 0x4d
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b07      	cmp	r3, #7
 8002c5e:	d00b      	beq.n	8002c78 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334d      	adds	r3, #77	@ 0x4d
 8002c70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	f040 80a6 	bne.w	8002dc4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	334d      	adds	r3, #77	@ 0x4d
 8002c88:	2202      	movs	r2, #2
 8002c8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3344      	adds	r3, #68	@ 0x44
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4403      	add	r3, r0
 8002cac:	3344      	adds	r3, #68	@ 0x44
 8002cae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3344      	adds	r3, #68	@ 0x44
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d943      	bls.n	8002d4e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3344      	adds	r3, #68	@ 0x44
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	331a      	adds	r3, #26
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d123      	bne.n	8002d38 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	331b      	adds	r3, #27
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	331c      	adds	r3, #28
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	334c      	adds	r3, #76	@ 0x4c
 8002d48:	2204      	movs	r2, #4
 8002d4a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d4c:	e229      	b.n	80031a2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	334c      	adds	r3, #76	@ 0x4c
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3326      	adds	r3, #38	@ 0x26
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3326      	adds	r3, #38	@ 0x26
 8002d88:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	f040 8209 	bne.w	80031a2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002da6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dc2:	e1ee      	b.n	80031a2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	334d      	adds	r3, #77	@ 0x4d
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	f040 80c8 	bne.w	8002f6c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	334d      	adds	r3, #77	@ 0x4d
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	331b      	adds	r3, #27
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	f040 81ce 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3326      	adds	r3, #38	@ 0x26
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d16b      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3348      	adds	r3, #72	@ 0x48
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1c59      	adds	r1, r3, #1
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4403      	add	r3, r0
 8002e3e:	3348      	adds	r3, #72	@ 0x48
 8002e40:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3348      	adds	r3, #72	@ 0x48
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d943      	bls.n	8002ee0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3348      	adds	r3, #72	@ 0x48
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	331b      	adds	r3, #27
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3344      	adds	r3, #68	@ 0x44
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d809      	bhi.n	8002eaa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	331c      	adds	r3, #28
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	0151      	lsls	r1, r2, #5
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	440a      	add	r2, r1
 8002ec0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334c      	adds	r3, #76	@ 0x4c
 8002eda:	2204      	movs	r2, #4
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e014      	b.n	8002f0a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	334c      	adds	r3, #76	@ 0x4c
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e009      	b.n	8002f0a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	334c      	adds	r3, #76	@ 0x4c
 8002f06:	2202      	movs	r2, #2
 8002f08:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3326      	adds	r3, #38	@ 0x26
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3326      	adds	r3, #38	@ 0x26
 8002f30:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f040 8136 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f4e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f56:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e11b      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334d      	adds	r3, #77	@ 0x4d
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	f040 8081 	bne.w	8003086 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	334d      	adds	r3, #77	@ 0x4d
 8002f94:	2202      	movs	r2, #2
 8002f96:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	331b      	adds	r3, #27
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	f040 80fa 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	334c      	adds	r3, #76	@ 0x4c
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	0151      	lsls	r1, r2, #5
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	440a      	add	r2, r1
 8002fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	0151      	lsls	r1, r2, #5
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003002:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	0151      	lsls	r1, r2, #5
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	440a      	add	r2, r1
 800301a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800301e:	f023 0320 	bic.w	r3, r3, #32
 8003022:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3326      	adds	r3, #38	@ 0x26
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	3326      	adds	r3, #38	@ 0x26
 800304a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800304c:	2b02      	cmp	r3, #2
 800304e:	f040 80a9 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003068:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003070:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e08e      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334d      	adds	r3, #77	@ 0x4d
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d143      	bne.n	8003124 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	334d      	adds	r3, #77	@ 0x4d
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	334c      	adds	r3, #76	@ 0x4c
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3326      	adds	r3, #38	@ 0x26
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3326      	adds	r3, #38	@ 0x26
 80030ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d159      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003106:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800310e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e03f      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	334d      	adds	r3, #77	@ 0x4d
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d126      	bne.n	8003188 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	334d      	adds	r3, #77	@ 0x4d
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3344      	adds	r3, #68	@ 0x44
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	1c59      	adds	r1, r3, #1
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4403      	add	r3, r0
 800316e:	3344      	adds	r3, #68	@ 0x44
 8003170:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334c      	adds	r3, #76	@ 0x4c
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e00d      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	334d      	adds	r3, #77	@ 0x4d
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	f000 8100 	beq.w	80033a0 <HCD_HC_IN_IRQHandler+0xcca>
 80031a0:	e000      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	@ 0x4c
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f006 faba 	bl	8009734 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031c0:	e0ef      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 f9b6 	bl	800653c <USB_ReadChInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b40      	cmp	r3, #64	@ 0x40
 80031d8:	d12f      	bne.n	800323a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e6:	461a      	mov	r2, r3
 80031e8:	2340      	movs	r3, #64	@ 0x40
 80031ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334d      	adds	r3, #77	@ 0x4d
 80031fc:	2205      	movs	r2, #5
 80031fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	331a      	adds	r3, #26
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3344      	adds	r3, #68	@ 0x44
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f003 ff25 	bl	8007082 <USB_HC_Halt>
 8003238:	e0b3      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 f97a 	bl	800653c <USB_ReadChInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b10      	cmp	r3, #16
 8003250:	f040 80a7 	bne.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3326      	adds	r3, #38	@ 0x26
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d11b      	bne.n	80032a2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	3344      	adds	r3, #68	@ 0x44
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334d      	adds	r3, #77	@ 0x4d
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f003 fef1 	bl	8007082 <USB_HC_Halt>
 80032a0:	e03f      	b.n	8003322 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3326      	adds	r3, #38	@ 0x26
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3326      	adds	r3, #38	@ 0x26
 80032c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d129      	bne.n	8003322 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3344      	adds	r3, #68	@ 0x44
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HCD_HC_IN_IRQHandler+0xc2a>
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	331b      	adds	r3, #27
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d110      	bne.n	8003322 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334d      	adds	r3, #77	@ 0x4d
 8003310:	2204      	movs	r2, #4
 8003312:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f003 feb0 	bl	8007082 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	331b      	adds	r3, #27
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d129      	bne.n	800338c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	331b      	adds	r3, #27
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	440a      	add	r2, r1
 8003362:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800336a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	0151      	lsls	r1, r2, #5
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	440a      	add	r2, r1
 8003382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003386:	f043 0320 	orr.w	r3, r3, #32
 800338a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003398:	461a      	mov	r2, r3
 800339a:	2310      	movs	r3, #16
 800339c:	6093      	str	r3, [r2, #8]
 800339e:	e000      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80033a0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 f8b8 	bl	800653c <USB_ReadChInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d11b      	bne.n	800340e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e2:	461a      	mov	r2, r3
 80033e4:	2304      	movs	r3, #4
 80033e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	@ 0x4d
 80033f8:	2207      	movs	r2, #7
 80033fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f003 fe3c 	bl	8007082 <USB_HC_Halt>
 800340a:	f000 bc89 	b.w	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f003 f890 	bl	800653c <USB_ReadChInterrupts>
 800341c:	4603      	mov	r3, r0
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	f040 8082 	bne.w	800352c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003434:	461a      	mov	r2, r3
 8003436:	2320      	movs	r3, #32
 8003438:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3319      	adds	r3, #25
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d124      	bne.n	800349a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3319      	adds	r3, #25
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334c      	adds	r3, #76	@ 0x4c
 8003474:	2202      	movs	r2, #2
 8003476:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	334d      	adds	r3, #77	@ 0x4d
 8003488:	2203      	movs	r2, #3
 800348a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f003 fdf4 	bl	8007082 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	331a      	adds	r3, #26
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	f040 8437 	bne.w	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	331b      	adds	r3, #27
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 842b 	bne.w	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3326      	adds	r3, #38	@ 0x26
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d009      	beq.n	80034f4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	331b      	adds	r3, #27
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	334d      	adds	r3, #77	@ 0x4d
 8003504:	2203      	movs	r2, #3
 8003506:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fdb6 	bl	8007082 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3344      	adds	r3, #68	@ 0x44
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e3f9      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f003 f801 	bl	800653c <USB_ReadChInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003544:	d111      	bne.n	800356a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003558:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f003 fd8d 	bl	8007082 <USB_HC_Halt>
 8003568:	e3da      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f002 ffe2 	bl	800653c <USB_ReadChInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d168      	bne.n	8003654 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3344      	adds	r3, #68	@ 0x44
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 ffcc 	bl	800653c <USB_ReadChInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035aa:	2b40      	cmp	r3, #64	@ 0x40
 80035ac:	d112      	bne.n	80035d4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3319      	adds	r3, #25
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ce:	461a      	mov	r2, r3
 80035d0:	2340      	movs	r3, #64	@ 0x40
 80035d2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	331b      	adds	r3, #27
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	331b      	adds	r3, #27
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	440a      	add	r2, r1
 8003614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362a:	461a      	mov	r2, r3
 800362c:	2301      	movs	r3, #1
 800362e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334d      	adds	r3, #77	@ 0x4d
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f003 fd18 	bl	8007082 <USB_HC_Halt>
 8003652:	e365      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f002 ff6d 	bl	800653c <USB_ReadChInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003668:	2b40      	cmp	r3, #64	@ 0x40
 800366a:	d139      	bne.n	80036e0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334d      	adds	r3, #77	@ 0x4d
 800367c:	2205      	movs	r2, #5
 800367e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	331a      	adds	r3, #26
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3319      	adds	r3, #25
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3344      	adds	r3, #68	@ 0x44
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 fcdb 	bl	8007082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d8:	461a      	mov	r2, r3
 80036da:	2340      	movs	r3, #64	@ 0x40
 80036dc:	6093      	str	r3, [r2, #8]
 80036de:	e31f      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 ff27 	bl	800653c <USB_ReadChInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d11a      	bne.n	800372e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2308      	movs	r3, #8
 8003708:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	334d      	adds	r3, #77	@ 0x4d
 800371a:	2206      	movs	r2, #6
 800371c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f003 fcab 	bl	8007082 <USB_HC_Halt>
 800372c:	e2f8      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f002 ff00 	bl	800653c <USB_ReadChInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b10      	cmp	r3, #16
 8003744:	d144      	bne.n	80037d0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3344      	adds	r3, #68	@ 0x44
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	334d      	adds	r3, #77	@ 0x4d
 800376a:	2204      	movs	r2, #4
 800376c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3319      	adds	r3, #25
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d114      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3318      	adds	r3, #24
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3319      	adds	r3, #25
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fc63 	bl	8007082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2310      	movs	r3, #16
 80037cc:	6093      	str	r3, [r2, #8]
 80037ce:	e2a7      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 feaf 	bl	800653c <USB_ReadChInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e4:	2b80      	cmp	r3, #128	@ 0x80
 80037e6:	f040 8083 	bne.w	80038f0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	799b      	ldrb	r3, [r3, #6]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d111      	bne.n	8003816 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	334d      	adds	r3, #77	@ 0x4d
 8003802:	2207      	movs	r2, #7
 8003804:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f003 fc37 	bl	8007082 <USB_HC_Halt>
 8003814:	e062      	b.n	80038dc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3344      	adds	r3, #68	@ 0x44
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4403      	add	r3, r0
 8003836:	3344      	adds	r3, #68	@ 0x44
 8003838:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3344      	adds	r3, #68	@ 0x44
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d922      	bls.n	8003896 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3344      	adds	r3, #68	@ 0x44
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	334c      	adds	r3, #76	@ 0x4c
 8003874:	2204      	movs	r2, #4
 8003876:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	334c      	adds	r3, #76	@ 0x4c
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f005 ff50 	bl	8009734 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003894:	e022      	b.n	80038dc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334c      	adds	r3, #76	@ 0x4c
 80038a6:	2202      	movs	r2, #2
 80038a8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038c0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038c8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e8:	461a      	mov	r2, r3
 80038ea:	2380      	movs	r3, #128	@ 0x80
 80038ec:	6093      	str	r3, [r2, #8]
 80038ee:	e217      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fe1f 	bl	800653c <USB_ReadChInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003908:	d11b      	bne.n	8003942 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334d      	adds	r3, #77	@ 0x4d
 800391a:	2209      	movs	r2, #9
 800391c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f003 fbab 	bl	8007082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	e1ee      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f002 fdf6 	bl	800653c <USB_ReadChInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b02      	cmp	r3, #2
 8003958:	f040 81df 	bne.w	8003d1a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003968:	461a      	mov	r2, r3
 800396a:	2302      	movs	r3, #2
 800396c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	334d      	adds	r3, #77	@ 0x4d
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 8093 	bne.w	8003aac <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	334d      	adds	r3, #77	@ 0x4d
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	334c      	adds	r3, #76	@ 0x4c
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	3326      	adds	r3, #38	@ 0x26
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d00b      	beq.n	80039dc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3326      	adds	r3, #38	@ 0x26
 80039d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	f040 8190 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	799b      	ldrb	r3, [r3, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d115      	bne.n	8003a10 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	333d      	adds	r3, #61	@ 0x3d
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	f083 0301 	eor.w	r3, r3, #1
 80039fc:	b2d8      	uxtb	r0, r3
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	333d      	adds	r3, #61	@ 0x3d
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	799b      	ldrb	r3, [r3, #6]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	f040 8171 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3334      	adds	r3, #52	@ 0x34
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8165 	beq.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3334      	adds	r3, #52	@ 0x34
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4403      	add	r3, r0
 8003a52:	3328      	adds	r3, #40	@ 0x28
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	440b      	add	r3, r1
 8003a58:	1e59      	subs	r1, r3, #1
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4403      	add	r3, r0
 8003a68:	3328      	adds	r3, #40	@ 0x28
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a70:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 813f 	beq.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	333d      	adds	r3, #61	@ 0x3d
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	f083 0301 	eor.w	r3, r3, #1
 8003a96:	b2d8      	uxtb	r0, r3
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	333d      	adds	r3, #61	@ 0x3d
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e127      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	334d      	adds	r3, #77	@ 0x4d
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d120      	bne.n	8003b04 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	334d      	adds	r3, #77	@ 0x4d
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	331b      	adds	r3, #27
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 8107 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	334c      	adds	r3, #76	@ 0x4c
 8003afe:	2202      	movs	r2, #2
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e0fb      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	334d      	adds	r3, #77	@ 0x4d
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d13a      	bne.n	8003b90 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	334d      	adds	r3, #77	@ 0x4d
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	334c      	adds	r3, #76	@ 0x4c
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	331b      	adds	r3, #27
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	f040 80d1 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	331b      	adds	r3, #27
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	0151      	lsls	r1, r2, #5
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	440a      	add	r2, r1
 8003b84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b8c:	6053      	str	r3, [r2, #4]
 8003b8e:	e0b5      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	334d      	adds	r3, #77	@ 0x4d
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d114      	bne.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	334d      	adds	r3, #77	@ 0x4d
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	334c      	adds	r3, #76	@ 0x4c
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e095      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	334d      	adds	r3, #77	@ 0x4d
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d114      	bne.n	8003c10 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	334d      	adds	r3, #77	@ 0x4d
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	334c      	adds	r3, #76	@ 0x4c
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e075      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334d      	adds	r3, #77	@ 0x4d
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b07      	cmp	r3, #7
 8003c24:	d00a      	beq.n	8003c3c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334d      	adds	r3, #77	@ 0x4d
 8003c36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c38:	2b09      	cmp	r3, #9
 8003c3a:	d170      	bne.n	8003d1e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	334d      	adds	r3, #77	@ 0x4d
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3344      	adds	r3, #68	@ 0x44
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4403      	add	r3, r0
 8003c70:	3344      	adds	r3, #68	@ 0x44
 8003c72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3344      	adds	r3, #68	@ 0x44
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d914      	bls.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	3344      	adds	r3, #68	@ 0x44
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	334c      	adds	r3, #76	@ 0x4c
 8003cae:	2204      	movs	r2, #4
 8003cb0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cb2:	e022      	b.n	8003cfa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334c      	adds	r3, #76	@ 0x4c
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cde:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ce6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cfa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	334c      	adds	r3, #76	@ 0x4c
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f005 fd0e 	bl	8009734 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d18:	e002      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003d1e:	bf00      	nop
  }
}
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08a      	sub	sp, #40	@ 0x28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	0c5b      	lsrs	r3, r3, #17
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d004      	beq.n	8003d6c <HCD_RXQLVL_IRQHandler+0x46>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	f000 80b6 	beq.w	8003ed6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d6a:	e0b7      	b.n	8003edc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80b3 	beq.w	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	332c      	adds	r3, #44	@ 0x2c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80a7 	beq.w	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3338      	adds	r3, #56	@ 0x38
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	18d1      	adds	r1, r2, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4403      	add	r3, r0
 8003db0:	3334      	adds	r3, #52	@ 0x34
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4299      	cmp	r1, r3
 8003db6:	f200 8083 	bhi.w	8003ec0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	332c      	adds	r3, #44	@ 0x2c
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f002 fb46 	bl	8006466 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	332c      	adds	r3, #44	@ 0x2c
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	18d1      	adds	r1, r2, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4403      	add	r3, r0
 8003dfe:	332c      	adds	r3, #44	@ 0x2c
 8003e00:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3338      	adds	r3, #56	@ 0x38
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	18d1      	adds	r1, r2, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4403      	add	r3, r0
 8003e26:	3338      	adds	r3, #56	@ 0x38
 8003e28:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	0cdb      	lsrs	r3, r3, #19
 8003e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3328      	adds	r3, #40	@ 0x28
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d13f      	bne.n	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03c      	beq.n	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e76:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e7e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	333c      	adds	r3, #60	@ 0x3c
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f083 0301 	eor.w	r3, r3, #1
 8003ea8:	b2d8      	uxtb	r0, r3
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	333c      	adds	r3, #60	@ 0x3c
 8003eba:	4602      	mov	r2, r0
 8003ebc:	701a      	strb	r2, [r3, #0]
      break;
 8003ebe:	e00c      	b.n	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	334c      	adds	r3, #76	@ 0x4c
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	701a      	strb	r2, [r3, #0]
      break;
 8003ed4:	e001      	b.n	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003eda:	bf00      	nop
  }
}
 8003edc:	bf00      	nop
 8003ede:	3728      	adds	r7, #40	@ 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003f10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d10b      	bne.n	8003f34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d102      	bne.n	8003f2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f005 fbe8 	bl	80096fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f043 0302 	orr.w	r3, r3, #2
 8003f32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d132      	bne.n	8003fa4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d126      	bne.n	8003f9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7a5b      	ldrb	r3, [r3, #9]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d113      	bne.n	8003f80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f62:	d106      	bne.n	8003f72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f002 fc0a 	bl	8006784 <USB_InitFSLSPClkSel>
 8003f70:	e011      	b.n	8003f96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 fc03 	bl	8006784 <USB_InitFSLSPClkSel>
 8003f7e:	e00a      	b.n	8003f96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	79db      	ldrb	r3, [r3, #7]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d106      	bne.n	8003f96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003f94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f005 fbda 	bl	8009750 <HAL_HCD_PortEnabled_Callback>
 8003f9c:	e002      	b.n	8003fa4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f005 fbe4 	bl	800976c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d103      	bne.n	8003fb6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f043 0320 	orr.w	r3, r3, #32
 8003fb4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e12b      	b.n	8004236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc ff12 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	@ 0x24
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800401e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800402e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004030:	f001 fa20 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 8004034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4a81      	ldr	r2, [pc, #516]	@ (8004240 <HAL_I2C_Init+0x274>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d807      	bhi.n	8004050 <HAL_I2C_Init+0x84>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a80      	ldr	r2, [pc, #512]	@ (8004244 <HAL_I2C_Init+0x278>)
 8004044:	4293      	cmp	r3, r2
 8004046:	bf94      	ite	ls
 8004048:	2301      	movls	r3, #1
 800404a:	2300      	movhi	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e006      	b.n	800405e <HAL_I2C_Init+0x92>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a7d      	ldr	r2, [pc, #500]	@ (8004248 <HAL_I2C_Init+0x27c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	bf94      	ite	ls
 8004058:	2301      	movls	r3, #1
 800405a:	2300      	movhi	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0e7      	b.n	8004236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a78      	ldr	r2, [pc, #480]	@ (800424c <HAL_I2C_Init+0x280>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0c9b      	lsrs	r3, r3, #18
 8004070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a6a      	ldr	r2, [pc, #424]	@ (8004240 <HAL_I2C_Init+0x274>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d802      	bhi.n	80040a0 <HAL_I2C_Init+0xd4>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3301      	adds	r3, #1
 800409e:	e009      	b.n	80040b4 <HAL_I2C_Init+0xe8>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	4a69      	ldr	r2, [pc, #420]	@ (8004250 <HAL_I2C_Init+0x284>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	3301      	adds	r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	495c      	ldr	r1, [pc, #368]	@ (8004240 <HAL_I2C_Init+0x274>)
 80040d0:	428b      	cmp	r3, r1
 80040d2:	d819      	bhi.n	8004108 <HAL_I2C_Init+0x13c>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1e59      	subs	r1, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	fbb1 f3f3 	udiv	r3, r1, r3
 80040e2:	1c59      	adds	r1, r3, #1
 80040e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040e8:	400b      	ands	r3, r1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_I2C_Init+0x138>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e59      	subs	r1, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fc:	3301      	adds	r3, #1
 80040fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004102:	e051      	b.n	80041a8 <HAL_I2C_Init+0x1dc>
 8004104:	2304      	movs	r3, #4
 8004106:	e04f      	b.n	80041a8 <HAL_I2C_Init+0x1dc>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d111      	bne.n	8004134 <HAL_I2C_Init+0x168>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1e58      	subs	r0, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	440b      	add	r3, r1
 800411e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004122:	3301      	adds	r3, #1
 8004124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e012      	b.n	800415a <HAL_I2C_Init+0x18e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1e58      	subs	r0, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	0099      	lsls	r1, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Init+0x196>
 800415e:	2301      	movs	r3, #1
 8004160:	e022      	b.n	80041a8 <HAL_I2C_Init+0x1dc>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10e      	bne.n	8004188 <HAL_I2C_Init+0x1bc>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1e58      	subs	r0, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	440b      	add	r3, r1
 8004178:	fbb0 f3f3 	udiv	r3, r0, r3
 800417c:	3301      	adds	r3, #1
 800417e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004186:	e00f      	b.n	80041a8 <HAL_I2C_Init+0x1dc>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1e58      	subs	r0, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	0099      	lsls	r1, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	fbb0 f3f3 	udiv	r3, r0, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	6809      	ldr	r1, [r1, #0]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6911      	ldr	r1, [r2, #16]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68d2      	ldr	r2, [r2, #12]
 80041e2:	4311      	orrs	r1, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	000186a0 	.word	0x000186a0
 8004244:	001e847f 	.word	0x001e847f
 8004248:	003d08ff 	.word	0x003d08ff
 800424c:	431bde83 	.word	0x431bde83
 8004250:	10624dd3 	.word	0x10624dd3

08004254 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e128      	b.n	80044b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a90      	ldr	r2, [pc, #576]	@ (80044c0 <HAL_I2S_Init+0x26c>)
 800427e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fc fe13 	bl	8000eac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800429c:	f023 030f 	bic.w	r3, r3, #15
 80042a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2202      	movs	r2, #2
 80042a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d060      	beq.n	8004374 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80042ba:	2310      	movs	r3, #16
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e001      	b.n	80042c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d802      	bhi.n	80042d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80042d2:	2001      	movs	r0, #1
 80042d4:	f001 f9c4 	bl	8005660 <HAL_RCCEx_GetPeriphCLKFreq>
 80042d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042e2:	d125      	bne.n	8004330 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	461a      	mov	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	3305      	adds	r3, #5
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	e01f      	b.n	800434e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	fbb2 f2f3 	udiv	r2, r2, r3
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	3305      	adds	r3, #5
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	e00e      	b.n	800434e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	fbb2 f2f3 	udiv	r2, r2, r3
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	461a      	mov	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	3305      	adds	r3, #5
 800434c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4a5c      	ldr	r2, [pc, #368]	@ (80044c4 <HAL_I2S_Init+0x270>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	08db      	lsrs	r3, r3, #3
 8004358:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e003      	b.n	800437c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004374:	2302      	movs	r3, #2
 8004376:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d902      	bls.n	8004388 <HAL_I2S_Init+0x134>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	2bff      	cmp	r3, #255	@ 0xff
 8004386:	d907      	bls.n	8004398 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438c:	f043 0210 	orr.w	r2, r3, #16
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e08f      	b.n	80044b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	ea42 0103 	orr.w	r1, r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043b6:	f023 030f 	bic.w	r3, r3, #15
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6851      	ldr	r1, [r2, #4]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6892      	ldr	r2, [r2, #8]
 80043c2:	4311      	orrs	r1, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	68d2      	ldr	r2, [r2, #12]
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6992      	ldr	r2, [r2, #24]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d161      	bne.n	80044a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a38      	ldr	r2, [pc, #224]	@ (80044c8 <HAL_I2S_Init+0x274>)
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a37      	ldr	r2, [pc, #220]	@ (80044cc <HAL_I2S_Init+0x278>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d101      	bne.n	80043f8 <HAL_I2S_Init+0x1a4>
 80043f4:	4b36      	ldr	r3, [pc, #216]	@ (80044d0 <HAL_I2S_Init+0x27c>)
 80043f6:	e001      	b.n	80043fc <HAL_I2S_Init+0x1a8>
 80043f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	4932      	ldr	r1, [pc, #200]	@ (80044cc <HAL_I2S_Init+0x278>)
 8004404:	428a      	cmp	r2, r1
 8004406:	d101      	bne.n	800440c <HAL_I2S_Init+0x1b8>
 8004408:	4a31      	ldr	r2, [pc, #196]	@ (80044d0 <HAL_I2S_Init+0x27c>)
 800440a:	e001      	b.n	8004410 <HAL_I2S_Init+0x1bc>
 800440c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004410:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004414:	f023 030f 	bic.w	r3, r3, #15
 8004418:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2b      	ldr	r2, [pc, #172]	@ (80044cc <HAL_I2S_Init+0x278>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d101      	bne.n	8004428 <HAL_I2S_Init+0x1d4>
 8004424:	4b2a      	ldr	r3, [pc, #168]	@ (80044d0 <HAL_I2S_Init+0x27c>)
 8004426:	e001      	b.n	800442c <HAL_I2S_Init+0x1d8>
 8004428:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800442c:	2202      	movs	r2, #2
 800442e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a25      	ldr	r2, [pc, #148]	@ (80044cc <HAL_I2S_Init+0x278>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d101      	bne.n	800443e <HAL_I2S_Init+0x1ea>
 800443a:	4b25      	ldr	r3, [pc, #148]	@ (80044d0 <HAL_I2S_Init+0x27c>)
 800443c:	e001      	b.n	8004442 <HAL_I2S_Init+0x1ee>
 800443e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800444e:	d003      	beq.n	8004458 <HAL_I2S_Init+0x204>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	e001      	b.n	8004464 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800446e:	4313      	orrs	r3, r2
 8004470:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004478:	4313      	orrs	r3, r2
 800447a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004482:	4313      	orrs	r3, r2
 8004484:	b29a      	uxth	r2, r3
 8004486:	897b      	ldrh	r3, [r7, #10]
 8004488:	4313      	orrs	r3, r2
 800448a:	b29b      	uxth	r3, r3
 800448c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004490:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a0d      	ldr	r2, [pc, #52]	@ (80044cc <HAL_I2S_Init+0x278>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <HAL_I2S_Init+0x24c>
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <HAL_I2S_Init+0x27c>)
 800449e:	e001      	b.n	80044a4 <HAL_I2S_Init+0x250>
 80044a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044a4:	897a      	ldrh	r2, [r7, #10]
 80044a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	080045cb 	.word	0x080045cb
 80044c4:	cccccccd 	.word	0xcccccccd
 80044c8:	080046e1 	.word	0x080046e1
 80044cc:	40003800 	.word	0x40003800
 80044d0:	40003400 	.word	0x40003400

080044d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10e      	bne.n	8004564 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004554:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ffb8 	bl	80044d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457e:	b292      	uxth	r2, r2
 8004580:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10e      	bne.n	80045c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff93 	bl	80044e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d13a      	bne.n	800465c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d109      	bne.n	8004604 <I2S_IRQHandler+0x3a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fa:	2b40      	cmp	r3, #64	@ 0x40
 80045fc:	d102      	bne.n	8004604 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ffb4 	bl	800456c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460a:	2b40      	cmp	r3, #64	@ 0x40
 800460c:	d126      	bne.n	800465c <I2S_IRQHandler+0x92>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b20      	cmp	r3, #32
 800461a:	d11f      	bne.n	800465c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800462a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f043 0202 	orr.w	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ff50 	bl	80044fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b03      	cmp	r3, #3
 8004666:	d136      	bne.n	80046d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b02      	cmp	r3, #2
 8004670:	d109      	bne.n	8004686 <I2S_IRQHandler+0xbc>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467c:	2b80      	cmp	r3, #128	@ 0x80
 800467e:	d102      	bne.n	8004686 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff45 	bl	8004510 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b08      	cmp	r3, #8
 800468e:	d122      	bne.n	80046d6 <I2S_IRQHandler+0x10c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d11b      	bne.n	80046d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c8:	f043 0204 	orr.w	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff13 	bl	80044fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a92      	ldr	r2, [pc, #584]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80046fa:	4b92      	ldr	r3, [pc, #584]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046fc:	e001      	b.n	8004702 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80046fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a8b      	ldr	r2, [pc, #556]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004718:	4b8a      	ldr	r3, [pc, #552]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800471a:	e001      	b.n	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800471c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472c:	d004      	beq.n	8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 8099 	bne.w	800486a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d107      	bne.n	8004752 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f925 	bl	800499c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d107      	bne.n	800476c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9c8 	bl	8004afc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004772:	2b40      	cmp	r3, #64	@ 0x40
 8004774:	d13a      	bne.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d035      	beq.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6e      	ldr	r2, [pc, #440]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800478a:	4b6e      	ldr	r3, [pc, #440]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800478c:	e001      	b.n	8004792 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800478e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4969      	ldr	r1, [pc, #420]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800479a:	428b      	cmp	r3, r1
 800479c:	d101      	bne.n	80047a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800479e:	4b69      	ldr	r3, [pc, #420]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047a0:	e001      	b.n	80047a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80047a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f043 0202 	orr.w	r2, r3, #2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fe88 	bl	80044fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	f040 80c3 	bne.w	800497e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80bd 	beq.w	800497e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004812:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a49      	ldr	r2, [pc, #292]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d101      	bne.n	8004822 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800481e:	4b49      	ldr	r3, [pc, #292]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004820:	e001      	b.n	8004826 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004822:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4944      	ldr	r1, [pc, #272]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800482e:	428b      	cmp	r3, r1
 8004830:	d101      	bne.n	8004836 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004832:	4b44      	ldr	r3, [pc, #272]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004834:	e001      	b.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004836:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800483a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800483e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004840:	2300      	movs	r3, #0
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	f043 0204 	orr.w	r2, r3, #4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fe4a 	bl	80044fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004868:	e089      	b.n	800497e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d107      	bne.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8be 	bl	8004a00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d107      	bne.n	800489e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f8fd 	bl	8004a98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a4:	2b40      	cmp	r3, #64	@ 0x40
 80048a6:	d12f      	bne.n	8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d02a      	beq.n	8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d101      	bne.n	80048d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80048cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048ce:	e001      	b.n	80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80048d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4919      	ldr	r1, [pc, #100]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048dc:	428b      	cmp	r3, r1
 80048de:	d101      	bne.n	80048e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80048e0:	4b18      	ldr	r3, [pc, #96]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048e2:	e001      	b.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80048e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	f043 0202 	orr.w	r2, r3, #2
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fdfa 	bl	80044fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d136      	bne.n	8004980 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d031      	beq.n	8004980 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a07      	ldr	r2, [pc, #28]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004926:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004928:	e001      	b.n	800492e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800492a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4902      	ldr	r1, [pc, #8]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004936:	428b      	cmp	r3, r1
 8004938:	d106      	bne.n	8004948 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800493a:	4b02      	ldr	r3, [pc, #8]	@ (8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800493c:	e006      	b.n	800494c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800493e:	bf00      	nop
 8004940:	40003800 	.word	0x40003800
 8004944:	40003400 	.word	0x40003400
 8004948:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800494c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004950:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004960:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff fdc0 	bl	80044fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800497c:	e000      	b.n	8004980 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800497e:	bf00      	nop
}
 8004980:	bf00      	nop
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	1c99      	adds	r1, r3, #2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80049ae:	881a      	ldrh	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d113      	bne.n	80049f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d106      	bne.n	80049f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ffc9 	bl	8004988 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	1c99      	adds	r1, r3, #2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a12:	8819      	ldrh	r1, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	@ (8004a90 <I2SEx_TxISR_I2SExt+0x90>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <I2SEx_TxISR_I2SExt+0x22>
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a94 <I2SEx_TxISR_I2SExt+0x94>)
 8004a20:	e001      	b.n	8004a26 <I2SEx_TxISR_I2SExt+0x26>
 8004a22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a26:	460a      	mov	r2, r1
 8004a28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d121      	bne.n	8004a86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a12      	ldr	r2, [pc, #72]	@ (8004a90 <I2SEx_TxISR_I2SExt+0x90>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <I2SEx_TxISR_I2SExt+0x50>
 8004a4c:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <I2SEx_TxISR_I2SExt+0x94>)
 8004a4e:	e001      	b.n	8004a54 <I2SEx_TxISR_I2SExt+0x54>
 8004a50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	490d      	ldr	r1, [pc, #52]	@ (8004a90 <I2SEx_TxISR_I2SExt+0x90>)
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	d101      	bne.n	8004a64 <I2SEx_TxISR_I2SExt+0x64>
 8004a60:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <I2SEx_TxISR_I2SExt+0x94>)
 8004a62:	e001      	b.n	8004a68 <I2SEx_TxISR_I2SExt+0x68>
 8004a64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff81 	bl	8004988 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40003800 	.word	0x40003800
 8004a94:	40003400 	.word	0x40003400

08004a98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68d8      	ldr	r0, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	1c99      	adds	r1, r3, #2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004ab0:	b282      	uxth	r2, r0
 8004ab2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d113      	bne.n	8004af4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ada:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff ff4a 	bl	8004988 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a20      	ldr	r2, [pc, #128]	@ (8004b8c <I2SEx_RxISR_I2SExt+0x90>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <I2SEx_RxISR_I2SExt+0x16>
 8004b0e:	4b20      	ldr	r3, [pc, #128]	@ (8004b90 <I2SEx_RxISR_I2SExt+0x94>)
 8004b10:	e001      	b.n	8004b16 <I2SEx_RxISR_I2SExt+0x1a>
 8004b12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b16:	68d8      	ldr	r0, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	1c99      	adds	r1, r3, #2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b22:	b282      	uxth	r2, r0
 8004b24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d121      	bne.n	8004b82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a12      	ldr	r2, [pc, #72]	@ (8004b8c <I2SEx_RxISR_I2SExt+0x90>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d101      	bne.n	8004b4c <I2SEx_RxISR_I2SExt+0x50>
 8004b48:	4b11      	ldr	r3, [pc, #68]	@ (8004b90 <I2SEx_RxISR_I2SExt+0x94>)
 8004b4a:	e001      	b.n	8004b50 <I2SEx_RxISR_I2SExt+0x54>
 8004b4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	490d      	ldr	r1, [pc, #52]	@ (8004b8c <I2SEx_RxISR_I2SExt+0x90>)
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	d101      	bne.n	8004b60 <I2SEx_RxISR_I2SExt+0x64>
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <I2SEx_RxISR_I2SExt+0x94>)
 8004b5e:	e001      	b.n	8004b64 <I2SEx_RxISR_I2SExt+0x68>
 8004b60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff ff03 	bl	8004988 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40003800 	.word	0x40003800
 8004b90:	40003400 	.word	0x40003400

08004b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e267      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d075      	beq.n	8004c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bb2:	4b88      	ldr	r3, [pc, #544]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d00c      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bbe:	4b85      	ldr	r3, [pc, #532]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d112      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bca:	4b82      	ldr	r3, [pc, #520]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bd6:	d10b      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05b      	beq.n	8004c9c <HAL_RCC_OscConfig+0x108>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d157      	bne.n	8004c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e242      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCC_OscConfig+0x74>
 8004bfa:	4b76      	ldr	r3, [pc, #472]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a75      	ldr	r2, [pc, #468]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e01d      	b.n	8004c44 <HAL_RCC_OscConfig+0xb0>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x98>
 8004c12:	4b70      	ldr	r3, [pc, #448]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a6f      	ldr	r2, [pc, #444]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6c      	ldr	r2, [pc, #432]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0xb0>
 8004c2c:	4b69      	ldr	r3, [pc, #420]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a68      	ldr	r2, [pc, #416]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b66      	ldr	r3, [pc, #408]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a65      	ldr	r2, [pc, #404]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fc fb4a 	bl	80012e4 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fc fb46 	bl	80012e4 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	@ 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e207      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c66:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0xc0>
 8004c72:	e014      	b.n	8004c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fc fb36 	bl	80012e4 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fc fb32 	bl	80012e4 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	@ 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1f3      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8e:	4b51      	ldr	r3, [pc, #324]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0xe8>
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d063      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004caa:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b47      	ldr	r3, [pc, #284]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d11c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b44      	ldr	r3, [pc, #272]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d116      	bne.n	8004cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cce:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x152>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e1c7      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4937      	ldr	r1, [pc, #220]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfa:	e03a      	b.n	8004d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d04:	4b34      	ldr	r3, [pc, #208]	@ (8004dd8 <HAL_RCC_OscConfig+0x244>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fc faeb 	bl	80012e4 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d12:	f7fc fae7 	bl	80012e4 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e1a8      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d24:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d30:	4b28      	ldr	r3, [pc, #160]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4925      	ldr	r1, [pc, #148]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	e015      	b.n	8004d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d46:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <HAL_RCC_OscConfig+0x244>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fc faca 	bl	80012e4 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d54:	f7fc fac6 	bl	80012e4 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e187      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d66:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d036      	beq.n	8004dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d86:	4b15      	ldr	r3, [pc, #84]	@ (8004ddc <HAL_RCC_OscConfig+0x248>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fc faaa 	bl	80012e4 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fc faa6 	bl	80012e4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e167      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x200>
 8004db2:	e01b      	b.n	8004dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db4:	4b09      	ldr	r3, [pc, #36]	@ (8004ddc <HAL_RCC_OscConfig+0x248>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dba:	f7fc fa93 	bl	80012e4 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc0:	e00e      	b.n	8004de0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc2:	f7fc fa8f 	bl	80012e4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d907      	bls.n	8004de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e150      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	42470000 	.word	0x42470000
 8004ddc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de0:	4b88      	ldr	r3, [pc, #544]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ea      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8097 	beq.w	8004f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfe:	4b81      	ldr	r3, [pc, #516]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10f      	bne.n	8004e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	4b7d      	ldr	r3, [pc, #500]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	4a7c      	ldr	r2, [pc, #496]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2a:	4b77      	ldr	r3, [pc, #476]	@ (8005008 <HAL_RCC_OscConfig+0x474>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d118      	bne.n	8004e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e36:	4b74      	ldr	r3, [pc, #464]	@ (8005008 <HAL_RCC_OscConfig+0x474>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a73      	ldr	r2, [pc, #460]	@ (8005008 <HAL_RCC_OscConfig+0x474>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e42:	f7fc fa4f 	bl	80012e4 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4a:	f7fc fa4b 	bl	80012e4 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e10c      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8005008 <HAL_RCC_OscConfig+0x474>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d106      	bne.n	8004e7e <HAL_RCC_OscConfig+0x2ea>
 8004e70:	4b64      	ldr	r3, [pc, #400]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e74:	4a63      	ldr	r2, [pc, #396]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e7c:	e01c      	b.n	8004eb8 <HAL_RCC_OscConfig+0x324>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b05      	cmp	r3, #5
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x30c>
 8004e86:	4b5f      	ldr	r3, [pc, #380]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	f043 0304 	orr.w	r3, r3, #4
 8004e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e92:	4b5c      	ldr	r3, [pc, #368]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e96:	4a5b      	ldr	r2, [pc, #364]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e9e:	e00b      	b.n	8004eb8 <HAL_RCC_OscConfig+0x324>
 8004ea0:	4b58      	ldr	r3, [pc, #352]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea4:	4a57      	ldr	r2, [pc, #348]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eac:	4b55      	ldr	r3, [pc, #340]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb0:	4a54      	ldr	r2, [pc, #336]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	f023 0304 	bic.w	r3, r3, #4
 8004eb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fc fa10 	bl	80012e4 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fc fa0c 	bl	80012e4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e0cb      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ede:	4b49      	ldr	r3, [pc, #292]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0ee      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x334>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eec:	f7fc f9fa 	bl	80012e4 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fc f9f6 	bl	80012e4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e0b5      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1ee      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d105      	bne.n	8004f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1c:	4b39      	ldr	r3, [pc, #228]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	4a38      	ldr	r2, [pc, #224]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80a1 	beq.w	8005074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f32:	4b34      	ldr	r3, [pc, #208]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d05c      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d141      	bne.n	8004fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f46:	4b31      	ldr	r3, [pc, #196]	@ (800500c <HAL_RCC_OscConfig+0x478>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fc f9ca 	bl	80012e4 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fc f9c6 	bl	80012e4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e087      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f66:	4b27      	ldr	r3, [pc, #156]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69da      	ldr	r2, [r3, #28]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	019b      	lsls	r3, r3, #6
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	041b      	lsls	r3, r3, #16
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	061b      	lsls	r3, r3, #24
 8004f96:	491b      	ldr	r1, [pc, #108]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800500c <HAL_RCC_OscConfig+0x478>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fc f99f 	bl	80012e4 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fc f99b 	bl	80012e4 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e05c      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbc:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x416>
 8004fc8:	e054      	b.n	8005074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b10      	ldr	r3, [pc, #64]	@ (800500c <HAL_RCC_OscConfig+0x478>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd0:	f7fc f988 	bl	80012e4 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fc f984 	bl	80012e4 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e045      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <HAL_RCC_OscConfig+0x470>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x444>
 8004ff6:	e03d      	b.n	8005074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d107      	bne.n	8005010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e038      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
 8005004:	40023800 	.word	0x40023800
 8005008:	40007000 	.word	0x40007000
 800500c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005010:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <HAL_RCC_OscConfig+0x4ec>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d028      	beq.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d121      	bne.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	429a      	cmp	r2, r3
 8005038:	d11a      	bne.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005040:	4013      	ands	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005048:	4293      	cmp	r3, r2
 800504a:	d111      	bne.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	3b01      	subs	r3, #1
 800505a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d107      	bne.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d001      	beq.n	8005074 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40023800 	.word	0x40023800

08005084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0cc      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b68      	ldr	r3, [pc, #416]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d90c      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b65      	ldr	r3, [pc, #404]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b63      	ldr	r3, [pc, #396]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0b8      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d020      	beq.n	800510e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d8:	4b59      	ldr	r3, [pc, #356]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a58      	ldr	r2, [pc, #352]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f0:	4b53      	ldr	r3, [pc, #332]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a52      	ldr	r2, [pc, #328]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b50      	ldr	r3, [pc, #320]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	494d      	ldr	r1, [pc, #308]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d044      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	4b47      	ldr	r3, [pc, #284]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d119      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e07f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d003      	beq.n	8005142 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	2b03      	cmp	r3, #3
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	4b3f      	ldr	r3, [pc, #252]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e06f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005152:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e067      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005162:	4b37      	ldr	r3, [pc, #220]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f023 0203 	bic.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4934      	ldr	r1, [pc, #208]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005174:	f7fc f8b6 	bl	80012e4 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7fc f8b2 	bl	80012e4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e04f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	4b2b      	ldr	r3, [pc, #172]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 020c 	and.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d1eb      	bne.n	800517c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b25      	ldr	r3, [pc, #148]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d20c      	bcs.n	80051cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b22      	ldr	r3, [pc, #136]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e032      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d8:	4b19      	ldr	r3, [pc, #100]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4916      	ldr	r1, [pc, #88]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f6:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	490e      	ldr	r1, [pc, #56]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800520a:	f000 f821 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	490a      	ldr	r1, [pc, #40]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 800521c:	5ccb      	ldrb	r3, [r1, r3]
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	4a09      	ldr	r2, [pc, #36]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005226:	4b09      	ldr	r3, [pc, #36]	@ (800524c <HAL_RCC_ClockConfig+0x1c8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fc f816 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023c00 	.word	0x40023c00
 8005240:	40023800 	.word	0x40023800
 8005244:	08009e28 	.word	0x08009e28
 8005248:	20000000 	.word	0x20000000
 800524c:	20000004 	.word	0x20000004

08005250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005254:	b094      	sub	sp, #80	@ 0x50
 8005256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005268:	4b79      	ldr	r3, [pc, #484]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b08      	cmp	r3, #8
 8005272:	d00d      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x40>
 8005274:	2b08      	cmp	r3, #8
 8005276:	f200 80e1 	bhi.w	800543c <HAL_RCC_GetSysClockFreq+0x1ec>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x34>
 800527e:	2b04      	cmp	r3, #4
 8005280:	d003      	beq.n	800528a <HAL_RCC_GetSysClockFreq+0x3a>
 8005282:	e0db      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005284:	4b73      	ldr	r3, [pc, #460]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x204>)
 8005286:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005288:	e0db      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800528a:	4b73      	ldr	r3, [pc, #460]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x208>)
 800528c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800528e:	e0d8      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005290:	4b6f      	ldr	r3, [pc, #444]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005298:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800529a:	4b6d      	ldr	r3, [pc, #436]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d063      	beq.n	800536e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	099b      	lsrs	r3, r3, #6
 80052ac:	2200      	movs	r2, #0
 80052ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ba:	2300      	movs	r3, #0
 80052bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80052be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052c2:	4622      	mov	r2, r4
 80052c4:	462b      	mov	r3, r5
 80052c6:	f04f 0000 	mov.w	r0, #0
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	0159      	lsls	r1, r3, #5
 80052d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d4:	0150      	lsls	r0, r2, #5
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4621      	mov	r1, r4
 80052dc:	1a51      	subs	r1, r2, r1
 80052de:	6139      	str	r1, [r7, #16]
 80052e0:	4629      	mov	r1, r5
 80052e2:	eb63 0301 	sbc.w	r3, r3, r1
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052f4:	4659      	mov	r1, fp
 80052f6:	018b      	lsls	r3, r1, #6
 80052f8:	4651      	mov	r1, sl
 80052fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052fe:	4651      	mov	r1, sl
 8005300:	018a      	lsls	r2, r1, #6
 8005302:	4651      	mov	r1, sl
 8005304:	ebb2 0801 	subs.w	r8, r2, r1
 8005308:	4659      	mov	r1, fp
 800530a:	eb63 0901 	sbc.w	r9, r3, r1
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800531a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005322:	4690      	mov	r8, r2
 8005324:	4699      	mov	r9, r3
 8005326:	4623      	mov	r3, r4
 8005328:	eb18 0303 	adds.w	r3, r8, r3
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	462b      	mov	r3, r5
 8005330:	eb49 0303 	adc.w	r3, r9, r3
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005342:	4629      	mov	r1, r5
 8005344:	024b      	lsls	r3, r1, #9
 8005346:	4621      	mov	r1, r4
 8005348:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800534c:	4621      	mov	r1, r4
 800534e:	024a      	lsls	r2, r1, #9
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005356:	2200      	movs	r2, #0
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800535a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800535c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005360:	f7fa ff32 	bl	80001c8 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800536c:	e058      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536e:	4b38      	ldr	r3, [pc, #224]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	099b      	lsrs	r3, r3, #6
 8005374:	2200      	movs	r2, #0
 8005376:	4618      	mov	r0, r3
 8005378:	4611      	mov	r1, r2
 800537a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800537e:	623b      	str	r3, [r7, #32]
 8005380:	2300      	movs	r3, #0
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
 8005384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	f04f 0000 	mov.w	r0, #0
 8005390:	f04f 0100 	mov.w	r1, #0
 8005394:	0159      	lsls	r1, r3, #5
 8005396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800539a:	0150      	lsls	r0, r2, #5
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4641      	mov	r1, r8
 80053a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80053a6:	4649      	mov	r1, r9
 80053a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053c0:	ebb2 040a 	subs.w	r4, r2, sl
 80053c4:	eb63 050b 	sbc.w	r5, r3, fp
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	00eb      	lsls	r3, r5, #3
 80053d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053d6:	00e2      	lsls	r2, r4, #3
 80053d8:	4614      	mov	r4, r2
 80053da:	461d      	mov	r5, r3
 80053dc:	4643      	mov	r3, r8
 80053de:	18e3      	adds	r3, r4, r3
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	464b      	mov	r3, r9
 80053e4:	eb45 0303 	adc.w	r3, r5, r3
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053f6:	4629      	mov	r1, r5
 80053f8:	028b      	lsls	r3, r1, #10
 80053fa:	4621      	mov	r1, r4
 80053fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005400:	4621      	mov	r1, r4
 8005402:	028a      	lsls	r2, r1, #10
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800540a:	2200      	movs	r2, #0
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	61fa      	str	r2, [r7, #28]
 8005410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005414:	f7fa fed8 	bl	80001c8 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4613      	mov	r3, r2
 800541e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	3301      	adds	r3, #1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005430:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800543a:	e002      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800543c:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x204>)
 800543e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005444:	4618      	mov	r0, r3
 8005446:	3750      	adds	r7, #80	@ 0x50
 8005448:	46bd      	mov	sp, r7
 800544a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800
 8005454:	00f42400 	.word	0x00f42400
 8005458:	007a1200 	.word	0x007a1200

0800545c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005460:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <HAL_RCC_GetHCLKFreq+0x14>)
 8005462:	681b      	ldr	r3, [r3, #0]
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000000 	.word	0x20000000

08005474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005478:	f7ff fff0 	bl	800545c <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0a9b      	lsrs	r3, r3, #10
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	@ (8005498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40023800 	.word	0x40023800
 8005498:	08009e38 	.word	0x08009e38

0800549c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d105      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d035      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054c4:	4b62      	ldr	r3, [pc, #392]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054ca:	f7fb ff0b 	bl	80012e4 <HAL_GetTick>
 80054ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054d2:	f7fb ff07 	bl	80012e4 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e0b0      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1f0      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	019a      	lsls	r2, r3, #6
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	071b      	lsls	r3, r3, #28
 80054fc:	4955      	ldr	r1, [pc, #340]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005504:	4b52      	ldr	r3, [pc, #328]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800550a:	f7fb feeb 	bl	80012e4 <HAL_GetTick>
 800550e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005512:	f7fb fee7 	bl	80012e4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e090      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005524:	4b4b      	ldr	r3, [pc, #300]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8083 	beq.w	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	4b44      	ldr	r3, [pc, #272]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	4a43      	ldr	r2, [pc, #268]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554c:	6413      	str	r3, [r2, #64]	@ 0x40
 800554e:	4b41      	ldr	r3, [pc, #260]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800555a:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a3e      	ldr	r2, [pc, #248]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005564:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005566:	f7fb febd 	bl	80012e4 <HAL_GetTick>
 800556a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556e:	f7fb feb9 	bl	80012e4 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e062      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005580:	4b35      	ldr	r3, [pc, #212]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800558c:	4b31      	ldr	r3, [pc, #196]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005594:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d02f      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d028      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055b4:	4b29      	ldr	r3, [pc, #164]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ba:	4b28      	ldr	r3, [pc, #160]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055c0:	4a24      	ldr	r2, [pc, #144]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055c6:	4b23      	ldr	r3, [pc, #140]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d114      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055d2:	f7fb fe87 	bl	80012e4 <HAL_GetTick>
 80055d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d8:	e00a      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055da:	f7fb fe83 	bl	80012e4 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e02a      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f0:	4b18      	ldr	r3, [pc, #96]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0ee      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005604:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005608:	d10d      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800560a:	4b12      	ldr	r3, [pc, #72]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800561a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800561e:	490d      	ldr	r1, [pc, #52]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005620:	4313      	orrs	r3, r2
 8005622:	608b      	str	r3, [r1, #8]
 8005624:	e005      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005626:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4a0a      	ldr	r2, [pc, #40]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800562c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005630:	6093      	str	r3, [r2, #8]
 8005632:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005634:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563e:	4905      	ldr	r1, [pc, #20]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005640:	4313      	orrs	r3, r2
 8005642:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	42470068 	.word	0x42470068
 8005654:	40023800 	.word	0x40023800
 8005658:	40007000 	.word	0x40007000
 800565c:	42470e40 	.word	0x42470e40

08005660 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d13f      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800567e:	4b24      	ldr	r3, [pc, #144]	@ (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d006      	beq.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005694:	d12f      	bne.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005696:	4b1f      	ldr	r3, [pc, #124]	@ (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005698:	617b      	str	r3, [r7, #20]
          break;
 800569a:	e02f      	b.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800569c:	4b1c      	ldr	r3, [pc, #112]	@ (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056a8:	d108      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056aa:	4b19      	ldr	r3, [pc, #100]	@ (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056b2:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e007      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056bc:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c4:	4a15      	ldr	r2, [pc, #84]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056cc:	4b10      	ldr	r3, [pc, #64]	@ (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d2:	099b      	lsrs	r3, r3, #6
 80056d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e6:	0f1b      	lsrs	r3, r3, #28
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	617b      	str	r3, [r7, #20]
          break;
 80056f4:	e002      	b.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
          break;
 80056fa:	bf00      	nop
        }
      }
      break;
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80056fe:	bf00      	nop
    }
  }
  return frequency;
 8005700:	697b      	ldr	r3, [r7, #20]
}
 8005702:	4618      	mov	r0, r3
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800
 8005714:	00bb8000 	.word	0x00bb8000
 8005718:	007a1200 	.word	0x007a1200
 800571c:	00f42400 	.word	0x00f42400

08005720 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e073      	b.n	800581e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	7f5b      	ldrb	r3, [r3, #29]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d105      	bne.n	800574c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fb fc30 	bl	8000fac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b10      	cmp	r3, #16
 800575e:	d055      	beq.n	800580c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	22ca      	movs	r2, #202	@ 0xca
 8005766:	625a      	str	r2, [r3, #36]	@ 0x24
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2253      	movs	r2, #83	@ 0x53
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fbdd 	bl	8005f30 <RTC_EnterInitMode>
 8005776:	4603      	mov	r3, r0
 8005778:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d12c      	bne.n	80057da <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800578e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005792:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6899      	ldr	r1, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68d2      	ldr	r2, [r2, #12]
 80057ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6919      	ldr	r1, [r3, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	041a      	lsls	r2, r3, #16
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fbe4 	bl	8005f9e <RTC_ExitInitMode>
 80057d6:	4603      	mov	r3, r0
 80057d8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d110      	bne.n	8005802 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	22ff      	movs	r2, #255	@ 0xff
 8005808:	625a      	str	r2, [r3, #36]	@ 0x24
 800580a:	e001      	b.n	8005810 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005826:	b590      	push	{r4, r7, lr}
 8005828:	b087      	sub	sp, #28
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	7f1b      	ldrb	r3, [r3, #28]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_RTC_SetTime+0x1c>
 800583e:	2302      	movs	r3, #2
 8005840:	e087      	b.n	8005952 <HAL_RTC_SetTime+0x12c>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2202      	movs	r2, #2
 800584c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d126      	bne.n	80058a2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fbbb 	bl	8005fe8 <RTC_ByteToBcd2>
 8005872:	4603      	mov	r3, r0
 8005874:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fbb4 	bl	8005fe8 <RTC_ByteToBcd2>
 8005880:	4603      	mov	r3, r0
 8005882:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005884:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	789b      	ldrb	r3, [r3, #2]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fbac 	bl	8005fe8 <RTC_ByteToBcd2>
 8005890:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005892:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	78db      	ldrb	r3, [r3, #3]
 800589a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e018      	b.n	80058d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	22ca      	movs	r2, #202	@ 0xca
 80058da:	625a      	str	r2, [r3, #36]	@ 0x24
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2253      	movs	r2, #83	@ 0x53
 80058e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fb23 	bl	8005f30 <RTC_EnterInitMode>
 80058ea:	4603      	mov	r3, r0
 80058ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80058ee:	7cfb      	ldrb	r3, [r7, #19]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d120      	bne.n	8005936 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80058fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005902:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005912:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6899      	ldr	r1, [r3, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	431a      	orrs	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fb36 	bl	8005f9e <RTC_ExitInitMode>
 8005932:	4603      	mov	r3, r0
 8005934:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005936:	7cfb      	ldrb	r3, [r7, #19]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	22ff      	movs	r2, #255	@ 0xff
 8005948:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	771a      	strb	r2, [r3, #28]

  return status;
 8005950:	7cfb      	ldrb	r3, [r7, #19]
}
 8005952:	4618      	mov	r0, r3
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	bd90      	pop	{r4, r7, pc}

0800595a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800598c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005990:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	0c1b      	lsrs	r3, r3, #16
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	0d9b      	lsrs	r3, r3, #22
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11a      	bne.n	8005a0c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fb22 	bl	8006024 <RTC_Bcd2ToByte>
 80059e0:	4603      	mov	r3, r0
 80059e2:	461a      	mov	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fb19 	bl	8006024 <RTC_Bcd2ToByte>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	789b      	ldrb	r3, [r3, #2]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fb10 	bl	8006024 <RTC_Bcd2ToByte>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461a      	mov	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a16:	b590      	push	{r4, r7, lr}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	7f1b      	ldrb	r3, [r3, #28]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_RTC_SetDate+0x1c>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e071      	b.n	8005b16 <HAL_RTC_SetDate+0x100>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10e      	bne.n	8005a62 <HAL_RTC_SetDate+0x4c>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	f023 0310 	bic.w	r3, r3, #16
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	330a      	adds	r3, #10
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d11c      	bne.n	8005aa2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	78db      	ldrb	r3, [r3, #3]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fabb 	bl	8005fe8 <RTC_ByteToBcd2>
 8005a72:	4603      	mov	r3, r0
 8005a74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fab4 	bl	8005fe8 <RTC_ByteToBcd2>
 8005a80:	4603      	mov	r3, r0
 8005a82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	789b      	ldrb	r3, [r3, #2]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 faac 	bl	8005fe8 <RTC_ByteToBcd2>
 8005a90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e00e      	b.n	8005ac0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	78db      	ldrb	r3, [r3, #3]
 8005aa6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005aae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ab4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	22ca      	movs	r2, #202	@ 0xca
 8005ac6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2253      	movs	r2, #83	@ 0x53
 8005ace:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fa2d 	bl	8005f30 <RTC_EnterInitMode>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10c      	bne.n	8005afa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005aea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005aee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fa54 	bl	8005f9e <RTC_ExitInitMode>
 8005af6:	4603      	mov	r3, r0
 8005af8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005afa:	7cfb      	ldrb	r3, [r7, #19]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d102      	bne.n	8005b06 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	22ff      	movs	r2, #255	@ 0xff
 8005b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]

  return status;
 8005b14:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd90      	pop	{r4, r7, pc}

08005b1e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	0c1b      	lsrs	r3, r3, #16
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	0a1b      	lsrs	r3, r3, #8
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	0b5b      	lsrs	r3, r3, #13
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11a      	bne.n	8005bb2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	78db      	ldrb	r3, [r3, #3]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fa4f 	bl	8006024 <RTC_Bcd2ToByte>
 8005b86:	4603      	mov	r3, r0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fa46 	bl	8006024 <RTC_Bcd2ToByte>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	789b      	ldrb	r3, [r3, #2]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fa3d 	bl	8006024 <RTC_Bcd2ToByte>
 8005baa:	4603      	mov	r3, r0
 8005bac:	461a      	mov	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b089      	sub	sp, #36	@ 0x24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005bc8:	4b9b      	ldr	r3, [pc, #620]	@ (8005e38 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a9b      	ldr	r2, [pc, #620]	@ (8005e3c <HAL_RTC_SetAlarm_IT+0x280>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	0adb      	lsrs	r3, r3, #11
 8005bd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005bd8:	fb02 f303 	mul.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	7f1b      	ldrb	r3, [r3, #28]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_RTC_SetAlarm_IT+0x36>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e11e      	b.n	8005e30 <HAL_RTC_SetAlarm_IT+0x274>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d137      	bne.n	8005c74 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 f9e3 	bl	8005fe8 <RTC_ByteToBcd2>
 8005c22:	4603      	mov	r3, r0
 8005c24:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f9dc 	bl	8005fe8 <RTC_ByteToBcd2>
 8005c30:	4603      	mov	r3, r0
 8005c32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005c34:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	789b      	ldrb	r3, [r3, #2]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f9d4 	bl	8005fe8 <RTC_ByteToBcd2>
 8005c40:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c42:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	78db      	ldrb	r3, [r3, #3]
 8005c4a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005c4c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f9c6 	bl	8005fe8 <RTC_ByteToBcd2>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005c60:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005c68:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e023      	b.n	8005cbc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005c94:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005c9a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	78db      	ldrb	r3, [r3, #3]
 8005ca0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005ca2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005caa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005cac:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005cb2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	22ca      	movs	r2, #202	@ 0xca
 8005cce:	625a      	str	r2, [r3, #36]	@ 0x24
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2253      	movs	r2, #83	@ 0x53
 8005cd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce0:	d142      	bne.n	8005d68 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cf0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005d02:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	22ff      	movs	r2, #255	@ 0xff
 8005d16:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e083      	b.n	8005e30 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0e6      	beq.n	8005d04 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d54:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d64:	609a      	str	r2, [r3, #8]
 8005d66:	e04c      	b.n	8005e02 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d76:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005d88:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005e38 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8005e3c <HAL_RTC_SetAlarm_IT+0x280>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	0adb      	lsrs	r3, r3, #11
 8005d96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	22ff      	movs	r2, #255	@ 0xff
 8005db2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2203      	movs	r2, #3
 8005db8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e035      	b.n	8005e30 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0e6      	beq.n	8005da0 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e00:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005e02:	4b0f      	ldr	r3, [pc, #60]	@ (8005e40 <HAL_RTC_SetAlarm_IT+0x284>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a0e      	ldr	r2, [pc, #56]	@ (8005e40 <HAL_RTC_SetAlarm_IT+0x284>)
 8005e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e0c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <HAL_RTC_SetAlarm_IT+0x284>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	4a0b      	ldr	r2, [pc, #44]	@ (8005e40 <HAL_RTC_SetAlarm_IT+0x284>)
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e18:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	22ff      	movs	r2, #255	@ 0xff
 8005e20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3724      	adds	r7, #36	@ 0x24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd90      	pop	{r4, r7, pc}
 8005e38:	20000000 	.word	0x20000000
 8005e3c:	10624dd3 	.word	0x10624dd3
 8005e40:	40013c00 	.word	0x40013c00

08005e44 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005ecc <HAL_RTC_AlarmIRQHandler+0x88>)
 8005e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e52:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d012      	beq.n	8005e88 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005e80:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f824 	bl	8005ed0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d012      	beq.n	8005ebc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005eb4:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f8d2 	bl	8006060 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	775a      	strb	r2, [r3, #29]
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40013c00 	.word	0x40013c00

08005ed0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8005f2c <HAL_RTC_WaitForSynchro+0x48>)
 8005ef6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ef8:	f7fb f9f4 	bl	80012e4 <HAL_GetTick>
 8005efc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005efe:	e009      	b.n	8005f14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f00:	f7fb f9f0 	bl	80012e4 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f0e:	d901      	bls.n	8005f14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e007      	b.n	8005f24 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0ee      	beq.n	8005f00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	00017f5f 	.word	0x00017f5f

08005f30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d122      	bne.n	8005f94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f5e:	f7fb f9c1 	bl	80012e4 <HAL_GetTick>
 8005f62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f64:	e00c      	b.n	8005f80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f66:	f7fb f9bd 	bl	80012e4 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f74:	d904      	bls.n	8005f80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <RTC_EnterInitMode+0x64>
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d1e8      	bne.n	8005f66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fb8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ff8b 	bl	8005ee4 <HAL_RTC_WaitForSynchro>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005ff6:	e005      	b.n	8006004 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	3b0a      	subs	r3, #10
 8006002:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	2b09      	cmp	r3, #9
 8006008:	d8f6      	bhi.n	8005ff8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	b2da      	uxtb	r2, r3
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	4313      	orrs	r3, r2
 8006016:	b2db      	uxtb	r3, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	b2db      	uxtb	r3, r3
 8006050:	4413      	add	r3, r2
 8006052:	b2db      	uxtb	r3, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e07b      	b.n	800617e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006096:	d009      	beq.n	80060ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	61da      	str	r2, [r3, #28]
 800609e:	e005      	b.n	80060ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fa ffa2 	bl	8001010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006130:	ea42 0103 	orr.w	r1, r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	f003 0104 	and.w	r1, r3, #4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	f003 0210 	and.w	r2, r3, #16
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800616c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006186:	b084      	sub	sp, #16
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	f107 001c 	add.w	r0, r7, #28
 8006194:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006198:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800619c:	2b01      	cmp	r3, #1
 800619e:	d123      	bne.n	80061e8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80061b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d105      	bne.n	80061dc <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f9dc 	bl	800659a <USB_CoreReset>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
 80061e6:	e01b      	b.n	8006220 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f9d0 	bl	800659a <USB_CoreReset>
 80061fa:	4603      	mov	r3, r0
 80061fc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	639a      	str	r2, [r3, #56]	@ 0x38
 8006212:	e005      	b.n	8006220 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006218:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006220:	7fbb      	ldrb	r3, [r7, #30]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d10b      	bne.n	800623e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f043 0206 	orr.w	r2, r3, #6
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f043 0220 	orr.w	r2, r3, #32
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800624a:	b004      	add	sp, #16
 800624c:	4770      	bx	lr

0800624e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f043 0201 	orr.w	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f023 0201 	bic.w	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d115      	bne.n	80062e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062c0:	200a      	movs	r0, #10
 80062c2:	f7fb f81b 	bl	80012fc <HAL_Delay>
      ms += 10U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	330a      	adds	r3, #10
 80062ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f956 	bl	800657e <USB_GetMode>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d01e      	beq.n	8006316 <USB_SetCurrentMode+0x84>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2bc7      	cmp	r3, #199	@ 0xc7
 80062dc:	d9f0      	bls.n	80062c0 <USB_SetCurrentMode+0x2e>
 80062de:	e01a      	b.n	8006316 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d115      	bne.n	8006312 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062f2:	200a      	movs	r0, #10
 80062f4:	f7fb f802 	bl	80012fc <HAL_Delay>
      ms += 10U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	330a      	adds	r3, #10
 80062fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f93d 	bl	800657e <USB_GetMode>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <USB_SetCurrentMode+0x84>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2bc7      	cmp	r3, #199	@ 0xc7
 800630e:	d9f0      	bls.n	80062f2 <USB_SetCurrentMode+0x60>
 8006310:	e001      	b.n	8006316 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e005      	b.n	8006322 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2bc8      	cmp	r3, #200	@ 0xc8
 800631a:	d101      	bne.n	8006320 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006344:	d901      	bls.n	800634a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e01b      	b.n	8006382 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	daf2      	bge.n	8006338 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	019b      	lsls	r3, r3, #6
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800636e:	d901      	bls.n	8006374 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e006      	b.n	8006382 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b20      	cmp	r3, #32
 800637e:	d0f0      	beq.n	8006362 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063a6:	d901      	bls.n	80063ac <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e018      	b.n	80063de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	daf2      	bge.n	800639a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2210      	movs	r2, #16
 80063bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063ca:	d901      	bls.n	80063d0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e006      	b.n	80063de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d0f0      	beq.n	80063be <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b089      	sub	sp, #36	@ 0x24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	4611      	mov	r1, r2
 80063f6:	461a      	mov	r2, r3
 80063f8:	460b      	mov	r3, r1
 80063fa:	71fb      	strb	r3, [r7, #7]
 80063fc:	4613      	mov	r3, r2
 80063fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006408:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800640c:	2b00      	cmp	r3, #0
 800640e:	d123      	bne.n	8006458 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006410:	88bb      	ldrh	r3, [r7, #4]
 8006412:	3303      	adds	r3, #3
 8006414:	089b      	lsrs	r3, r3, #2
 8006416:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
 800641c:	e018      	b.n	8006450 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	031a      	lsls	r2, r3, #12
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800642a:	461a      	mov	r2, r3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	3301      	adds	r3, #1
 8006436:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3301      	adds	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	3301      	adds	r3, #1
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	429a      	cmp	r2, r3
 8006456:	d3e2      	bcc.n	800641e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3724      	adds	r7, #36	@ 0x24
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006466:	b480      	push	{r7}
 8006468:	b08b      	sub	sp, #44	@ 0x2c
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	4613      	mov	r3, r2
 8006472:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	089b      	lsrs	r3, r3, #2
 8006480:	b29b      	uxth	r3, r3
 8006482:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800648c:	2300      	movs	r3, #0
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	e014      	b.n	80064bc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	601a      	str	r2, [r3, #0]
    pDest++;
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	3301      	adds	r3, #1
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	3301      	adds	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	3301      	adds	r3, #1
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	3301      	adds	r3, #1
 80064b4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	3301      	adds	r3, #1
 80064ba:	623b      	str	r3, [r7, #32]
 80064bc:	6a3a      	ldr	r2, [r7, #32]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d3e6      	bcc.n	8006492 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064c4:	8bfb      	ldrh	r3, [r7, #30]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01e      	beq.n	8006508 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d4:	461a      	mov	r2, r3
 80064d6:	f107 0310 	add.w	r3, r7, #16
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	701a      	strb	r2, [r3, #0]
      i++;
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	3301      	adds	r3, #1
 80064f4:	623b      	str	r3, [r7, #32]
      pDest++;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	3301      	adds	r3, #1
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80064fc:	8bfb      	ldrh	r3, [r7, #30]
 80064fe:	3b01      	subs	r3, #1
 8006500:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006502:	8bfb      	ldrh	r3, [r7, #30]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1ea      	bne.n	80064de <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800650a:	4618      	mov	r0, r3
 800650c:	372c      	adds	r7, #44	@ 0x2c
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4013      	ands	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800652e:	68fb      	ldr	r3, [r7, #12]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4013      	ands	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006570:	68bb      	ldr	r3, [r7, #8]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0301 	and.w	r3, r3, #1
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3301      	adds	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065b2:	d901      	bls.n	80065b8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e01b      	b.n	80065f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	daf2      	bge.n	80065a6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f043 0201 	orr.w	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065dc:	d901      	bls.n	80065e2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e006      	b.n	80065f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d0f0      	beq.n	80065d0 <USB_CoreReset+0x36>

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065fc:	b084      	sub	sp, #16
 80065fe:	b580      	push	{r7, lr}
 8006600:	b086      	sub	sp, #24
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800660a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800661c:	461a      	mov	r2, r3
 800661e:	2300      	movs	r3, #0
 8006620:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d119      	bne.n	8006686 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006656:	2b01      	cmp	r3, #1
 8006658:	d10a      	bne.n	8006670 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006668:	f043 0304 	orr.w	r3, r3, #4
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e014      	b.n	800669a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800667e:	f023 0304 	bic.w	r3, r3, #4
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	e009      	b.n	800669a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006694:	f023 0304 	bic.w	r3, r3, #4
 8006698:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800669a:	2110      	movs	r1, #16
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff fe44 	bl	800632a <USB_FlushTxFifo>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff fe6e 	bl	800638e <USB_FlushRxFifo>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	e015      	b.n	80066ee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ce:	461a      	mov	r2, r3
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e2:	461a      	mov	r2, r3
 80066e4:	2300      	movs	r3, #0
 80066e6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3301      	adds	r3, #1
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80066f2:	461a      	mov	r2, r3
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d3e3      	bcc.n	80066c2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a18      	ldr	r2, [pc, #96]	@ (800676c <USB_HostInit+0x170>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10b      	bne.n	8006728 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006716:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a15      	ldr	r2, [pc, #84]	@ (8006770 <USB_HostInit+0x174>)
 800671c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a14      	ldr	r2, [pc, #80]	@ (8006774 <USB_HostInit+0x178>)
 8006722:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006726:	e009      	b.n	800673c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2280      	movs	r2, #128	@ 0x80
 800672c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a11      	ldr	r2, [pc, #68]	@ (8006778 <USB_HostInit+0x17c>)
 8006732:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a11      	ldr	r2, [pc, #68]	@ (800677c <USB_HostInit+0x180>)
 8006738:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800673c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f043 0210 	orr.w	r2, r3, #16
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	4b0a      	ldr	r3, [pc, #40]	@ (8006780 <USB_HostInit+0x184>)
 8006756:	4313      	orrs	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006768:	b004      	add	sp, #16
 800676a:	4770      	bx	lr
 800676c:	40040000 	.word	0x40040000
 8006770:	01000200 	.word	0x01000200
 8006774:	00e00300 	.word	0x00e00300
 8006778:	00600080 	.word	0x00600080
 800677c:	004000e0 	.word	0x004000e0
 8006780:	a3200008 	.word	0xa3200008

08006784 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	68f9      	ldr	r1, [r7, #12]
 80067b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80067bc:	4313      	orrs	r3, r2
 80067be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d107      	bne.n	80067d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067cc:	461a      	mov	r2, r3
 80067ce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80067d2:	6053      	str	r3, [r2, #4]
 80067d4:	e00c      	b.n	80067f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d107      	bne.n	80067ec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067e2:	461a      	mov	r2, r3
 80067e4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80067e8:	6053      	str	r3, [r2, #4]
 80067ea:	e001      	b.n	80067f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800681e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800682c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800682e:	2064      	movs	r0, #100	@ 0x64
 8006830:	f7fa fd64 	bl	80012fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800683c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006840:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006842:	200a      	movs	r0, #10
 8006844:	f7fa fd5a 	bl	80012fc <HAL_Delay>

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006852:	b480      	push	{r7}
 8006854:	b085      	sub	sp, #20
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	460b      	mov	r3, r1
 800685c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006876:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <USB_DriveVbus+0x44>
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d106      	bne.n	8006896 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006890:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006894:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800689c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a0:	d109      	bne.n	80068b6 <USB_DriveVbus+0x64>
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80068b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	0c5b      	lsrs	r3, r3, #17
 80068e2:	f003 0303 	and.w	r3, r3, #3
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	b29b      	uxth	r3, r3
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	461a      	mov	r2, r3
 8006922:	4603      	mov	r3, r0
 8006924:	70fb      	strb	r3, [r7, #3]
 8006926:	460b      	mov	r3, r1
 8006928:	70bb      	strb	r3, [r7, #2]
 800692a:	4613      	mov	r3, r2
 800692c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006942:	461a      	mov	r2, r3
 8006944:	f04f 33ff 	mov.w	r3, #4294967295
 8006948:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800694a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800694e:	2b03      	cmp	r3, #3
 8006950:	d87c      	bhi.n	8006a4c <USB_HC_Init+0x138>
 8006952:	a201      	add	r2, pc, #4	@ (adr r2, 8006958 <USB_HC_Init+0x44>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	08006969 	.word	0x08006969
 800695c:	08006a0f 	.word	0x08006a0f
 8006960:	08006969 	.word	0x08006969
 8006964:	080069d1 	.word	0x080069d1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4413      	add	r3, r2
 8006970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006974:	461a      	mov	r2, r3
 8006976:	f240 439d 	movw	r3, #1181	@ 0x49d
 800697a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800697c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006980:	2b00      	cmp	r3, #0
 8006982:	da10      	bge.n	80069a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	78fa      	ldrb	r2, [r7, #3]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	440a      	add	r2, r1
 800699a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800699e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80069a4:	e055      	b.n	8006a52 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a6f      	ldr	r2, [pc, #444]	@ (8006b68 <USB_HC_Init+0x254>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d151      	bne.n	8006a52 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80069cc:	60d3      	str	r3, [r2, #12]
      break;
 80069ce:	e040      	b.n	8006a52 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069dc:	461a      	mov	r2, r3
 80069de:	f240 639d 	movw	r3, #1693	@ 0x69d
 80069e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	da34      	bge.n	8006a56 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a0a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006a0c:	e023      	b.n	8006a56 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f240 2325 	movw	r3, #549	@ 0x225
 8006a20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da17      	bge.n	8006a5a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	78fa      	ldrb	r2, [r7, #3]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a44:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006a48:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006a4a:	e006      	b.n	8006a5a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	77fb      	strb	r3, [r7, #31]
      break;
 8006a50:	e004      	b.n	8006a5c <USB_HC_Init+0x148>
      break;
 8006a52:	bf00      	nop
 8006a54:	e002      	b.n	8006a5c <USB_HC_Init+0x148>
      break;
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <USB_HC_Init+0x148>
      break;
 8006a5a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	78fa      	ldrb	r2, [r7, #3]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a88:	f043 0302 	orr.w	r3, r3, #2
 8006a8c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa2:	6939      	ldr	r1, [r7, #16]
 8006aa4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006ab8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	da03      	bge.n	8006ac8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ac0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	e001      	b.n	8006acc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fef9 	bl	80068c4 <USB_GetHostSpeed>
 8006ad2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ad4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d106      	bne.n	8006aea <USB_HC_Init+0x1d6>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d003      	beq.n	8006aea <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006ae2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e001      	b.n	8006aee <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006aee:	787b      	ldrb	r3, [r7, #1]
 8006af0:	059b      	lsls	r3, r3, #22
 8006af2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006af6:	78bb      	ldrb	r3, [r7, #2]
 8006af8:	02db      	lsls	r3, r3, #11
 8006afa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006afe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b04:	049b      	lsls	r3, r3, #18
 8006b06:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006b0c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b12:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006b28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b2c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d003      	beq.n	8006b3e <USB_HC_Init+0x22a>
 8006b36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d10f      	bne.n	8006b5e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40040000 	.word	0x40040000

08006b6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08c      	sub	sp, #48	@ 0x30
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b88:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8006d04 <USB_HC_StartXfer+0x198>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d12f      	bne.n	8006bf2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d11c      	bne.n	8006bd2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	7c9b      	ldrb	r3, [r3, #18]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <USB_HC_StartXfer+0x3c>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	7c9b      	ldrb	r3, [r3, #18]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d124      	bne.n	8006bf2 <USB_HC_StartXfer+0x86>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	799b      	ldrb	r3, [r3, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d120      	bne.n	8006bf2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	6a3a      	ldr	r2, [r7, #32]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bce:	60d3      	str	r3, [r2, #12]
 8006bd0:	e00f      	b.n	8006bf2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10b      	bne.n	8006bf2 <USB_HC_StartXfer+0x86>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	795b      	ldrb	r3, [r3, #5]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d107      	bne.n	8006bf2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	4619      	mov	r1, r3
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fb6b 	bl	80072c4 <USB_DoPing>
        return HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e232      	b.n	8007058 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	799b      	ldrb	r3, [r3, #6]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d158      	bne.n	8006cac <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	78db      	ldrb	r3, [r3, #3]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	8a92      	ldrh	r2, [r2, #20]
 8006c0c:	fb03 f202 	mul.w	r2, r3, r2
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	61da      	str	r2, [r3, #28]
 8006c14:	e07c      	b.n	8006d10 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	7c9b      	ldrb	r3, [r3, #18]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d130      	bne.n	8006c80 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	2bbc      	cmp	r3, #188	@ 0xbc
 8006c24:	d918      	bls.n	8006c58 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	8a9b      	ldrh	r3, [r3, #20]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d003      	beq.n	8006c48 <USB_HC_StartXfer+0xdc>
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d103      	bne.n	8006c50 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	e05f      	b.n	8006d10 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2201      	movs	r2, #1
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	e05b      	b.n	8006d10 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d007      	beq.n	8006c78 <USB_HC_StartXfer+0x10c>
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d003      	beq.n	8006c78 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2204      	movs	r2, #4
 8006c74:	60da      	str	r2, [r3, #12]
 8006c76:	e04b      	b.n	8006d10 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	60da      	str	r2, [r3, #12]
 8006c7e:	e047      	b.n	8006d10 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d10d      	bne.n	8006ca2 <USB_HC_StartXfer+0x136>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	8a92      	ldrh	r2, [r2, #20]
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d907      	bls.n	8006ca2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	8a92      	ldrh	r2, [r2, #20]
 8006c98:	fb03 f202 	mul.w	r2, r3, r2
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	61da      	str	r2, [r3, #28]
 8006ca0:	e036      	b.n	8006d10 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	61da      	str	r2, [r3, #28]
 8006caa:	e031      	b.n	8006d10 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d018      	beq.n	8006ce6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	8a92      	ldrh	r2, [r2, #20]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	8a92      	ldrh	r2, [r2, #20]
 8006cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006cca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006ccc:	8b7b      	ldrh	r3, [r7, #26]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d90b      	bls.n	8006cea <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006cd2:	8b7b      	ldrh	r3, [r7, #26]
 8006cd4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006cd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	8a92      	ldrh	r2, [r2, #20]
 8006cdc:	fb03 f202 	mul.w	r2, r3, r2
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	61da      	str	r2, [r3, #28]
 8006ce4:	e001      	b.n	8006cea <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	78db      	ldrb	r3, [r3, #3]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006cf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	8a92      	ldrh	r2, [r2, #20]
 8006cf8:	fb03 f202 	mul.w	r2, r3, r2
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	61da      	str	r2, [r3, #28]
 8006d00:	e006      	b.n	8006d10 <USB_HC_StartXfer+0x1a4>
 8006d02:	bf00      	nop
 8006d04:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d1a:	04d9      	lsls	r1, r3, #19
 8006d1c:	4ba3      	ldr	r3, [pc, #652]	@ (8006fac <USB_HC_StartXfer+0x440>)
 8006d1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	7d9b      	ldrb	r3, [r3, #22]
 8006d26:	075b      	lsls	r3, r3, #29
 8006d28:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d2c:	69f9      	ldr	r1, [r7, #28]
 8006d2e:	0148      	lsls	r0, r1, #5
 8006d30:	6a39      	ldr	r1, [r7, #32]
 8006d32:	4401      	add	r1, r0
 8006d34:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6999      	ldr	r1, [r3, #24]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d52:	460a      	mov	r2, r1
 8006d54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	7e7b      	ldrb	r3, [r7, #25]
 8006d9e:	075b      	lsls	r3, r3, #29
 8006da0:	69f9      	ldr	r1, [r7, #28]
 8006da2:	0148      	lsls	r0, r1, #5
 8006da4:	6a39      	ldr	r1, [r7, #32]
 8006da6:	4401      	add	r1, r0
 8006da8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006dac:	4313      	orrs	r3, r2
 8006dae:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	799b      	ldrb	r3, [r3, #6]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	f040 80c3 	bne.w	8006f40 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	7c5b      	ldrb	r3, [r3, #17]
 8006dbe:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	6a3a      	ldr	r2, [r7, #32]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006dd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006dd6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	6a3a      	ldr	r2, [r7, #32]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006df2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006df6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	79db      	ldrb	r3, [r3, #7]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d123      	bne.n	8006e48 <USB_HC_StartXfer+0x2dc>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	78db      	ldrb	r3, [r3, #3]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11f      	bne.n	8006e48 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	6a3a      	ldr	r2, [r7, #32]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e26:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e46:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	7c9b      	ldrb	r3, [r3, #18]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d003      	beq.n	8006e58 <USB_HC_StartXfer+0x2ec>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	7c9b      	ldrb	r3, [r3, #18]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d117      	bne.n	8006e88 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d113      	bne.n	8006e88 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	78db      	ldrb	r3, [r3, #3]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d10f      	bne.n	8006e88 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	6a3a      	ldr	r2, [r7, #32]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e86:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	7c9b      	ldrb	r3, [r3, #18]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d162      	bne.n	8006f56 <USB_HC_StartXfer+0x3ea>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	78db      	ldrb	r3, [r3, #3]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d15e      	bne.n	8006f56 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d858      	bhi.n	8006f54 <USB_HC_StartXfer+0x3e8>
 8006ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <USB_HC_StartXfer+0x33c>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006eb9 	.word	0x08006eb9
 8006eac:	08006edb 	.word	0x08006edb
 8006eb0:	08006efd 	.word	0x08006efd
 8006eb4:	08006f1f 	.word	0x08006f1f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ed6:	6053      	str	r3, [r2, #4]
          break;
 8006ed8:	e03d      	b.n	8006f56 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ef4:	f043 030e 	orr.w	r3, r3, #14
 8006ef8:	6053      	str	r3, [r2, #4]
          break;
 8006efa:	e02c      	b.n	8006f56 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	0151      	lsls	r1, r2, #5
 8006f0e:	6a3a      	ldr	r2, [r7, #32]
 8006f10:	440a      	add	r2, r1
 8006f12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f1a:	6053      	str	r3, [r2, #4]
          break;
 8006f1c:	e01b      	b.n	8006f56 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	6a3a      	ldr	r2, [r7, #32]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f3c:	6053      	str	r3, [r2, #4]
          break;
 8006f3e:	e00a      	b.n	8006f56 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6053      	str	r3, [r2, #4]
 8006f52:	e000      	b.n	8006f56 <USB_HC_StartXfer+0x3ea>
          break;
 8006f54:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f6c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	78db      	ldrb	r3, [r3, #3]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	e003      	b.n	8006f88 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f86:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f8e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e055      	b.n	8007058 <USB_HC_StartXfer+0x4ec>
 8006fac:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	78db      	ldrb	r3, [r3, #3]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d14e      	bne.n	8007056 <USB_HC_StartXfer+0x4ea>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d04a      	beq.n	8007056 <USB_HC_StartXfer+0x4ea>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	79db      	ldrb	r3, [r3, #7]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d146      	bne.n	8007056 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	7c9b      	ldrb	r3, [r3, #18]
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d831      	bhi.n	8007034 <USB_HC_StartXfer+0x4c8>
 8006fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <USB_HC_StartXfer+0x46c>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	08006fe9 	.word	0x08006fe9
 8006fdc:	0800700d 	.word	0x0800700d
 8006fe0:	08006fe9 	.word	0x08006fe9
 8006fe4:	0800700d 	.word	0x0800700d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	3303      	adds	r3, #3
 8006fee:	089b      	lsrs	r3, r3, #2
 8006ff0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006ff2:	8afa      	ldrh	r2, [r7, #22]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d91c      	bls.n	8007038 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f043 0220 	orr.w	r2, r3, #32
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	619a      	str	r2, [r3, #24]
        }
        break;
 800700a:	e015      	b.n	8007038 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	3303      	adds	r3, #3
 8007012:	089b      	lsrs	r3, r3, #2
 8007014:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007016:	8afa      	ldrh	r2, [r7, #22]
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	b29b      	uxth	r3, r3
 8007022:	429a      	cmp	r2, r3
 8007024:	d90a      	bls.n	800703c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	619a      	str	r2, [r3, #24]
        }
        break;
 8007032:	e003      	b.n	800703c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007034:	bf00      	nop
 8007036:	e002      	b.n	800703e <USB_HC_StartXfer+0x4d2>
        break;
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <USB_HC_StartXfer+0x4d2>
        break;
 800703c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6999      	ldr	r1, [r3, #24]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	785a      	ldrb	r2, [r3, #1]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	b29b      	uxth	r3, r3
 800704c:	2000      	movs	r0, #0
 800704e:	9000      	str	r0, [sp, #0]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f7ff f9ca 	bl	80063ea <USB_WritePacket>
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3728      	adds	r7, #40	@ 0x28
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	b29b      	uxth	r3, r3
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007082:	b480      	push	{r7}
 8007084:	b089      	sub	sp, #36	@ 0x24
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	0c9b      	lsrs	r3, r3, #18
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	0fdb      	lsrs	r3, r3, #31
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	0fdb      	lsrs	r3, r3, #31
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d10d      	bne.n	8007104 <USB_HC_Halt+0x82>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <USB_HC_Halt+0x82>
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d002      	beq.n	8007100 <USB_HC_Halt+0x7e>
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d101      	bne.n	8007104 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e0d8      	b.n	80072b6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <USB_HC_Halt+0x8e>
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d173      	bne.n	80071f8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	440a      	add	r2, r1
 8007126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800712a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800712e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	d14a      	bne.n	80071d2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d133      	bne.n	80071b0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	440a      	add	r2, r1
 800715e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007166:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	440a      	add	r2, r1
 800717e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007182:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007186:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	3301      	adds	r3, #1
 800718c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007194:	d82e      	bhi.n	80071f4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	4413      	add	r3, r2
 800719e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071ac:	d0ec      	beq.n	8007188 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ae:	e081      	b.n	80072b4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071ce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071d0:	e070      	b.n	80072b4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071f2:	e05f      	b.n	80072b4 <USB_HC_Halt+0x232>
            break;
 80071f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071f6:	e05d      	b.n	80072b4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	440a      	add	r2, r1
 800720e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007212:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007216:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d133      	bne.n	8007290 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007242:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007246:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	4413      	add	r3, r2
 8007250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	440a      	add	r2, r1
 800725e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007262:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007266:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	3301      	adds	r3, #1
 800726c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007274:	d81d      	bhi.n	80072b2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800728c:	d0ec      	beq.n	8007268 <USB_HC_Halt+0x1e6>
 800728e:	e011      	b.n	80072b4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	4413      	add	r3, r2
 8007298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	e000      	b.n	80072b4 <USB_HC_Halt+0x232>
          break;
 80072b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3724      	adds	r7, #36	@ 0x24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80072d8:	2301      	movs	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	04da      	lsls	r2, r3, #19
 80072e0:	4b15      	ldr	r3, [pc, #84]	@ (8007338 <USB_DoPing+0x74>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800730c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007314:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	4413      	add	r3, r2
 800731e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007322:	461a      	mov	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	1ff80000 	.word	0x1ff80000

0800733c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7fe ff8d 	bl	8006270 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007356:	2110      	movs	r1, #16
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7fe ffe6 	bl	800632a <USB_FlushTxFifo>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff f810 	bl	800638e <USB_FlushRxFifo>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007378:	2300      	movs	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
 800737c:	e01f      	b.n	80073be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007394:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800739c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b2:	461a      	mov	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	3301      	adds	r3, #1
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d9dc      	bls.n	800737e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80073c4:	2300      	movs	r3, #0
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	e034      	b.n	8007434 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fe:	461a      	mov	r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007410:	d80c      	bhi.n	800742c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007424:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007428:	d0ec      	beq.n	8007404 <USB_StopHost+0xc8>
 800742a:	e000      	b.n	800742e <USB_StopHost+0xf2>
        break;
 800742c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	3301      	adds	r3, #1
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b0f      	cmp	r3, #15
 8007438:	d9c7      	bls.n	80073ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007440:	461a      	mov	r2, r3
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f04f 32ff 	mov.w	r2, #4294967295
 800744e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fe fefc 	bl	800624e <USB_EnableGlobalInt>

  return ret;
 8007456:	7ffb      	ldrb	r3, [r7, #31]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007460:	b590      	push	{r4, r7, lr}
 8007462:	b089      	sub	sp, #36	@ 0x24
 8007464:	af04      	add	r7, sp, #16
 8007466:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007468:	2301      	movs	r3, #1
 800746a:	2202      	movs	r2, #2
 800746c:	2102      	movs	r1, #2
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fc85 	bl	8007d7e <USBH_FindInterface>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	2bff      	cmp	r3, #255	@ 0xff
 800747c:	d002      	beq.n	8007484 <USBH_CDC_InterfaceInit+0x24>
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d901      	bls.n	8007488 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007484:	2302      	movs	r3, #2
 8007486:	e13d      	b.n	8007704 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc5a 	bl	8007d46 <USBH_SelectInterface>
 8007492:	4603      	mov	r3, r0
 8007494:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800749c:	2302      	movs	r3, #2
 800749e:	e131      	b.n	8007704 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80074a6:	2050      	movs	r0, #80	@ 0x50
 80074a8:	f002 fb64 	bl	8009b74 <malloc>
 80074ac:	4603      	mov	r3, r0
 80074ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80074c0:	2302      	movs	r3, #2
 80074c2:	e11f      	b.n	8007704 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80074c4:	2250      	movs	r2, #80	@ 0x50
 80074c6:	2100      	movs	r1, #0
 80074c8:	68b8      	ldr	r0, [r7, #8]
 80074ca:	f002 fc11 	bl	8009cf0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	211a      	movs	r1, #26
 80074d4:	fb01 f303 	mul.w	r3, r1, r3
 80074d8:	4413      	add	r3, r2
 80074da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b25b      	sxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da15      	bge.n	8007512 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	211a      	movs	r1, #26
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	211a      	movs	r1, #26
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800750c:	881a      	ldrh	r2, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 ffbe 	bl	800949a <USBH_AllocPipe>
 800751e:	4603      	mov	r3, r0
 8007520:	461a      	mov	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	7819      	ldrb	r1, [r3, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	7858      	ldrb	r0, [r3, #1]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	8952      	ldrh	r2, [r2, #10]
 800753e:	9202      	str	r2, [sp, #8]
 8007540:	2203      	movs	r2, #3
 8007542:	9201      	str	r2, [sp, #4]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	4623      	mov	r3, r4
 8007548:	4602      	mov	r2, r0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 ff76 	bl	800943c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2200      	movs	r2, #0
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f002 fa85 	bl	8009a68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800755e:	2300      	movs	r3, #0
 8007560:	2200      	movs	r2, #0
 8007562:	210a      	movs	r1, #10
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fc0a 	bl	8007d7e <USBH_FindInterface>
 800756a:	4603      	mov	r3, r0
 800756c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2bff      	cmp	r3, #255	@ 0xff
 8007572:	d002      	beq.n	800757a <USBH_CDC_InterfaceInit+0x11a>
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d901      	bls.n	800757e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800757a:	2302      	movs	r3, #2
 800757c:	e0c2      	b.n	8007704 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	211a      	movs	r1, #26
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	4413      	add	r3, r2
 800758a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b25b      	sxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	da16      	bge.n	80075c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	211a      	movs	r1, #26
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	4413      	add	r3, r2
 80075a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80075a6:	781a      	ldrb	r2, [r3, #0]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	211a      	movs	r1, #26
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80075bc:	881a      	ldrh	r2, [r3, #0]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	835a      	strh	r2, [r3, #26]
 80075c2:	e015      	b.n	80075f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	211a      	movs	r1, #26
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	4413      	add	r3, r2
 80075d0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80075d4:	781a      	ldrb	r2, [r3, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	211a      	movs	r1, #26
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80075ea:	881a      	ldrh	r2, [r3, #0]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	211a      	movs	r1, #26
 80075f6:	fb01 f303 	mul.w	r3, r1, r3
 80075fa:	4413      	add	r3, r2
 80075fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b25b      	sxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	da16      	bge.n	8007636 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	211a      	movs	r1, #26
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	4413      	add	r3, r2
 8007614:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	211a      	movs	r1, #26
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	4413      	add	r3, r2
 800762a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800762e:	881a      	ldrh	r2, [r3, #0]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	835a      	strh	r2, [r3, #26]
 8007634:	e015      	b.n	8007662 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	211a      	movs	r1, #26
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	211a      	movs	r1, #26
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	4413      	add	r3, r2
 8007658:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800765c:	881a      	ldrh	r2, [r3, #0]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	7b9b      	ldrb	r3, [r3, #14]
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 ff16 	bl	800949a <USBH_AllocPipe>
 800766e:	4603      	mov	r3, r0
 8007670:	461a      	mov	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	7bdb      	ldrb	r3, [r3, #15]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 ff0c 	bl	800949a <USBH_AllocPipe>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	7b59      	ldrb	r1, [r3, #13]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	7b98      	ldrb	r0, [r3, #14]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	8b12      	ldrh	r2, [r2, #24]
 80076a2:	9202      	str	r2, [sp, #8]
 80076a4:	2202      	movs	r2, #2
 80076a6:	9201      	str	r2, [sp, #4]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	4623      	mov	r3, r4
 80076ac:	4602      	mov	r2, r0
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fec4 	bl	800943c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	7b19      	ldrb	r1, [r3, #12]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	7bd8      	ldrb	r0, [r3, #15]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	8b52      	ldrh	r2, [r2, #26]
 80076cc:	9202      	str	r2, [sp, #8]
 80076ce:	2202      	movs	r2, #2
 80076d0:	9201      	str	r2, [sp, #4]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	4623      	mov	r3, r4
 80076d6:	4602      	mov	r2, r0
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 feaf 	bl	800943c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	7b5b      	ldrb	r3, [r3, #13]
 80076ea:	2200      	movs	r2, #0
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f002 f9ba 	bl	8009a68 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	7b1b      	ldrb	r3, [r3, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f002 f9b3 	bl	8009a68 <USBH_LL_SetToggle>

  return USBH_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	bd90      	pop	{r4, r7, pc}

0800770c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00e      	beq.n	8007744 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fea4 	bl	800947a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 fecf 	bl	80094dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	7b1b      	ldrb	r3, [r3, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00e      	beq.n	800776a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	7b1b      	ldrb	r3, [r3, #12]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fe91 	bl	800947a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	7b1b      	ldrb	r3, [r3, #12]
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 febc 	bl	80094dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	7b5b      	ldrb	r3, [r3, #13]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00e      	beq.n	8007790 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	7b5b      	ldrb	r3, [r3, #13]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 fe7e 	bl	800947a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	7b5b      	ldrb	r3, [r3, #13]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fea9 	bl	80094dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f002 f9ed 	bl	8009b84 <free>
    phost->pActiveClass->pData = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077b0:	2200      	movs	r2, #0
 80077b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3340      	adds	r3, #64	@ 0x40
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8b1 	bl	800793e <GetLineCoding>
 80077dc:	4603      	mov	r3, r0
 80077de:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80077e0:	7afb      	ldrb	r3, [r7, #11]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d105      	bne.n	80077f2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077ec:	2102      	movs	r1, #2
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800781c:	2b04      	cmp	r3, #4
 800781e:	d877      	bhi.n	8007910 <USBH_CDC_Process+0x114>
 8007820:	a201      	add	r2, pc, #4	@ (adr r2, 8007828 <USBH_CDC_Process+0x2c>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	0800783d 	.word	0x0800783d
 800782c:	08007843 	.word	0x08007843
 8007830:	08007873 	.word	0x08007873
 8007834:	080078e7 	.word	0x080078e7
 8007838:	080078f5 	.word	0x080078f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73fb      	strb	r3, [r7, #15]
      break;
 8007840:	e06d      	b.n	800791e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f897 	bl	800797c <SetLineCoding>
 800784e:	4603      	mov	r3, r0
 8007850:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007860:	e058      	b.n	8007914 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d055      	beq.n	8007914 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2204      	movs	r2, #4
 800786c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007870:	e050      	b.n	8007914 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3340      	adds	r3, #64	@ 0x40
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f860 	bl	800793e <GetLineCoding>
 800787e:	4603      	mov	r3, r0
 8007880:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d126      	bne.n	80078d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800789a:	791b      	ldrb	r3, [r3, #4]
 800789c:	429a      	cmp	r2, r3
 800789e:	d13b      	bne.n	8007918 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d133      	bne.n	8007918 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078bc:	429a      	cmp	r2, r3
 80078be:	d12b      	bne.n	8007918 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d124      	bne.n	8007918 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f958 	bl	8007b84 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078d4:	e020      	b.n	8007918 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d01d      	beq.n	8007918 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2204      	movs	r2, #4
 80078e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80078e4:	e018      	b.n	8007918 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f867 	bl	80079ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f8da 	bl	8007aa6 <CDC_ProcessReception>
      break;
 80078f2:	e014      	b.n	800791e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80078f4:	2100      	movs	r1, #0
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 f81a 	bl	8008930 <USBH_ClrFeature>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800790e:	e005      	b.n	800791c <USBH_CDC_Process+0x120>

    default:
      break;
 8007910:	bf00      	nop
 8007912:	e004      	b.n	800791e <USBH_CDC_Process+0x122>
      break;
 8007914:	bf00      	nop
 8007916:	e002      	b.n	800791e <USBH_CDC_Process+0x122>
      break;
 8007918:	bf00      	nop
 800791a:	e000      	b.n	800791e <USBH_CDC_Process+0x122>
      break;
 800791c:	bf00      	nop

  }

  return status;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	22a1      	movs	r2, #161	@ 0xa1
 800794c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2221      	movs	r2, #33	@ 0x21
 8007952:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2207      	movs	r2, #7
 8007964:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2207      	movs	r2, #7
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fb14 	bl	8008f9a <USBH_CtlReq>
 8007972:	4603      	mov	r3, r0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2221      	movs	r2, #33	@ 0x21
 800798a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2207      	movs	r2, #7
 80079a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2207      	movs	r2, #7
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 faf5 	bl	8008f9a <USBH_CtlReq>
 80079b0:	4603      	mov	r3, r0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b086      	sub	sp, #24
 80079be:	af02      	add	r7, sp, #8
 80079c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d002      	beq.n	80079e0 <CDC_ProcessTransmission+0x26>
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d023      	beq.n	8007a26 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80079de:	e05e      	b.n	8007a9e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	8b12      	ldrh	r2, [r2, #24]
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d90b      	bls.n	8007a04 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	69d9      	ldr	r1, [r3, #28]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8b1a      	ldrh	r2, [r3, #24]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	7b5b      	ldrb	r3, [r3, #13]
 80079f8:	2001      	movs	r0, #1
 80079fa:	9000      	str	r0, [sp, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 fcda 	bl	80093b6 <USBH_BulkSendData>
 8007a02:	e00b      	b.n	8007a1c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	7b5b      	ldrb	r3, [r3, #13]
 8007a12:	2001      	movs	r0, #1
 8007a14:	9000      	str	r0, [sp, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fccd 	bl	80093b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007a24:	e03b      	b.n	8007a9e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	7b5b      	ldrb	r3, [r3, #13]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fff1 	bl	8009a14 <USBH_LL_GetURBState>
 8007a32:	4603      	mov	r3, r0
 8007a34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d128      	bne.n	8007a8e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	8b12      	ldrh	r2, [r2, #24]
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d90e      	bls.n	8007a66 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	8b12      	ldrh	r2, [r2, #24]
 8007a50:	1a9a      	subs	r2, r3, r2
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	8b12      	ldrh	r2, [r2, #24]
 8007a5e:	441a      	add	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	61da      	str	r2, [r3, #28]
 8007a64:	e002      	b.n	8007a6c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007a7c:	e00e      	b.n	8007a9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f868 	bl	8007b5c <USBH_CDC_TransmitCallback>
      break;
 8007a8c:	e006      	b.n	8007a9c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d103      	bne.n	8007a9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007a9c:	bf00      	nop
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d002      	beq.n	8007acc <CDC_ProcessReception+0x26>
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d00e      	beq.n	8007ae8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007aca:	e043      	b.n	8007b54 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	6a19      	ldr	r1, [r3, #32]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	8b5a      	ldrh	r2, [r3, #26]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	7b1b      	ldrb	r3, [r3, #12]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 fc91 	bl	8009400 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007ae6:	e035      	b.n	8007b54 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	7b1b      	ldrb	r3, [r3, #12]
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 ff90 	bl	8009a14 <USBH_LL_GetURBState>
 8007af4:	4603      	mov	r3, r0
 8007af6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007af8:	7cfb      	ldrb	r3, [r7, #19]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d129      	bne.n	8007b52 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	7b1b      	ldrb	r3, [r3, #12]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 fef3 	bl	80098f0 <USBH_LL_GetLastXferSize>
 8007b0a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d016      	beq.n	8007b44 <CDC_ProcessReception+0x9e>
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	8b5b      	ldrh	r3, [r3, #26]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d110      	bne.n	8007b44 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad2      	subs	r2, r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	441a      	add	r2, r3
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007b42:	e006      	b.n	8007b52 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f80f 	bl	8007b70 <USBH_CDC_ReceiveCallback>
      break;
 8007b52:	bf00      	nop
  }
}
 8007b54:	bf00      	nop
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007bac:	2302      	movs	r3, #2
 8007bae:	e029      	b.n	8007c04 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	79fa      	ldrb	r2, [r7, #7]
 8007bb4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f81f 	bl	8007c0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f001 fdc3 	bl	8009788 <USBH_LL_Init>

  return USBH_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e009      	b.n	8007c32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	33e0      	adds	r3, #224	@ 0xe0
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	2200      	movs	r2, #0
 8007c2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b0f      	cmp	r3, #15
 8007c36:	d9f2      	bls.n	8007c1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	e009      	b.n	8007c52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c48:	2200      	movs	r2, #0
 8007c4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c58:	d3f1      	bcc.n	8007c3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2240      	movs	r2, #64	@ 0x40
 8007c7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	331c      	adds	r3, #28
 8007caa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f002 f81d 	bl	8009cf0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f002 f814 	bl	8009cf0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007cce:	2212      	movs	r2, #18
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f002 f80c 	bl	8009cf0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007cde:	223e      	movs	r2, #62	@ 0x3e
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f002 f804 	bl	8009cf0 <memset>

  return USBH_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b085      	sub	sp, #20
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d016      	beq.n	8007d34 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10e      	bne.n	8007d2e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d16:	1c59      	adds	r1, r3, #1
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	33de      	adds	r3, #222	@ 0xde
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]
 8007d2c:	e004      	b.n	8007d38 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d2e:	2302      	movs	r3, #2
 8007d30:	73fb      	strb	r3, [r7, #15]
 8007d32:	e001      	b.n	8007d38 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d34:	2302      	movs	r3, #2
 8007d36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d204      	bcs.n	8007d6c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	78fa      	ldrb	r2, [r7, #3]
 8007d66:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007d6a:	e001      	b.n	8007d70 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b087      	sub	sp, #28
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	70fb      	strb	r3, [r7, #3]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70bb      	strb	r3, [r7, #2]
 8007d94:	4613      	mov	r3, r2
 8007d96:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007da6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007da8:	e025      	b.n	8007df6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	221a      	movs	r2, #26
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
 8007db2:	3308      	adds	r3, #8
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	3302      	adds	r3, #2
 8007dba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	795b      	ldrb	r3, [r3, #5]
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d002      	beq.n	8007dcc <USBH_FindInterface+0x4e>
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	2bff      	cmp	r3, #255	@ 0xff
 8007dca:	d111      	bne.n	8007df0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007dd0:	78ba      	ldrb	r2, [r7, #2]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d002      	beq.n	8007ddc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007dd6:	78bb      	ldrb	r3, [r7, #2]
 8007dd8:	2bff      	cmp	r3, #255	@ 0xff
 8007dda:	d109      	bne.n	8007df0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007de0:	787a      	ldrb	r2, [r7, #1]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d002      	beq.n	8007dec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007de6:	787b      	ldrb	r3, [r7, #1]
 8007de8:	2bff      	cmp	r3, #255	@ 0xff
 8007dea:	d101      	bne.n	8007df0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	e006      	b.n	8007dfe <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	3301      	adds	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d9d6      	bls.n	8007daa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007dfc:	23ff      	movs	r3, #255	@ 0xff
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 fcf4 	bl	8009800 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007e18:	2101      	movs	r1, #1
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fe0d 	bl	8009a3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af04      	add	r7, sp, #16
 8007e32:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e34:	2302      	movs	r3, #2
 8007e36:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d102      	bne.n	8007e4e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b0b      	cmp	r3, #11
 8007e56:	f200 81bb 	bhi.w	80081d0 <USBH_Process+0x3a4>
 8007e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <USBH_Process+0x34>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e91 	.word	0x08007e91
 8007e64:	08007ec3 	.word	0x08007ec3
 8007e68:	08007f2b 	.word	0x08007f2b
 8007e6c:	0800816b 	.word	0x0800816b
 8007e70:	080081d1 	.word	0x080081d1
 8007e74:	08007fcb 	.word	0x08007fcb
 8007e78:	08008111 	.word	0x08008111
 8007e7c:	08008001 	.word	0x08008001
 8007e80:	08008021 	.word	0x08008021
 8007e84:	0800803f 	.word	0x0800803f
 8007e88:	08008083 	.word	0x08008083
 8007e8c:	08008153 	.word	0x08008153
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 819b 	beq.w	80081d4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ea4:	20c8      	movs	r0, #200	@ 0xc8
 8007ea6:	f001 fe12 	bl	8009ace <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 fd05 	bl	80098ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ec0:	e188      	b.n	80081d4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d107      	bne.n	8007edc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007eda:	e18a      	b.n	80081f2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007ee2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ee6:	d914      	bls.n	8007f12 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007eee:	3301      	adds	r3, #1
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d903      	bls.n	8007f0a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	220d      	movs	r2, #13
 8007f06:	701a      	strb	r2, [r3, #0]
      break;
 8007f08:	e173      	b.n	80081f2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	701a      	strb	r2, [r3, #0]
      break;
 8007f10:	e16f      	b.n	80081f2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007f18:	f103 020a 	add.w	r2, r3, #10
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007f22:	200a      	movs	r0, #10
 8007f24:	f001 fdd3 	bl	8009ace <USBH_Delay>
      break;
 8007f28:	e163      	b.n	80081f2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f3a:	2104      	movs	r1, #4
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007f40:	2064      	movs	r0, #100	@ 0x64
 8007f42:	f001 fdc4 	bl	8009ace <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fc90 	bl	800986c <USBH_LL_GetSpeed>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2205      	movs	r2, #5
 8007f5a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fa9b 	bl	800949a <USBH_AllocPipe>
 8007f64:	4603      	mov	r3, r0
 8007f66:	461a      	mov	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007f6c:	2180      	movs	r1, #128	@ 0x80
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fa93 	bl	800949a <USBH_AllocPipe>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	7919      	ldrb	r1, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f90:	9202      	str	r2, [sp, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	9201      	str	r2, [sp, #4]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2280      	movs	r2, #128	@ 0x80
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fa4d 	bl	800943c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	7959      	ldrb	r1, [r3, #5]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007fb6:	9202      	str	r2, [sp, #8]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	9201      	str	r2, [sp, #4]
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fa3a 	bl	800943c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fc8:	e113      	b.n	80081f2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f916 	bl	80081fc <USBH_HandleEnum>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f040 80fd 	bne.w	80081d8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d103      	bne.n	8007ff8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ff6:	e0ef      	b.n	80081d8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2207      	movs	r2, #7
 8007ffc:	701a      	strb	r2, [r3, #0]
      break;
 8007ffe:	e0eb      	b.n	80081d8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80e8 	beq.w	80081dc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008012:	2101      	movs	r1, #1
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2208      	movs	r2, #8
 800801c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800801e:	e0dd      	b.n	80081dc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fc3a 	bl	80088a2 <USBH_SetCfg>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	f040 80d5 	bne.w	80081e0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2209      	movs	r2, #9
 800803a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800803c:	e0d0      	b.n	80081e0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d016      	beq.n	800807a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800804c:	2101      	movs	r1, #1
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fc4a 	bl	80088e8 <USBH_SetFeature>
 8008054:	4603      	mov	r3, r0
 8008056:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d103      	bne.n	8008068 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	220a      	movs	r2, #10
 8008064:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008066:	e0bd      	b.n	80081e4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b03      	cmp	r3, #3
 800806e:	f040 80b9 	bne.w	80081e4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	220a      	movs	r2, #10
 8008076:	701a      	strb	r2, [r3, #0]
      break;
 8008078:	e0b4      	b.n	80081e4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	220a      	movs	r2, #10
 800807e:	701a      	strb	r2, [r3, #0]
      break;
 8008080:	e0b0      	b.n	80081e4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80ad 	beq.w	80081e8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
 800809a:	e016      	b.n	80080ca <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800809c:	7bfa      	ldrb	r2, [r7, #15]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	32de      	adds	r2, #222	@ 0xde
 80080a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a6:	791a      	ldrb	r2, [r3, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d108      	bne.n	80080c4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80080b2:	7bfa      	ldrb	r2, [r7, #15]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	32de      	adds	r2, #222	@ 0xde
 80080b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80080c2:	e005      	b.n	80080d0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	3301      	adds	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0e5      	beq.n	800809c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d016      	beq.n	8008108 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d109      	bne.n	8008100 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2206      	movs	r2, #6
 80080f0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080f8:	2103      	movs	r1, #3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080fe:	e073      	b.n	80081e8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	220d      	movs	r2, #13
 8008104:	701a      	strb	r2, [r3, #0]
      break;
 8008106:	e06f      	b.n	80081e8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	220d      	movs	r2, #13
 800810c:	701a      	strb	r2, [r3, #0]
      break;
 800810e:	e06b      	b.n	80081e8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d017      	beq.n	800814a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
 8008126:	4603      	mov	r3, r0
 8008128:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d103      	bne.n	800813a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	220b      	movs	r2, #11
 8008136:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008138:	e058      	b.n	80081ec <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d154      	bne.n	80081ec <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	220d      	movs	r2, #13
 8008146:	701a      	strb	r2, [r3, #0]
      break;
 8008148:	e050      	b.n	80081ec <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	220d      	movs	r2, #13
 800814e:	701a      	strb	r2, [r3, #0]
      break;
 8008150:	e04c      	b.n	80081ec <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d049      	beq.n	80081f0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	4798      	blx	r3
      }
      break;
 8008168:	e042      	b.n	80081f0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff fd4a 	bl	8007c0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800817e:	2b00      	cmp	r3, #0
 8008180:	d009      	beq.n	8008196 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80081a6:	2105      	movs	r1, #5
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d107      	bne.n	80081c8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff fe22 	bl	8007e0a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081c6:	e014      	b.n	80081f2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 fb19 	bl	8009800 <USBH_LL_Start>
      break;
 80081ce:	e010      	b.n	80081f2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80081d0:	bf00      	nop
 80081d2:	e00e      	b.n	80081f2 <USBH_Process+0x3c6>
      break;
 80081d4:	bf00      	nop
 80081d6:	e00c      	b.n	80081f2 <USBH_Process+0x3c6>
      break;
 80081d8:	bf00      	nop
 80081da:	e00a      	b.n	80081f2 <USBH_Process+0x3c6>
    break;
 80081dc:	bf00      	nop
 80081de:	e008      	b.n	80081f2 <USBH_Process+0x3c6>
      break;
 80081e0:	bf00      	nop
 80081e2:	e006      	b.n	80081f2 <USBH_Process+0x3c6>
      break;
 80081e4:	bf00      	nop
 80081e6:	e004      	b.n	80081f2 <USBH_Process+0x3c6>
      break;
 80081e8:	bf00      	nop
 80081ea:	e002      	b.n	80081f2 <USBH_Process+0x3c6>
      break;
 80081ec:	bf00      	nop
 80081ee:	e000      	b.n	80081f2 <USBH_Process+0x3c6>
      break;
 80081f0:	bf00      	nop
  }
  return USBH_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af04      	add	r7, sp, #16
 8008202:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008204:	2301      	movs	r3, #1
 8008206:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008208:	2301      	movs	r3, #1
 800820a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b07      	cmp	r3, #7
 8008212:	f200 81bd 	bhi.w	8008590 <USBH_HandleEnum+0x394>
 8008216:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <USBH_HandleEnum+0x20>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	0800823d 	.word	0x0800823d
 8008220:	080082f7 	.word	0x080082f7
 8008224:	08008361 	.word	0x08008361
 8008228:	080083eb 	.word	0x080083eb
 800822c:	08008455 	.word	0x08008455
 8008230:	080084c5 	.word	0x080084c5
 8008234:	0800850b 	.word	0x0800850b
 8008238:	08008551 	.word	0x08008551
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800823c:	2108      	movs	r1, #8
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa4c 	bl	80086dc <USBH_Get_DevDesc>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d12e      	bne.n	80082ac <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	7919      	ldrb	r1, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008272:	9202      	str	r2, [sp, #8]
 8008274:	2200      	movs	r2, #0
 8008276:	9201      	str	r2, [sp, #4]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	4603      	mov	r3, r0
 800827c:	2280      	movs	r2, #128	@ 0x80
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 f8dc 	bl	800943c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	7959      	ldrb	r1, [r3, #5]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008298:	9202      	str	r2, [sp, #8]
 800829a:	2200      	movs	r2, #0
 800829c:	9201      	str	r2, [sp, #4]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	4603      	mov	r3, r0
 80082a2:	2200      	movs	r2, #0
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 f8c9 	bl	800943c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082aa:	e173      	b.n	8008594 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	f040 8170 	bne.w	8008594 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082ba:	3301      	adds	r3, #1
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d903      	bls.n	80082d6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	220d      	movs	r2, #13
 80082d2:	701a      	strb	r2, [r3, #0]
      break;
 80082d4:	e15e      	b.n	8008594 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	795b      	ldrb	r3, [r3, #5]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 f8fd 	bl	80094dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	791b      	ldrb	r3, [r3, #4]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f8f7 	bl	80094dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
      break;
 80082f4:	e14e      	b.n	8008594 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80082f6:	2112      	movs	r1, #18
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f9ef 	bl	80086dc <USBH_Get_DevDesc>
 80082fe:	4603      	mov	r3, r0
 8008300:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800830e:	e143      	b.n	8008598 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b03      	cmp	r3, #3
 8008314:	f040 8140 	bne.w	8008598 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800831e:	3301      	adds	r3, #1
 8008320:	b2da      	uxtb	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800832e:	2b03      	cmp	r3, #3
 8008330:	d903      	bls.n	800833a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	220d      	movs	r2, #13
 8008336:	701a      	strb	r2, [r3, #0]
      break;
 8008338:	e12e      	b.n	8008598 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	795b      	ldrb	r3, [r3, #5]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 f8cb 	bl	80094dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	791b      	ldrb	r3, [r3, #4]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 f8c5 	bl	80094dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
      break;
 800835e:	e11b      	b.n	8008598 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008360:	2101      	movs	r1, #1
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa79 	bl	800885a <USBH_SetAddress>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d130      	bne.n	80083d4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008372:	2002      	movs	r0, #2
 8008374:	f001 fbab 	bl	8009ace <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2203      	movs	r2, #3
 8008384:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	7919      	ldrb	r1, [r3, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800839a:	9202      	str	r2, [sp, #8]
 800839c:	2200      	movs	r2, #0
 800839e:	9201      	str	r2, [sp, #4]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	4603      	mov	r3, r0
 80083a4:	2280      	movs	r2, #128	@ 0x80
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 f848 	bl	800943c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7959      	ldrb	r1, [r3, #5]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083c0:	9202      	str	r2, [sp, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	9201      	str	r2, [sp, #4]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	4603      	mov	r3, r0
 80083ca:	2200      	movs	r2, #0
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 f835 	bl	800943c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083d2:	e0e3      	b.n	800859c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	f040 80e0 	bne.w	800859c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	220d      	movs	r2, #13
 80083e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	705a      	strb	r2, [r3, #1]
      break;
 80083e8:	e0d8      	b.n	800859c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80083ea:	2109      	movs	r1, #9
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f9a1 	bl	8008734 <USBH_Get_CfgDesc>
 80083f2:	4603      	mov	r3, r0
 80083f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2204      	movs	r2, #4
 8008400:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008402:	e0cd      	b.n	80085a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b03      	cmp	r3, #3
 8008408:	f040 80ca 	bne.w	80085a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008412:	3301      	adds	r3, #1
 8008414:	b2da      	uxtb	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008422:	2b03      	cmp	r3, #3
 8008424:	d903      	bls.n	800842e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	220d      	movs	r2, #13
 800842a:	701a      	strb	r2, [r3, #0]
      break;
 800842c:	e0b8      	b.n	80085a0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	795b      	ldrb	r3, [r3, #5]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f851 	bl	80094dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	791b      	ldrb	r3, [r3, #4]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 f84b 	bl	80094dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	701a      	strb	r2, [r3, #0]
      break;
 8008452:	e0a5      	b.n	80085a0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f969 	bl	8008734 <USBH_Get_CfgDesc>
 8008462:	4603      	mov	r3, r0
 8008464:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d103      	bne.n	8008474 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2205      	movs	r2, #5
 8008470:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008472:	e097      	b.n	80085a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b03      	cmp	r3, #3
 8008478:	f040 8094 	bne.w	80085a4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008482:	3301      	adds	r3, #1
 8008484:	b2da      	uxtb	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008492:	2b03      	cmp	r3, #3
 8008494:	d903      	bls.n	800849e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	220d      	movs	r2, #13
 800849a:	701a      	strb	r2, [r3, #0]
      break;
 800849c:	e082      	b.n	80085a4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	795b      	ldrb	r3, [r3, #5]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f819 	bl	80094dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	791b      	ldrb	r3, [r3, #4]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f813 	bl	80094dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	701a      	strb	r2, [r3, #0]
      break;
 80084c2:	e06f      	b.n	80085a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d019      	beq.n	8008502 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084da:	23ff      	movs	r3, #255	@ 0xff
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f953 	bl	8008788 <USBH_Get_StringDesc>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2206      	movs	r2, #6
 80084f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084f2:	e059      	b.n	80085a8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d156      	bne.n	80085a8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2206      	movs	r2, #6
 80084fe:	705a      	strb	r2, [r3, #1]
      break;
 8008500:	e052      	b.n	80085a8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2206      	movs	r2, #6
 8008506:	705a      	strb	r2, [r3, #1]
      break;
 8008508:	e04e      	b.n	80085a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008510:	2b00      	cmp	r3, #0
 8008512:	d019      	beq.n	8008548 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008520:	23ff      	movs	r3, #255	@ 0xff
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f930 	bl	8008788 <USBH_Get_StringDesc>
 8008528:	4603      	mov	r3, r0
 800852a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2207      	movs	r2, #7
 8008536:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008538:	e038      	b.n	80085ac <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d135      	bne.n	80085ac <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2207      	movs	r2, #7
 8008544:	705a      	strb	r2, [r3, #1]
      break;
 8008546:	e031      	b.n	80085ac <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2207      	movs	r2, #7
 800854c:	705a      	strb	r2, [r3, #1]
      break;
 800854e:	e02d      	b.n	80085ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008556:	2b00      	cmp	r3, #0
 8008558:	d017      	beq.n	800858a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008566:	23ff      	movs	r3, #255	@ 0xff
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f90d 	bl	8008788 <USBH_Get_StringDesc>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800857c:	e018      	b.n	80085b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	2b03      	cmp	r3, #3
 8008582:	d115      	bne.n	80085b0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
      break;
 8008588:	e012      	b.n	80085b0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
      break;
 800858e:	e00f      	b.n	80085b0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008590:	bf00      	nop
 8008592:	e00e      	b.n	80085b2 <USBH_HandleEnum+0x3b6>
      break;
 8008594:	bf00      	nop
 8008596:	e00c      	b.n	80085b2 <USBH_HandleEnum+0x3b6>
      break;
 8008598:	bf00      	nop
 800859a:	e00a      	b.n	80085b2 <USBH_HandleEnum+0x3b6>
      break;
 800859c:	bf00      	nop
 800859e:	e008      	b.n	80085b2 <USBH_HandleEnum+0x3b6>
      break;
 80085a0:	bf00      	nop
 80085a2:	e006      	b.n	80085b2 <USBH_HandleEnum+0x3b6>
      break;
 80085a4:	bf00      	nop
 80085a6:	e004      	b.n	80085b2 <USBH_HandleEnum+0x3b6>
      break;
 80085a8:	bf00      	nop
 80085aa:	e002      	b.n	80085b2 <USBH_HandleEnum+0x3b6>
      break;
 80085ac:	bf00      	nop
 80085ae:	e000      	b.n	80085b2 <USBH_HandleEnum+0x3b6>
      break;
 80085b0:	bf00      	nop
  }
  return Status;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f804 	bl	80085fe <USBH_HandleSof>
}
 80085f6:	bf00      	nop
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b0b      	cmp	r3, #11
 800860e:	d10a      	bne.n	8008626 <USBH_HandleSof+0x28>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
  }
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800863e:	bf00      	nop
}
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800865a:	bf00      	nop
}
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 f8be 	bl	8009836 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	791b      	ldrb	r3, [r3, #4]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 ff0b 	bl	80094dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	795b      	ldrb	r3, [r3, #5]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 ff05 	bl	80094dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80086e8:	887b      	ldrh	r3, [r7, #2]
 80086ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ee:	d901      	bls.n	80086f4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e01b      	b.n	800872c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80086fa:	887b      	ldrh	r3, [r7, #2]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	4613      	mov	r3, r2
 8008700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008704:	2100      	movs	r1, #0
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f872 	bl	80087f0 <USBH_GetDescriptor>
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800871c:	887a      	ldrh	r2, [r7, #2]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f929 	bl	8008978 <USBH_ParseDevDesc>
 8008726:	4603      	mov	r3, r0
 8008728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af02      	add	r7, sp, #8
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	331c      	adds	r3, #28
 8008744:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008746:	887b      	ldrh	r3, [r7, #2]
 8008748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800874c:	d901      	bls.n	8008752 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800874e:	2303      	movs	r3, #3
 8008750:	e016      	b.n	8008780 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008752:	887b      	ldrh	r3, [r7, #2]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800875c:	2100      	movs	r1, #0
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f846 	bl	80087f0 <USBH_GetDescriptor>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d107      	bne.n	800877e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800876e:	887b      	ldrh	r3, [r7, #2]
 8008770:	461a      	mov	r2, r3
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f9af 	bl	8008ad8 <USBH_ParseCfgDesc>
 800877a:	4603      	mov	r3, r0
 800877c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	607a      	str	r2, [r7, #4]
 8008792:	461a      	mov	r2, r3
 8008794:	460b      	mov	r3, r1
 8008796:	72fb      	strb	r3, [r7, #11]
 8008798:	4613      	mov	r3, r2
 800879a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800879c:	893b      	ldrh	r3, [r7, #8]
 800879e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087a2:	d802      	bhi.n	80087aa <USBH_Get_StringDesc+0x22>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e01c      	b.n	80087e8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80087b6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80087be:	893b      	ldrh	r3, [r7, #8]
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	460b      	mov	r3, r1
 80087c4:	2100      	movs	r1, #0
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f812 	bl	80087f0 <USBH_GetDescriptor>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d107      	bne.n	80087e6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80087dc:	893a      	ldrh	r2, [r7, #8]
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fb8d 	bl	8008f00 <USBH_ParseStringDesc>
  }

  return status;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	607b      	str	r3, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	72fb      	strb	r3, [r7, #11]
 80087fe:	4613      	mov	r3, r2
 8008800:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	789b      	ldrb	r3, [r3, #2]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d11c      	bne.n	8008844 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800880a:	7afb      	ldrb	r3, [r7, #11]
 800880c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008810:	b2da      	uxtb	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2206      	movs	r2, #6
 800881a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	893a      	ldrh	r2, [r7, #8]
 8008820:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008822:	893b      	ldrh	r3, [r7, #8]
 8008824:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008828:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800882c:	d104      	bne.n	8008838 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f240 4209 	movw	r2, #1033	@ 0x409
 8008834:	829a      	strh	r2, [r3, #20]
 8008836:	e002      	b.n	800883e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8b3a      	ldrh	r2, [r7, #24]
 8008842:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008844:	8b3b      	ldrh	r3, [r7, #24]
 8008846:	461a      	mov	r2, r3
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 fba5 	bl	8008f9a <USBH_CtlReq>
 8008850:	4603      	mov	r3, r0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	789b      	ldrb	r3, [r3, #2]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d10f      	bne.n	800888e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2205      	movs	r2, #5
 8008878:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	b29a      	uxth	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800888e:	2200      	movs	r2, #0
 8008890:	2100      	movs	r1, #0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fb81 	bl	8008f9a <USBH_CtlReq>
 8008898:	4603      	mov	r3, r0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	789b      	ldrb	r3, [r3, #2]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d10e      	bne.n	80088d4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2209      	movs	r2, #9
 80088c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	887a      	ldrh	r2, [r7, #2]
 80088c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fb5e 	bl	8008f9a <USBH_CtlReq>
 80088de:	4603      	mov	r3, r0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	789b      	ldrb	r3, [r3, #2]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d10f      	bne.n	800891c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2203      	movs	r2, #3
 8008906:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	b29a      	uxth	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800891c:	2200      	movs	r2, #0
 800891e:	2100      	movs	r1, #0
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fb3a 	bl	8008f9a <USBH_CtlReq>
 8008926:	4603      	mov	r3, r0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	789b      	ldrb	r3, [r3, #2]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d10f      	bne.n	8008964 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	b29a      	uxth	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008964:	2200      	movs	r2, #0
 8008966:	2100      	movs	r1, #0
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fb16 	bl	8008f9a <USBH_CtlReq>
 800896e:	4603      	mov	r3, r0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800898c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008998:	2302      	movs	r3, #2
 800899a:	e094      	b.n	8008ac6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	785a      	ldrb	r2, [r3, #1]
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	3302      	adds	r3, #2
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	3303      	adds	r3, #3
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	b29b      	uxth	r3, r3
 80089be:	4313      	orrs	r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	791a      	ldrb	r2, [r3, #4]
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	795a      	ldrb	r2, [r3, #5]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	799a      	ldrb	r2, [r3, #6]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	79da      	ldrb	r2, [r3, #7]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d11b      	bne.n	8008a32 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	79db      	ldrb	r3, [r3, #7]
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	dc0f      	bgt.n	8008a22 <USBH_ParseDevDesc+0xaa>
 8008a02:	2b08      	cmp	r3, #8
 8008a04:	db0f      	blt.n	8008a26 <USBH_ParseDevDesc+0xae>
 8008a06:	3b08      	subs	r3, #8
 8008a08:	4a32      	ldr	r2, [pc, #200]	@ (8008ad4 <USBH_ParseDevDesc+0x15c>)
 8008a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	bf14      	ite	ne
 8008a16:	2301      	movne	r3, #1
 8008a18:	2300      	moveq	r3, #0
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d106      	bne.n	8008a2e <USBH_ParseDevDesc+0xb6>
 8008a20:	e001      	b.n	8008a26 <USBH_ParseDevDesc+0xae>
 8008a22:	2b40      	cmp	r3, #64	@ 0x40
 8008a24:	d003      	beq.n	8008a2e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2208      	movs	r2, #8
 8008a2a:	71da      	strb	r2, [r3, #7]
        break;
 8008a2c:	e000      	b.n	8008a30 <USBH_ParseDevDesc+0xb8>
        break;
 8008a2e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008a30:	e00e      	b.n	8008a50 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d107      	bne.n	8008a4c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	79db      	ldrb	r3, [r3, #7]
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d005      	beq.n	8008a50 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2208      	movs	r2, #8
 8008a48:	71da      	strb	r2, [r3, #7]
 8008a4a:	e001      	b.n	8008a50 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008a50:	88fb      	ldrh	r3, [r7, #6]
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d936      	bls.n	8008ac4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	3308      	adds	r3, #8
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3309      	adds	r3, #9
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	330a      	adds	r3, #10
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	330b      	adds	r3, #11
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	330d      	adds	r3, #13
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	7b9a      	ldrb	r2, [r3, #14]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	7bda      	ldrb	r2, [r3, #15]
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	7c1a      	ldrb	r2, [r3, #16]
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	7c5a      	ldrb	r2, [r3, #17]
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	01000101 	.word	0x01000101

08008ad8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08c      	sub	sp, #48	@ 0x30
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008aec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008b06:	2302      	movs	r3, #2
 8008b08:	e0da      	b.n	8008cc0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b09      	cmp	r3, #9
 8008b14:	d002      	beq.n	8008b1c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b18:	2209      	movs	r2, #9
 8008b1a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	781a      	ldrb	r2, [r3, #0]
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	785a      	ldrb	r2, [r3, #1]
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	3302      	adds	r3, #2
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3303      	adds	r3, #3
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	021b      	lsls	r3, r3, #8
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b46:	bf28      	it	cs
 8008b48:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	791a      	ldrb	r2, [r3, #4]
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	795a      	ldrb	r2, [r3, #5]
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	799a      	ldrb	r2, [r3, #6]
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	79da      	ldrb	r2, [r3, #7]
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	7a1a      	ldrb	r2, [r3, #8]
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	2b09      	cmp	r3, #9
 8008b7e:	f240 809d 	bls.w	8008cbc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b82:	2309      	movs	r3, #9
 8008b84:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b8a:	e081      	b.n	8008c90 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b8c:	f107 0316 	add.w	r3, r7, #22
 8008b90:	4619      	mov	r1, r3
 8008b92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b94:	f000 f9e7 	bl	8008f66 <USBH_GetNextDesc>
 8008b98:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d176      	bne.n	8008c90 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b09      	cmp	r3, #9
 8008ba8:	d002      	beq.n	8008bb0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	2209      	movs	r2, #9
 8008bae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bb4:	221a      	movs	r2, #26
 8008bb6:	fb02 f303 	mul.w	r3, r2, r3
 8008bba:	3308      	adds	r3, #8
 8008bbc:	6a3a      	ldr	r2, [r7, #32]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bc6:	69f8      	ldr	r0, [r7, #28]
 8008bc8:	f000 f87e 	bl	8008cc8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bd6:	e043      	b.n	8008c60 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008bd8:	f107 0316 	add.w	r3, r7, #22
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be0:	f000 f9c1 	bl	8008f66 <USBH_GetNextDesc>
 8008be4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	2b05      	cmp	r3, #5
 8008bec:	d138      	bne.n	8008c60 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	795b      	ldrb	r3, [r3, #5]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d113      	bne.n	8008c1e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d003      	beq.n	8008c06 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	799b      	ldrb	r3, [r3, #6]
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d10b      	bne.n	8008c1e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	79db      	ldrb	r3, [r3, #7]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10b      	bne.n	8008c26 <USBH_ParseCfgDesc+0x14e>
 8008c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b09      	cmp	r3, #9
 8008c14:	d007      	beq.n	8008c26 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	2209      	movs	r2, #9
 8008c1a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c1c:	e003      	b.n	8008c26 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c20:	2207      	movs	r2, #7
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e000      	b.n	8008c28 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c26:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c2c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c30:	3201      	adds	r2, #1
 8008c32:	00d2      	lsls	r2, r2, #3
 8008c34:	211a      	movs	r1, #26
 8008c36:	fb01 f303 	mul.w	r3, r1, r3
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	6a3a      	ldr	r2, [r7, #32]
 8008c40:	4413      	add	r3, r2
 8008c42:	3304      	adds	r3, #4
 8008c44:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c48:	69b9      	ldr	r1, [r7, #24]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 f870 	bl	8008d30 <USBH_ParseEPDesc>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008c56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	791b      	ldrb	r3, [r3, #4]
 8008c64:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d204      	bcs.n	8008c76 <USBH_ParseCfgDesc+0x19e>
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	885a      	ldrh	r2, [r3, #2]
 8008c70:	8afb      	ldrh	r3, [r7, #22]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d8b0      	bhi.n	8008bd8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	791b      	ldrb	r3, [r3, #4]
 8008c7a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d201      	bcs.n	8008c86 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e01c      	b.n	8008cc0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d805      	bhi.n	8008ca4 <USBH_ParseCfgDesc+0x1cc>
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	885a      	ldrh	r2, [r3, #2]
 8008c9c:	8afb      	ldrh	r3, [r7, #22]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	f63f af74 	bhi.w	8008b8c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	791b      	ldrb	r3, [r3, #4]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	bf28      	it	cs
 8008cac:	2302      	movcs	r3, #2
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d201      	bcs.n	8008cbc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e001      	b.n	8008cc0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3730      	adds	r7, #48	@ 0x30
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781a      	ldrb	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	785a      	ldrb	r2, [r3, #1]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	789a      	ldrb	r2, [r3, #2]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	78da      	ldrb	r2, [r3, #3]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	bf28      	it	cs
 8008cfc:	2302      	movcs	r3, #2
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	795a      	ldrb	r2, [r3, #5]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	799a      	ldrb	r2, [r3, #6]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	79da      	ldrb	r2, [r3, #7]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	7a1a      	ldrb	r2, [r3, #8]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	721a      	strb	r2, [r3, #8]
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	781a      	ldrb	r2, [r3, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	785a      	ldrb	r2, [r3, #1]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	789a      	ldrb	r2, [r3, #2]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	78da      	ldrb	r2, [r3, #3]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3304      	adds	r3, #4
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3305      	adds	r3, #5
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	4313      	orrs	r3, r2
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	799a      	ldrb	r2, [r3, #6]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d009      	beq.n	8008d9e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d92:	d804      	bhi.n	8008d9e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d9c:	d901      	bls.n	8008da2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d136      	bne.n	8008e1a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	78db      	ldrb	r3, [r3, #3]
 8008db0:	f003 0303 	and.w	r3, r3, #3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d108      	bne.n	8008dca <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	889b      	ldrh	r3, [r3, #4]
 8008dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dc0:	f240 8097 	bls.w	8008ef2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	75fb      	strb	r3, [r7, #23]
 8008dc8:	e093      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	78db      	ldrb	r3, [r3, #3]
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d107      	bne.n	8008de6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	889b      	ldrh	r3, [r3, #4]
 8008dda:	2b40      	cmp	r3, #64	@ 0x40
 8008ddc:	f240 8089 	bls.w	8008ef2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008de0:	2303      	movs	r3, #3
 8008de2:	75fb      	strb	r3, [r7, #23]
 8008de4:	e085      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	78db      	ldrb	r3, [r3, #3]
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d005      	beq.n	8008dfe <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	78db      	ldrb	r3, [r3, #3]
 8008df6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d10a      	bne.n	8008e14 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	799b      	ldrb	r3, [r3, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <USBH_ParseEPDesc+0xde>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	799b      	ldrb	r3, [r3, #6]
 8008e0a:	2b10      	cmp	r3, #16
 8008e0c:	d970      	bls.n	8008ef0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e12:	e06d      	b.n	8008ef0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008e14:	2303      	movs	r3, #3
 8008e16:	75fb      	strb	r3, [r7, #23]
 8008e18:	e06b      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d13c      	bne.n	8008e9e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	78db      	ldrb	r3, [r3, #3]
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d005      	beq.n	8008e3c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	78db      	ldrb	r3, [r3, #3]
 8008e34:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d106      	bne.n	8008e4a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	889b      	ldrh	r3, [r3, #4]
 8008e40:	2b40      	cmp	r3, #64	@ 0x40
 8008e42:	d956      	bls.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e44:	2303      	movs	r3, #3
 8008e46:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008e48:	e053      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	78db      	ldrb	r3, [r3, #3]
 8008e4e:	f003 0303 	and.w	r3, r3, #3
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d10e      	bne.n	8008e74 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	799b      	ldrb	r3, [r3, #6]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d007      	beq.n	8008e6e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d803      	bhi.n	8008e6e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008e6a:	2b40      	cmp	r3, #64	@ 0x40
 8008e6c:	d941      	bls.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	75fb      	strb	r3, [r7, #23]
 8008e72:	e03e      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	78db      	ldrb	r3, [r3, #3]
 8008e78:	f003 0303 	and.w	r3, r3, #3
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d10b      	bne.n	8008e98 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	799b      	ldrb	r3, [r3, #6]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d004      	beq.n	8008e92 <USBH_ParseEPDesc+0x162>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	889b      	ldrh	r3, [r3, #4]
 8008e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e90:	d32f      	bcc.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e92:	2303      	movs	r3, #3
 8008e94:	75fb      	strb	r3, [r7, #23]
 8008e96:	e02c      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	75fb      	strb	r3, [r7, #23]
 8008e9c:	e029      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d120      	bne.n	8008eea <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	78db      	ldrb	r3, [r3, #3]
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	889b      	ldrh	r3, [r3, #4]
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d01a      	beq.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	75fb      	strb	r3, [r7, #23]
 8008ec0:	e017      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	78db      	ldrb	r3, [r3, #3]
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d10a      	bne.n	8008ee4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	799b      	ldrb	r3, [r3, #6]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <USBH_ParseEPDesc+0x1ae>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	889b      	ldrh	r3, [r3, #4]
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d909      	bls.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	75fb      	strb	r3, [r7, #23]
 8008ee2:	e006      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	75fb      	strb	r3, [r7, #23]
 8008ee8:	e003      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008eea:	2303      	movs	r3, #3
 8008eec:	75fb      	strb	r3, [r7, #23]
 8008eee:	e000      	b.n	8008ef2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ef0:	bf00      	nop
  }

  return status;
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	371c      	adds	r7, #28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3301      	adds	r3, #1
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d120      	bne.n	8008f5a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	1e9a      	subs	r2, r3, #2
 8008f1e:	88fb      	ldrh	r3, [r7, #6]
 8008f20:	4293      	cmp	r3, r2
 8008f22:	bf28      	it	cs
 8008f24:	4613      	movcs	r3, r2
 8008f26:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3302      	adds	r3, #2
 8008f2c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008f2e:	2300      	movs	r3, #0
 8008f30:	82fb      	strh	r3, [r7, #22]
 8008f32:	e00b      	b.n	8008f4c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008f34:	8afb      	ldrh	r3, [r7, #22]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	781a      	ldrb	r2, [r3, #0]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f46:	8afb      	ldrh	r3, [r7, #22]
 8008f48:	3302      	adds	r3, #2
 8008f4a:	82fb      	strh	r3, [r7, #22]
 8008f4c:	8afa      	ldrh	r2, [r7, #22]
 8008f4e:	8abb      	ldrh	r3, [r7, #20]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d3ef      	bcc.n	8008f34 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2200      	movs	r2, #0
 8008f58:	701a      	strb	r2, [r3, #0]
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	4413      	add	r3, r2
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4413      	add	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b086      	sub	sp, #24
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	789b      	ldrb	r3, [r3, #2]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d002      	beq.n	8008fba <USBH_CtlReq+0x20>
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d00f      	beq.n	8008fd8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008fb8:	e027      	b.n	800900a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	88fa      	ldrh	r2, [r7, #6]
 8008fc4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd6:	e018      	b.n	800900a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f81b 	bl	8009014 <USBH_HandleControl>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <USBH_CtlReq+0x54>
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d106      	bne.n	8008ffc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	761a      	strb	r2, [r3, #24]
      break;
 8008ffa:	e005      	b.n	8009008 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d102      	bne.n	8009008 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	709a      	strb	r2, [r3, #2]
      break;
 8009008:	bf00      	nop
  }
  return status;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af02      	add	r7, sp, #8
 800901a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009020:	2300      	movs	r3, #0
 8009022:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7e1b      	ldrb	r3, [r3, #24]
 8009028:	3b01      	subs	r3, #1
 800902a:	2b0a      	cmp	r3, #10
 800902c:	f200 8156 	bhi.w	80092dc <USBH_HandleControl+0x2c8>
 8009030:	a201      	add	r2, pc, #4	@ (adr r2, 8009038 <USBH_HandleControl+0x24>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009065 	.word	0x08009065
 800903c:	0800907f 	.word	0x0800907f
 8009040:	080090e9 	.word	0x080090e9
 8009044:	0800910f 	.word	0x0800910f
 8009048:	08009147 	.word	0x08009147
 800904c:	08009171 	.word	0x08009171
 8009050:	080091c3 	.word	0x080091c3
 8009054:	080091e5 	.word	0x080091e5
 8009058:	08009221 	.word	0x08009221
 800905c:	08009247 	.word	0x08009247
 8009060:	08009285 	.word	0x08009285
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f103 0110 	add.w	r1, r3, #16
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	795b      	ldrb	r3, [r3, #5]
 800906e:	461a      	mov	r2, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f943 	bl	80092fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2202      	movs	r2, #2
 800907a:	761a      	strb	r2, [r3, #24]
      break;
 800907c:	e139      	b.n	80092f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	795b      	ldrb	r3, [r3, #5]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fcc5 	bl	8009a14 <USBH_LL_GetURBState>
 800908a:	4603      	mov	r3, r0
 800908c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d11e      	bne.n	80090d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7c1b      	ldrb	r3, [r3, #16]
 8009098:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800909c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	8adb      	ldrh	r3, [r3, #22]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00a      	beq.n	80090bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80090a6:	7b7b      	ldrb	r3, [r7, #13]
 80090a8:	2b80      	cmp	r3, #128	@ 0x80
 80090aa:	d103      	bne.n	80090b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2203      	movs	r2, #3
 80090b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090b2:	e115      	b.n	80092e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2205      	movs	r2, #5
 80090b8:	761a      	strb	r2, [r3, #24]
      break;
 80090ba:	e111      	b.n	80092e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80090bc:	7b7b      	ldrb	r3, [r7, #13]
 80090be:	2b80      	cmp	r3, #128	@ 0x80
 80090c0:	d103      	bne.n	80090ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2209      	movs	r2, #9
 80090c6:	761a      	strb	r2, [r3, #24]
      break;
 80090c8:	e10a      	b.n	80092e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2207      	movs	r2, #7
 80090ce:	761a      	strb	r2, [r3, #24]
      break;
 80090d0:	e106      	b.n	80092e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	d003      	beq.n	80090e0 <USBH_HandleControl+0xcc>
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	f040 8100 	bne.w	80092e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	220b      	movs	r2, #11
 80090e4:	761a      	strb	r2, [r3, #24]
      break;
 80090e6:	e0fb      	b.n	80092e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6899      	ldr	r1, [r3, #8]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	899a      	ldrh	r2, [r3, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	791b      	ldrb	r3, [r3, #4]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f93a 	bl	800937a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2204      	movs	r2, #4
 800910a:	761a      	strb	r2, [r3, #24]
      break;
 800910c:	e0f1      	b.n	80092f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	791b      	ldrb	r3, [r3, #4]
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fc7d 	bl	8009a14 <USBH_LL_GetURBState>
 800911a:	4603      	mov	r3, r0
 800911c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d102      	bne.n	800912a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2209      	movs	r2, #9
 8009128:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	2b05      	cmp	r3, #5
 800912e:	d102      	bne.n	8009136 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009130:	2303      	movs	r3, #3
 8009132:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009134:	e0d6      	b.n	80092e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009136:	7bbb      	ldrb	r3, [r7, #14]
 8009138:	2b04      	cmp	r3, #4
 800913a:	f040 80d3 	bne.w	80092e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	220b      	movs	r2, #11
 8009142:	761a      	strb	r2, [r3, #24]
      break;
 8009144:	e0ce      	b.n	80092e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6899      	ldr	r1, [r3, #8]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	899a      	ldrh	r2, [r3, #12]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	795b      	ldrb	r3, [r3, #5]
 8009152:	2001      	movs	r0, #1
 8009154:	9000      	str	r0, [sp, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f8ea 	bl	8009330 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009162:	b29a      	uxth	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2206      	movs	r2, #6
 800916c:	761a      	strb	r2, [r3, #24]
      break;
 800916e:	e0c0      	b.n	80092f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	795b      	ldrb	r3, [r3, #5]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fc4c 	bl	8009a14 <USBH_LL_GetURBState>
 800917c:	4603      	mov	r3, r0
 800917e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d103      	bne.n	800918e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2207      	movs	r2, #7
 800918a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800918c:	e0ac      	b.n	80092e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	2b05      	cmp	r3, #5
 8009192:	d105      	bne.n	80091a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	220c      	movs	r2, #12
 8009198:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800919a:	2303      	movs	r3, #3
 800919c:	73fb      	strb	r3, [r7, #15]
      break;
 800919e:	e0a3      	b.n	80092e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d103      	bne.n	80091ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2205      	movs	r2, #5
 80091aa:	761a      	strb	r2, [r3, #24]
      break;
 80091ac:	e09c      	b.n	80092e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	f040 8099 	bne.w	80092e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	220b      	movs	r2, #11
 80091ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80091bc:	2302      	movs	r3, #2
 80091be:	73fb      	strb	r3, [r7, #15]
      break;
 80091c0:	e092      	b.n	80092e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	791b      	ldrb	r3, [r3, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	2100      	movs	r1, #0
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f8d5 	bl	800937a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2208      	movs	r2, #8
 80091e0:	761a      	strb	r2, [r3, #24]

      break;
 80091e2:	e086      	b.n	80092f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	791b      	ldrb	r3, [r3, #4]
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fc12 	bl	8009a14 <USBH_LL_GetURBState>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d105      	bne.n	8009206 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	220d      	movs	r2, #13
 80091fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009204:	e072      	b.n	80092ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	2b04      	cmp	r3, #4
 800920a:	d103      	bne.n	8009214 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	220b      	movs	r2, #11
 8009210:	761a      	strb	r2, [r3, #24]
      break;
 8009212:	e06b      	b.n	80092ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b05      	cmp	r3, #5
 8009218:	d168      	bne.n	80092ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800921a:	2303      	movs	r3, #3
 800921c:	73fb      	strb	r3, [r7, #15]
      break;
 800921e:	e065      	b.n	80092ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	795b      	ldrb	r3, [r3, #5]
 8009224:	2201      	movs	r2, #1
 8009226:	9200      	str	r2, [sp, #0]
 8009228:	2200      	movs	r2, #0
 800922a:	2100      	movs	r1, #0
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f87f 	bl	8009330 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009238:	b29a      	uxth	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	220a      	movs	r2, #10
 8009242:	761a      	strb	r2, [r3, #24]
      break;
 8009244:	e055      	b.n	80092f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	795b      	ldrb	r3, [r3, #5]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fbe1 	bl	8009a14 <USBH_LL_GetURBState>
 8009252:	4603      	mov	r3, r0
 8009254:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d105      	bne.n	8009268 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	220d      	movs	r2, #13
 8009264:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009266:	e043      	b.n	80092f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	2b02      	cmp	r3, #2
 800926c:	d103      	bne.n	8009276 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2209      	movs	r2, #9
 8009272:	761a      	strb	r2, [r3, #24]
      break;
 8009274:	e03c      	b.n	80092f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	2b04      	cmp	r3, #4
 800927a:	d139      	bne.n	80092f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	220b      	movs	r2, #11
 8009280:	761a      	strb	r2, [r3, #24]
      break;
 8009282:	e035      	b.n	80092f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7e5b      	ldrb	r3, [r3, #25]
 8009288:	3301      	adds	r3, #1
 800928a:	b2da      	uxtb	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	765a      	strb	r2, [r3, #25]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	7e5b      	ldrb	r3, [r3, #25]
 8009294:	2b02      	cmp	r3, #2
 8009296:	d806      	bhi.n	80092a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092a4:	e025      	b.n	80092f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092ac:	2106      	movs	r1, #6
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	795b      	ldrb	r3, [r3, #5]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f90c 	bl	80094dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	791b      	ldrb	r3, [r3, #4]
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f906 	bl	80094dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80092d6:	2302      	movs	r3, #2
 80092d8:	73fb      	strb	r3, [r7, #15]
      break;
 80092da:	e00a      	b.n	80092f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80092dc:	bf00      	nop
 80092de:	e008      	b.n	80092f2 <USBH_HandleControl+0x2de>
      break;
 80092e0:	bf00      	nop
 80092e2:	e006      	b.n	80092f2 <USBH_HandleControl+0x2de>
      break;
 80092e4:	bf00      	nop
 80092e6:	e004      	b.n	80092f2 <USBH_HandleControl+0x2de>
      break;
 80092e8:	bf00      	nop
 80092ea:	e002      	b.n	80092f2 <USBH_HandleControl+0x2de>
      break;
 80092ec:	bf00      	nop
 80092ee:	e000      	b.n	80092f2 <USBH_HandleControl+0x2de>
      break;
 80092f0:	bf00      	nop
  }

  return status;
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af04      	add	r7, sp, #16
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800930a:	79f9      	ldrb	r1, [r7, #7]
 800930c:	2300      	movs	r3, #0
 800930e:	9303      	str	r3, [sp, #12]
 8009310:	2308      	movs	r3, #8
 8009312:	9302      	str	r3, [sp, #8]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	2300      	movs	r3, #0
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	2300      	movs	r3, #0
 800931e:	2200      	movs	r2, #0
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 fb46 	bl	80099b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af04      	add	r7, sp, #16
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	4611      	mov	r1, r2
 800933c:	461a      	mov	r2, r3
 800933e:	460b      	mov	r3, r1
 8009340:	80fb      	strh	r3, [r7, #6]
 8009342:	4613      	mov	r3, r2
 8009344:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009354:	7979      	ldrb	r1, [r7, #5]
 8009356:	7e3b      	ldrb	r3, [r7, #24]
 8009358:	9303      	str	r3, [sp, #12]
 800935a:	88fb      	ldrh	r3, [r7, #6]
 800935c:	9302      	str	r3, [sp, #8]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	2301      	movs	r3, #1
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	2300      	movs	r3, #0
 8009368:	2200      	movs	r2, #0
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 fb21 	bl	80099b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b088      	sub	sp, #32
 800937e:	af04      	add	r7, sp, #16
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	4611      	mov	r1, r2
 8009386:	461a      	mov	r2, r3
 8009388:	460b      	mov	r3, r1
 800938a:	80fb      	strh	r3, [r7, #6]
 800938c:	4613      	mov	r3, r2
 800938e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009390:	7979      	ldrb	r1, [r7, #5]
 8009392:	2300      	movs	r3, #0
 8009394:	9303      	str	r3, [sp, #12]
 8009396:	88fb      	ldrh	r3, [r7, #6]
 8009398:	9302      	str	r3, [sp, #8]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	2301      	movs	r3, #1
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	2300      	movs	r3, #0
 80093a4:	2201      	movs	r2, #1
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fb03 	bl	80099b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093ac:	2300      	movs	r3, #0

}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b088      	sub	sp, #32
 80093ba:	af04      	add	r7, sp, #16
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	4611      	mov	r1, r2
 80093c2:	461a      	mov	r2, r3
 80093c4:	460b      	mov	r3, r1
 80093c6:	80fb      	strh	r3, [r7, #6]
 80093c8:	4613      	mov	r3, r2
 80093ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093da:	7979      	ldrb	r1, [r7, #5]
 80093dc:	7e3b      	ldrb	r3, [r7, #24]
 80093de:	9303      	str	r3, [sp, #12]
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	2301      	movs	r3, #1
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2302      	movs	r3, #2
 80093ee:	2200      	movs	r2, #0
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fade 	bl	80099b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af04      	add	r7, sp, #16
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	4611      	mov	r1, r2
 800940c:	461a      	mov	r2, r3
 800940e:	460b      	mov	r3, r1
 8009410:	80fb      	strh	r3, [r7, #6]
 8009412:	4613      	mov	r3, r2
 8009414:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009416:	7979      	ldrb	r1, [r7, #5]
 8009418:	2300      	movs	r3, #0
 800941a:	9303      	str	r3, [sp, #12]
 800941c:	88fb      	ldrh	r3, [r7, #6]
 800941e:	9302      	str	r3, [sp, #8]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	2301      	movs	r3, #1
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	2302      	movs	r3, #2
 800942a:	2201      	movs	r2, #1
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fac0 	bl	80099b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af04      	add	r7, sp, #16
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	4608      	mov	r0, r1
 8009446:	4611      	mov	r1, r2
 8009448:	461a      	mov	r2, r3
 800944a:	4603      	mov	r3, r0
 800944c:	70fb      	strb	r3, [r7, #3]
 800944e:	460b      	mov	r3, r1
 8009450:	70bb      	strb	r3, [r7, #2]
 8009452:	4613      	mov	r3, r2
 8009454:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009456:	7878      	ldrb	r0, [r7, #1]
 8009458:	78ba      	ldrb	r2, [r7, #2]
 800945a:	78f9      	ldrb	r1, [r7, #3]
 800945c:	8b3b      	ldrh	r3, [r7, #24]
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	7d3b      	ldrb	r3, [r7, #20]
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	7c3b      	ldrb	r3, [r7, #16]
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	4603      	mov	r3, r0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa53 	bl	8009916 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa72 	bl	8009974 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f836 	bl	8009518 <USBH_GetFreePipe>
 80094ac:	4603      	mov	r3, r0
 80094ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80094b0:	89fb      	ldrh	r3, [r7, #14]
 80094b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00a      	beq.n	80094d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	89fb      	ldrh	r3, [r7, #14]
 80094be:	f003 030f 	and.w	r3, r3, #15
 80094c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	33e0      	adds	r3, #224	@ 0xe0
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	440b      	add	r3, r1
 80094ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80094d0:	89fb      	ldrh	r3, [r7, #14]
 80094d2:	b2db      	uxtb	r3, r3
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	2b0f      	cmp	r3, #15
 80094ec:	d80d      	bhi.n	800950a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	33e0      	adds	r3, #224	@ 0xe0
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	33e0      	adds	r3, #224	@ 0xe0
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	440b      	add	r3, r1
 8009508:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009524:	2300      	movs	r3, #0
 8009526:	73fb      	strb	r3, [r7, #15]
 8009528:	e00f      	b.n	800954a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	33e0      	adds	r3, #224	@ 0xe0
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d102      	bne.n	8009544 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	b29b      	uxth	r3, r3
 8009542:	e007      	b.n	8009554 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	3301      	adds	r3, #1
 8009548:	73fb      	strb	r3, [r7, #15]
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	2b0f      	cmp	r3, #15
 800954e:	d9ec      	bls.n	800952a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009564:	2201      	movs	r2, #1
 8009566:	490e      	ldr	r1, [pc, #56]	@ (80095a0 <MX_USB_HOST_Init+0x40>)
 8009568:	480e      	ldr	r0, [pc, #56]	@ (80095a4 <MX_USB_HOST_Init+0x44>)
 800956a:	f7fe fb15 	bl	8007b98 <USBH_Init>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009574:	f7f7 fc24 	bl	8000dc0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009578:	490b      	ldr	r1, [pc, #44]	@ (80095a8 <MX_USB_HOST_Init+0x48>)
 800957a:	480a      	ldr	r0, [pc, #40]	@ (80095a4 <MX_USB_HOST_Init+0x44>)
 800957c:	f7fe fbb9 	bl	8007cf2 <USBH_RegisterClass>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009586:	f7f7 fc1b 	bl	8000dc0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800958a:	4806      	ldr	r0, [pc, #24]	@ (80095a4 <MX_USB_HOST_Init+0x44>)
 800958c:	f7fe fc3d 	bl	8007e0a <USBH_Start>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009596:	f7f7 fc13 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800959a:	bf00      	nop
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	080095c1 	.word	0x080095c1
 80095a4:	20000220 	.word	0x20000220
 80095a8:	2000000c 	.word	0x2000000c

080095ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80095b0:	4802      	ldr	r0, [pc, #8]	@ (80095bc <MX_USB_HOST_Process+0x10>)
 80095b2:	f7fe fc3b 	bl	8007e2c <USBH_Process>
}
 80095b6:	bf00      	nop
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20000220 	.word	0x20000220

080095c0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d819      	bhi.n	8009608 <USBH_UserProcess+0x48>
 80095d4:	a201      	add	r2, pc, #4	@ (adr r2, 80095dc <USBH_UserProcess+0x1c>)
 80095d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095da:	bf00      	nop
 80095dc:	08009609 	.word	0x08009609
 80095e0:	080095f9 	.word	0x080095f9
 80095e4:	08009609 	.word	0x08009609
 80095e8:	08009601 	.word	0x08009601
 80095ec:	080095f1 	.word	0x080095f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80095f0:	4b09      	ldr	r3, [pc, #36]	@ (8009618 <USBH_UserProcess+0x58>)
 80095f2:	2203      	movs	r2, #3
 80095f4:	701a      	strb	r2, [r3, #0]
  break;
 80095f6:	e008      	b.n	800960a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80095f8:	4b07      	ldr	r3, [pc, #28]	@ (8009618 <USBH_UserProcess+0x58>)
 80095fa:	2202      	movs	r2, #2
 80095fc:	701a      	strb	r2, [r3, #0]
  break;
 80095fe:	e004      	b.n	800960a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009600:	4b05      	ldr	r3, [pc, #20]	@ (8009618 <USBH_UserProcess+0x58>)
 8009602:	2201      	movs	r2, #1
 8009604:	701a      	strb	r2, [r3, #0]
  break;
 8009606:	e000      	b.n	800960a <USBH_UserProcess+0x4a>

  default:
  break;
 8009608:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800960a:	bf00      	nop
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	200005f8 	.word	0x200005f8

0800961c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b08a      	sub	sp, #40	@ 0x28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009624:	f107 0314 	add.w	r3, r7, #20
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	605a      	str	r2, [r3, #4]
 800962e:	609a      	str	r2, [r3, #8]
 8009630:	60da      	str	r2, [r3, #12]
 8009632:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800963c:	d147      	bne.n	80096ce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800963e:	2300      	movs	r3, #0
 8009640:	613b      	str	r3, [r7, #16]
 8009642:	4b25      	ldr	r3, [pc, #148]	@ (80096d8 <HAL_HCD_MspInit+0xbc>)
 8009644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009646:	4a24      	ldr	r2, [pc, #144]	@ (80096d8 <HAL_HCD_MspInit+0xbc>)
 8009648:	f043 0301 	orr.w	r3, r3, #1
 800964c:	6313      	str	r3, [r2, #48]	@ 0x30
 800964e:	4b22      	ldr	r3, [pc, #136]	@ (80096d8 <HAL_HCD_MspInit+0xbc>)
 8009650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	613b      	str	r3, [r7, #16]
 8009658:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800965a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800965e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009660:	2300      	movs	r3, #0
 8009662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009668:	f107 0314 	add.w	r3, r7, #20
 800966c:	4619      	mov	r1, r3
 800966e:	481b      	ldr	r0, [pc, #108]	@ (80096dc <HAL_HCD_MspInit+0xc0>)
 8009670:	f7f8 f978 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009674:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800967a:	2302      	movs	r3, #2
 800967c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009682:	2300      	movs	r3, #0
 8009684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009686:	230a      	movs	r3, #10
 8009688:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800968a:	f107 0314 	add.w	r3, r7, #20
 800968e:	4619      	mov	r1, r3
 8009690:	4812      	ldr	r0, [pc, #72]	@ (80096dc <HAL_HCD_MspInit+0xc0>)
 8009692:	f7f8 f967 	bl	8001964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009696:	4b10      	ldr	r3, [pc, #64]	@ (80096d8 <HAL_HCD_MspInit+0xbc>)
 8009698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800969a:	4a0f      	ldr	r2, [pc, #60]	@ (80096d8 <HAL_HCD_MspInit+0xbc>)
 800969c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <HAL_HCD_MspInit+0xbc>)
 80096a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096aa:	4a0b      	ldr	r2, [pc, #44]	@ (80096d8 <HAL_HCD_MspInit+0xbc>)
 80096ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80096b2:	4b09      	ldr	r3, [pc, #36]	@ (80096d8 <HAL_HCD_MspInit+0xbc>)
 80096b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80096be:	2200      	movs	r2, #0
 80096c0:	2100      	movs	r1, #0
 80096c2:	2043      	movs	r0, #67	@ 0x43
 80096c4:	f7f7 ff19 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096c8:	2043      	movs	r0, #67	@ 0x43
 80096ca:	f7f7 ff32 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096ce:	bf00      	nop
 80096d0:	3728      	adds	r7, #40	@ 0x28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	40023800 	.word	0x40023800
 80096dc:	40020000 	.word	0x40020000

080096e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe ff73 	bl	80085da <USBH_LL_IncTimer>
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe ffab 	bl	8008666 <USBH_LL_Connect>
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe ffb4 	bl	8008694 <USBH_LL_Disconnect>
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
 8009740:	4613      	mov	r3, r2
 8009742:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe ff65 	bl	800862e <USBH_LL_PortEnabled>
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe ff65 	bl	800864a <USBH_LL_PortDisabled>
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009796:	2b01      	cmp	r3, #1
 8009798:	d12a      	bne.n	80097f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800979a:	4a18      	ldr	r2, [pc, #96]	@ (80097fc <USBH_LL_Init+0x74>)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a15      	ldr	r2, [pc, #84]	@ (80097fc <USBH_LL_Init+0x74>)
 80097a6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097aa:	4b14      	ldr	r3, [pc, #80]	@ (80097fc <USBH_LL_Init+0x74>)
 80097ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80097b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80097b2:	4b12      	ldr	r3, [pc, #72]	@ (80097fc <USBH_LL_Init+0x74>)
 80097b4:	2208      	movs	r2, #8
 80097b6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80097b8:	4b10      	ldr	r3, [pc, #64]	@ (80097fc <USBH_LL_Init+0x74>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097be:	4b0f      	ldr	r3, [pc, #60]	@ (80097fc <USBH_LL_Init+0x74>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80097c4:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <USBH_LL_Init+0x74>)
 80097c6:	2202      	movs	r2, #2
 80097c8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097ca:	4b0c      	ldr	r3, [pc, #48]	@ (80097fc <USBH_LL_Init+0x74>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80097d0:	480a      	ldr	r0, [pc, #40]	@ (80097fc <USBH_LL_Init+0x74>)
 80097d2:	f7f8 fac7 	bl	8001d64 <HAL_HCD_Init>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80097dc:	f7f7 faf0 	bl	8000dc0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80097e0:	4806      	ldr	r0, [pc, #24]	@ (80097fc <USBH_LL_Init+0x74>)
 80097e2:	f7f8 ff27 	bl	8002634 <HAL_HCD_GetCurrentFrame>
 80097e6:	4603      	mov	r3, r0
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7fe fee6 	bl	80085bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200005fc 	.word	0x200005fc

08009800 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009816:	4618      	mov	r0, r3
 8009818:	f7f8 fe94 	bl	8002544 <HAL_HCD_Start>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f95e 	bl	8009ae4 <USBH_Get_USB_Status>
 8009828:	4603      	mov	r3, r0
 800982a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982c:	7bbb      	ldrb	r3, [r7, #14]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800984c:	4618      	mov	r0, r3
 800984e:	f7f8 fe9c 	bl	800258a <HAL_HCD_Stop>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	4618      	mov	r0, r3
 800985a:	f000 f943 	bl	8009ae4 <USBH_Get_USB_Status>
 800985e:	4603      	mov	r3, r0
 8009860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009862:	7bbb      	ldrb	r3, [r7, #14]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009874:	2301      	movs	r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800987e:	4618      	mov	r0, r3
 8009880:	f7f8 fee6 	bl	8002650 <HAL_HCD_GetCurrentSpeed>
 8009884:	4603      	mov	r3, r0
 8009886:	2b02      	cmp	r3, #2
 8009888:	d00c      	beq.n	80098a4 <USBH_LL_GetSpeed+0x38>
 800988a:	2b02      	cmp	r3, #2
 800988c:	d80d      	bhi.n	80098aa <USBH_LL_GetSpeed+0x3e>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <USBH_LL_GetSpeed+0x2c>
 8009892:	2b01      	cmp	r3, #1
 8009894:	d003      	beq.n	800989e <USBH_LL_GetSpeed+0x32>
 8009896:	e008      	b.n	80098aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
    break;
 800989c:	e008      	b.n	80098b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800989e:	2301      	movs	r3, #1
 80098a0:	73fb      	strb	r3, [r7, #15]
    break;
 80098a2:	e005      	b.n	80098b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80098a4:	2302      	movs	r3, #2
 80098a6:	73fb      	strb	r3, [r7, #15]
    break;
 80098a8:	e002      	b.n	80098b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80098aa:	2301      	movs	r3, #1
 80098ac:	73fb      	strb	r3, [r7, #15]
    break;
 80098ae:	bf00      	nop
  }
  return  speed;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f8 fe77 	bl	80025c4 <HAL_HCD_ResetPort>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f901 	bl	8009ae4 <USBH_Get_USB_Status>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f7f8 fe7f 	bl	800260a <HAL_HCD_HC_GetXferCount>
 800990c:	4603      	mov	r3, r0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009916:	b590      	push	{r4, r7, lr}
 8009918:	b089      	sub	sp, #36	@ 0x24
 800991a:	af04      	add	r7, sp, #16
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	4608      	mov	r0, r1
 8009920:	4611      	mov	r1, r2
 8009922:	461a      	mov	r2, r3
 8009924:	4603      	mov	r3, r0
 8009926:	70fb      	strb	r3, [r7, #3]
 8009928:	460b      	mov	r3, r1
 800992a:	70bb      	strb	r3, [r7, #2]
 800992c:	4613      	mov	r3, r2
 800992e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800993e:	787c      	ldrb	r4, [r7, #1]
 8009940:	78ba      	ldrb	r2, [r7, #2]
 8009942:	78f9      	ldrb	r1, [r7, #3]
 8009944:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009946:	9302      	str	r3, [sp, #8]
 8009948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	4623      	mov	r3, r4
 8009956:	f7f8 fa6c 	bl	8001e32 <HAL_HCD_HC_Init>
 800995a:	4603      	mov	r3, r0
 800995c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 f8bf 	bl	8009ae4 <USBH_Get_USB_Status>
 8009966:	4603      	mov	r3, r0
 8009968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800996a:	7bbb      	ldrb	r3, [r7, #14]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	bd90      	pop	{r4, r7, pc}

08009974 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f7f8 fb05 	bl	8001fa2 <HAL_HCD_HC_Halt>
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f8a0 	bl	8009ae4 <USBH_Get_USB_Status>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80099b2:	b590      	push	{r4, r7, lr}
 80099b4:	b089      	sub	sp, #36	@ 0x24
 80099b6:	af04      	add	r7, sp, #16
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	4608      	mov	r0, r1
 80099bc:	4611      	mov	r1, r2
 80099be:	461a      	mov	r2, r3
 80099c0:	4603      	mov	r3, r0
 80099c2:	70fb      	strb	r3, [r7, #3]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70bb      	strb	r3, [r7, #2]
 80099c8:	4613      	mov	r3, r2
 80099ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80099da:	787c      	ldrb	r4, [r7, #1]
 80099dc:	78ba      	ldrb	r2, [r7, #2]
 80099de:	78f9      	ldrb	r1, [r7, #3]
 80099e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80099e8:	9302      	str	r3, [sp, #8]
 80099ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	4623      	mov	r3, r4
 80099f6:	f7f8 faf7 	bl	8001fe8 <HAL_HCD_HC_SubmitRequest>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f86f 	bl	8009ae4 <USBH_Get_USB_Status>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd90      	pop	{r4, r7, pc}

08009a14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a26:	78fa      	ldrb	r2, [r7, #3]
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7f8 fdd8 	bl	80025e0 <HAL_HCD_HC_GetURBState>
 8009a30:	4603      	mov	r3, r0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d103      	bne.n	8009a58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 f872 	bl	8009b3c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a58:	20c8      	movs	r0, #200	@ 0xc8
 8009a5a:	f7f7 fc4f 	bl	80012fc <HAL_Delay>
  return USBH_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
 8009a74:	4613      	mov	r3, r2
 8009a76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009a80:	78fa      	ldrb	r2, [r7, #3]
 8009a82:	68f9      	ldr	r1, [r7, #12]
 8009a84:	4613      	mov	r3, r2
 8009a86:	011b      	lsls	r3, r3, #4
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	3317      	adds	r3, #23
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	68f9      	ldr	r1, [r7, #12]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	011b      	lsls	r3, r3, #4
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	333c      	adds	r3, #60	@ 0x3c
 8009aa6:	78ba      	ldrb	r2, [r7, #2]
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	e009      	b.n	8009ac0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	68f9      	ldr	r1, [r7, #12]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	011b      	lsls	r3, r3, #4
 8009ab4:	1a9b      	subs	r3, r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	333d      	adds	r3, #61	@ 0x3d
 8009abc:	78ba      	ldrb	r2, [r7, #2]
 8009abe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7f7 fc10 	bl	80012fc <HAL_Delay>
}
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d817      	bhi.n	8009b28 <USBH_Get_USB_Status+0x44>
 8009af8:	a201      	add	r2, pc, #4	@ (adr r2, 8009b00 <USBH_Get_USB_Status+0x1c>)
 8009afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afe:	bf00      	nop
 8009b00:	08009b11 	.word	0x08009b11
 8009b04:	08009b17 	.word	0x08009b17
 8009b08:	08009b1d 	.word	0x08009b1d
 8009b0c:	08009b23 	.word	0x08009b23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
    break;
 8009b14:	e00b      	b.n	8009b2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b16:	2302      	movs	r3, #2
 8009b18:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1a:	e008      	b.n	8009b2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b20:	e005      	b.n	8009b2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b22:	2302      	movs	r3, #2
 8009b24:	73fb      	strb	r3, [r7, #15]
    break;
 8009b26:	e002      	b.n	8009b2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b2c:	bf00      	nop
  }
  return usb_status;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
 8009b54:	e001      	b.n	8009b5a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009b56:	2301      	movs	r3, #1
 8009b58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	2101      	movs	r1, #1
 8009b60:	4803      	ldr	r0, [pc, #12]	@ (8009b70 <MX_DriverVbusFS+0x34>)
 8009b62:	f7f8 f8b3 	bl	8001ccc <HAL_GPIO_WritePin>
}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	40020800 	.word	0x40020800

08009b74 <malloc>:
 8009b74:	4b02      	ldr	r3, [pc, #8]	@ (8009b80 <malloc+0xc>)
 8009b76:	4601      	mov	r1, r0
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f000 b82d 	b.w	8009bd8 <_malloc_r>
 8009b7e:	bf00      	nop
 8009b80:	2000002c 	.word	0x2000002c

08009b84 <free>:
 8009b84:	4b02      	ldr	r3, [pc, #8]	@ (8009b90 <free+0xc>)
 8009b86:	4601      	mov	r1, r0
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	f000 b8f5 	b.w	8009d78 <_free_r>
 8009b8e:	bf00      	nop
 8009b90:	2000002c 	.word	0x2000002c

08009b94 <sbrk_aligned>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	4e0f      	ldr	r6, [pc, #60]	@ (8009bd4 <sbrk_aligned+0x40>)
 8009b98:	460c      	mov	r4, r1
 8009b9a:	6831      	ldr	r1, [r6, #0]
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	b911      	cbnz	r1, 8009ba6 <sbrk_aligned+0x12>
 8009ba0:	f000 f8ae 	bl	8009d00 <_sbrk_r>
 8009ba4:	6030      	str	r0, [r6, #0]
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f000 f8a9 	bl	8009d00 <_sbrk_r>
 8009bae:	1c43      	adds	r3, r0, #1
 8009bb0:	d103      	bne.n	8009bba <sbrk_aligned+0x26>
 8009bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	bd70      	pop	{r4, r5, r6, pc}
 8009bba:	1cc4      	adds	r4, r0, #3
 8009bbc:	f024 0403 	bic.w	r4, r4, #3
 8009bc0:	42a0      	cmp	r0, r4
 8009bc2:	d0f8      	beq.n	8009bb6 <sbrk_aligned+0x22>
 8009bc4:	1a21      	subs	r1, r4, r0
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 f89a 	bl	8009d00 <_sbrk_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d1f2      	bne.n	8009bb6 <sbrk_aligned+0x22>
 8009bd0:	e7ef      	b.n	8009bb2 <sbrk_aligned+0x1e>
 8009bd2:	bf00      	nop
 8009bd4:	200009dc 	.word	0x200009dc

08009bd8 <_malloc_r>:
 8009bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bdc:	1ccd      	adds	r5, r1, #3
 8009bde:	f025 0503 	bic.w	r5, r5, #3
 8009be2:	3508      	adds	r5, #8
 8009be4:	2d0c      	cmp	r5, #12
 8009be6:	bf38      	it	cc
 8009be8:	250c      	movcc	r5, #12
 8009bea:	2d00      	cmp	r5, #0
 8009bec:	4606      	mov	r6, r0
 8009bee:	db01      	blt.n	8009bf4 <_malloc_r+0x1c>
 8009bf0:	42a9      	cmp	r1, r5
 8009bf2:	d904      	bls.n	8009bfe <_malloc_r+0x26>
 8009bf4:	230c      	movs	r3, #12
 8009bf6:	6033      	str	r3, [r6, #0]
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cd4 <_malloc_r+0xfc>
 8009c02:	f000 f869 	bl	8009cd8 <__malloc_lock>
 8009c06:	f8d8 3000 	ldr.w	r3, [r8]
 8009c0a:	461c      	mov	r4, r3
 8009c0c:	bb44      	cbnz	r4, 8009c60 <_malloc_r+0x88>
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4630      	mov	r0, r6
 8009c12:	f7ff ffbf 	bl	8009b94 <sbrk_aligned>
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	4604      	mov	r4, r0
 8009c1a:	d158      	bne.n	8009cce <_malloc_r+0xf6>
 8009c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8009c20:	4627      	mov	r7, r4
 8009c22:	2f00      	cmp	r7, #0
 8009c24:	d143      	bne.n	8009cae <_malloc_r+0xd6>
 8009c26:	2c00      	cmp	r4, #0
 8009c28:	d04b      	beq.n	8009cc2 <_malloc_r+0xea>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	4639      	mov	r1, r7
 8009c2e:	4630      	mov	r0, r6
 8009c30:	eb04 0903 	add.w	r9, r4, r3
 8009c34:	f000 f864 	bl	8009d00 <_sbrk_r>
 8009c38:	4581      	cmp	r9, r0
 8009c3a:	d142      	bne.n	8009cc2 <_malloc_r+0xea>
 8009c3c:	6821      	ldr	r1, [r4, #0]
 8009c3e:	1a6d      	subs	r5, r5, r1
 8009c40:	4629      	mov	r1, r5
 8009c42:	4630      	mov	r0, r6
 8009c44:	f7ff ffa6 	bl	8009b94 <sbrk_aligned>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d03a      	beq.n	8009cc2 <_malloc_r+0xea>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	442b      	add	r3, r5
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	f8d8 3000 	ldr.w	r3, [r8]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	bb62      	cbnz	r2, 8009cb4 <_malloc_r+0xdc>
 8009c5a:	f8c8 7000 	str.w	r7, [r8]
 8009c5e:	e00f      	b.n	8009c80 <_malloc_r+0xa8>
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	1b52      	subs	r2, r2, r5
 8009c64:	d420      	bmi.n	8009ca8 <_malloc_r+0xd0>
 8009c66:	2a0b      	cmp	r2, #11
 8009c68:	d917      	bls.n	8009c9a <_malloc_r+0xc2>
 8009c6a:	1961      	adds	r1, r4, r5
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	6025      	str	r5, [r4, #0]
 8009c70:	bf18      	it	ne
 8009c72:	6059      	strne	r1, [r3, #4]
 8009c74:	6863      	ldr	r3, [r4, #4]
 8009c76:	bf08      	it	eq
 8009c78:	f8c8 1000 	streq.w	r1, [r8]
 8009c7c:	5162      	str	r2, [r4, r5]
 8009c7e:	604b      	str	r3, [r1, #4]
 8009c80:	4630      	mov	r0, r6
 8009c82:	f000 f82f 	bl	8009ce4 <__malloc_unlock>
 8009c86:	f104 000b 	add.w	r0, r4, #11
 8009c8a:	1d23      	adds	r3, r4, #4
 8009c8c:	f020 0007 	bic.w	r0, r0, #7
 8009c90:	1ac2      	subs	r2, r0, r3
 8009c92:	bf1c      	itt	ne
 8009c94:	1a1b      	subne	r3, r3, r0
 8009c96:	50a3      	strne	r3, [r4, r2]
 8009c98:	e7af      	b.n	8009bfa <_malloc_r+0x22>
 8009c9a:	6862      	ldr	r2, [r4, #4]
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	bf0c      	ite	eq
 8009ca0:	f8c8 2000 	streq.w	r2, [r8]
 8009ca4:	605a      	strne	r2, [r3, #4]
 8009ca6:	e7eb      	b.n	8009c80 <_malloc_r+0xa8>
 8009ca8:	4623      	mov	r3, r4
 8009caa:	6864      	ldr	r4, [r4, #4]
 8009cac:	e7ae      	b.n	8009c0c <_malloc_r+0x34>
 8009cae:	463c      	mov	r4, r7
 8009cb0:	687f      	ldr	r7, [r7, #4]
 8009cb2:	e7b6      	b.n	8009c22 <_malloc_r+0x4a>
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d1fb      	bne.n	8009cb4 <_malloc_r+0xdc>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	6053      	str	r3, [r2, #4]
 8009cc0:	e7de      	b.n	8009c80 <_malloc_r+0xa8>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	6033      	str	r3, [r6, #0]
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f000 f80c 	bl	8009ce4 <__malloc_unlock>
 8009ccc:	e794      	b.n	8009bf8 <_malloc_r+0x20>
 8009cce:	6005      	str	r5, [r0, #0]
 8009cd0:	e7d6      	b.n	8009c80 <_malloc_r+0xa8>
 8009cd2:	bf00      	nop
 8009cd4:	200009e0 	.word	0x200009e0

08009cd8 <__malloc_lock>:
 8009cd8:	4801      	ldr	r0, [pc, #4]	@ (8009ce0 <__malloc_lock+0x8>)
 8009cda:	f000 b84b 	b.w	8009d74 <__retarget_lock_acquire_recursive>
 8009cde:	bf00      	nop
 8009ce0:	20000b20 	.word	0x20000b20

08009ce4 <__malloc_unlock>:
 8009ce4:	4801      	ldr	r0, [pc, #4]	@ (8009cec <__malloc_unlock+0x8>)
 8009ce6:	f000 b846 	b.w	8009d76 <__retarget_lock_release_recursive>
 8009cea:	bf00      	nop
 8009cec:	20000b20 	.word	0x20000b20

08009cf0 <memset>:
 8009cf0:	4402      	add	r2, r0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d100      	bne.n	8009cfa <memset+0xa>
 8009cf8:	4770      	bx	lr
 8009cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8009cfe:	e7f9      	b.n	8009cf4 <memset+0x4>

08009d00 <_sbrk_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d06      	ldr	r5, [pc, #24]	@ (8009d1c <_sbrk_r+0x1c>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	602b      	str	r3, [r5, #0]
 8009d0c:	f7f7 fa12 	bl	8001134 <_sbrk>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_sbrk_r+0x1a>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_sbrk_r+0x1a>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	20000b1c 	.word	0x20000b1c

08009d20 <__errno>:
 8009d20:	4b01      	ldr	r3, [pc, #4]	@ (8009d28 <__errno+0x8>)
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	2000002c 	.word	0x2000002c

08009d2c <__libc_init_array>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	4d0d      	ldr	r5, [pc, #52]	@ (8009d64 <__libc_init_array+0x38>)
 8009d30:	4c0d      	ldr	r4, [pc, #52]	@ (8009d68 <__libc_init_array+0x3c>)
 8009d32:	1b64      	subs	r4, r4, r5
 8009d34:	10a4      	asrs	r4, r4, #2
 8009d36:	2600      	movs	r6, #0
 8009d38:	42a6      	cmp	r6, r4
 8009d3a:	d109      	bne.n	8009d50 <__libc_init_array+0x24>
 8009d3c:	4d0b      	ldr	r5, [pc, #44]	@ (8009d6c <__libc_init_array+0x40>)
 8009d3e:	4c0c      	ldr	r4, [pc, #48]	@ (8009d70 <__libc_init_array+0x44>)
 8009d40:	f000 f864 	bl	8009e0c <_init>
 8009d44:	1b64      	subs	r4, r4, r5
 8009d46:	10a4      	asrs	r4, r4, #2
 8009d48:	2600      	movs	r6, #0
 8009d4a:	42a6      	cmp	r6, r4
 8009d4c:	d105      	bne.n	8009d5a <__libc_init_array+0x2e>
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d54:	4798      	blx	r3
 8009d56:	3601      	adds	r6, #1
 8009d58:	e7ee      	b.n	8009d38 <__libc_init_array+0xc>
 8009d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d5e:	4798      	blx	r3
 8009d60:	3601      	adds	r6, #1
 8009d62:	e7f2      	b.n	8009d4a <__libc_init_array+0x1e>
 8009d64:	08009e48 	.word	0x08009e48
 8009d68:	08009e48 	.word	0x08009e48
 8009d6c:	08009e48 	.word	0x08009e48
 8009d70:	08009e4c 	.word	0x08009e4c

08009d74 <__retarget_lock_acquire_recursive>:
 8009d74:	4770      	bx	lr

08009d76 <__retarget_lock_release_recursive>:
 8009d76:	4770      	bx	lr

08009d78 <_free_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	d041      	beq.n	8009e04 <_free_r+0x8c>
 8009d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d84:	1f0c      	subs	r4, r1, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfb8      	it	lt
 8009d8a:	18e4      	addlt	r4, r4, r3
 8009d8c:	f7ff ffa4 	bl	8009cd8 <__malloc_lock>
 8009d90:	4a1d      	ldr	r2, [pc, #116]	@ (8009e08 <_free_r+0x90>)
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	b933      	cbnz	r3, 8009da4 <_free_r+0x2c>
 8009d96:	6063      	str	r3, [r4, #4]
 8009d98:	6014      	str	r4, [r2, #0]
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009da0:	f7ff bfa0 	b.w	8009ce4 <__malloc_unlock>
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	d908      	bls.n	8009dba <_free_r+0x42>
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	1821      	adds	r1, r4, r0
 8009dac:	428b      	cmp	r3, r1
 8009dae:	bf01      	itttt	eq
 8009db0:	6819      	ldreq	r1, [r3, #0]
 8009db2:	685b      	ldreq	r3, [r3, #4]
 8009db4:	1809      	addeq	r1, r1, r0
 8009db6:	6021      	streq	r1, [r4, #0]
 8009db8:	e7ed      	b.n	8009d96 <_free_r+0x1e>
 8009dba:	461a      	mov	r2, r3
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	b10b      	cbz	r3, 8009dc4 <_free_r+0x4c>
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d9fa      	bls.n	8009dba <_free_r+0x42>
 8009dc4:	6811      	ldr	r1, [r2, #0]
 8009dc6:	1850      	adds	r0, r2, r1
 8009dc8:	42a0      	cmp	r0, r4
 8009dca:	d10b      	bne.n	8009de4 <_free_r+0x6c>
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	4401      	add	r1, r0
 8009dd0:	1850      	adds	r0, r2, r1
 8009dd2:	4283      	cmp	r3, r0
 8009dd4:	6011      	str	r1, [r2, #0]
 8009dd6:	d1e0      	bne.n	8009d9a <_free_r+0x22>
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	6053      	str	r3, [r2, #4]
 8009dde:	4408      	add	r0, r1
 8009de0:	6010      	str	r0, [r2, #0]
 8009de2:	e7da      	b.n	8009d9a <_free_r+0x22>
 8009de4:	d902      	bls.n	8009dec <_free_r+0x74>
 8009de6:	230c      	movs	r3, #12
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	e7d6      	b.n	8009d9a <_free_r+0x22>
 8009dec:	6820      	ldr	r0, [r4, #0]
 8009dee:	1821      	adds	r1, r4, r0
 8009df0:	428b      	cmp	r3, r1
 8009df2:	bf04      	itt	eq
 8009df4:	6819      	ldreq	r1, [r3, #0]
 8009df6:	685b      	ldreq	r3, [r3, #4]
 8009df8:	6063      	str	r3, [r4, #4]
 8009dfa:	bf04      	itt	eq
 8009dfc:	1809      	addeq	r1, r1, r0
 8009dfe:	6021      	streq	r1, [r4, #0]
 8009e00:	6054      	str	r4, [r2, #4]
 8009e02:	e7ca      	b.n	8009d9a <_free_r+0x22>
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	bf00      	nop
 8009e08:	200009e0 	.word	0x200009e0

08009e0c <_init>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr

08009e18 <_fini>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr
